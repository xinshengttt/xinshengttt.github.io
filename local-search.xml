<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>RuoYi-Vue-Plus之登录功能</title>
    <link href="/2024/05/11/RuoYi-Vue-Plus%E4%B9%8B%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/"/>
    <url>/2024/05/11/RuoYi-Vue-Plus%E4%B9%8B%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<p>文档地址：<a href="https://plus-doc.dromara.org/#/ruoyi-vue-plus/home">点击这里</a></p><p>项目地址：<a href="https://gitee.com/dromara/RuoYi-Vue-Plus/tree/4.X/">点击这里</a></p><hr><p>用户可以选择密码登录、短信登录、第三方登录、邮件登录、小程序登录(需要扩展)。不同的登录方式执行方法不一样。执行登录时，不管是什么登录方式，都会访问AuthController的login方法。第三方登录会先访问AuthController的authBinding方法，再访问AuthController的login方法。</p><h2 id="AuthController-login方法"><a href="#AuthController-login方法" class="headerlink" title="AuthController.login方法"></a>AuthController.login方法</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token comment">/**    * 登录方法    *    * @param body 登录信息    * @return 结果    */</span><span class="token comment">// 前端传过来的数据加密，后端返回的数据也加密。配合cryptoFilter使用</span>   <span class="token annotation punctuation">@ApiEncrypt</span><span class="token punctuation">(</span>response <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LoginVo</span><span class="token punctuation">></span></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">String</span> body<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">LoginBody</span> loginBody <span class="token operator">=</span> <span class="token class-name">JsonUtils</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token class-name">LoginBody</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 校验参数</span>       <span class="token class-name">ValidatorUtils</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>loginBody<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 授权类型和客户端id</span>       <span class="token class-name">String</span> clientId <span class="token operator">=</span> loginBody<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> grantType <span class="token operator">=</span> loginBody<span class="token punctuation">.</span><span class="token function">getGrantType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">SysClient</span> client <span class="token operator">=</span> clientService<span class="token punctuation">.</span><span class="token function">queryByClientId</span><span class="token punctuation">(</span>clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 查询不到 client 或 client 内不包含 grantType</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getGrantType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> grantType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"客户端id: &#123;&#125; 认证类型：&#123;&#125; 异常!."</span><span class="token punctuation">,</span> clientId<span class="token punctuation">,</span> grantType<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">MessageUtils</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"auth.grant.type.error"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">UserConstants</span><span class="token punctuation">.</span><span class="token constant">NORMAL</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">MessageUtils</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"auth.grant.type.blocked"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">// 校验租户</span>       loginService<span class="token punctuation">.</span><span class="token function">checkTenant</span><span class="token punctuation">(</span>loginBody<span class="token punctuation">.</span><span class="token function">getTenantId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 登录</span>       <span class="token class-name">LoginVo</span> loginVo <span class="token operator">=</span> <span class="token class-name">IAuthStrategy</span><span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> client<span class="token punctuation">,</span> grantType<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">LoginHelper</span><span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       scheduledExecutorService<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>           <span class="token class-name">WebSocketUtils</span><span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> <span class="token string">"欢迎登录RuoYi-Vue-Plus后台管理系统"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>loginVo<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="IAuthStrategy-login方法"><a href="#IAuthStrategy-login方法" class="headerlink" title="IAuthStrategy.login方法"></a>IAuthStrategy.login方法</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> <span class="token constant">BASE_NAME</span> <span class="token operator">=</span> <span class="token string">"AuthStrategy"</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 登录   */</span>  <span class="token keyword">static</span> <span class="token class-name">LoginVo</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> body<span class="token punctuation">,</span> <span class="token class-name">SysClient</span> client<span class="token punctuation">,</span> <span class="token class-name">String</span> grantType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 授权类型和客户端id</span>      <span class="token class-name">String</span> beanName <span class="token operator">=</span> grantType <span class="token operator">+</span> <span class="token constant">BASE_NAME</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">SpringUtils</span><span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">"授权类型不正确!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">IAuthStrategy</span> instance <span class="token operator">=</span> <span class="token class-name">SpringUtils</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> client<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>接口IAuthStrategy，五个登录类都实现了该接口。针对不同的登录方式，执行不同的代码。</p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8B%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/1.png"></p><p>这五个类的@Service上，配置着beanName，例如emailAuthService类</p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8B%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/3.png"></p><h3 id="属性解释"><a href="#属性解释" class="headerlink" title="属性解释"></a>属性解释</h3><h4 id="clientId"><a href="#clientId" class="headerlink" title="clientId"></a>clientId</h4><p>clientId含义是：你登录的平台是什么，项目支持pc端和app端登录(需要扩展)。这是由前端写死然后传给后端。根据你登录的平台，前端传递相应的clientId。</p><h4 id="grantType"><a href="#grantType" class="headerlink" title="grantType"></a>grantType</h4><p>grantType的含义是：授权类型，即你通过什么方式登录。例如密码登录，第三方授权登录等等。</p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8B%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/.png"></p>]]></content>
    
    
    <categories>
      
      <category>RuoYi-Vue-Plus</category>
      
      <category>登录功能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RuoYi-Vue-Plus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第四讲、Spring之Bean后处理器</title>
    <link href="/2024/04/25/%E7%AC%AC%E5%9B%9B%E8%AE%B2%E3%80%81Spring%E4%B9%8BBean%E5%90%8E%E5%A4%84%E7%90%86%E5%99%A8/"/>
    <url>/2024/04/25/%E7%AC%AC%E5%9B%9B%E8%AE%B2%E3%80%81Spring%E4%B9%8BBean%E5%90%8E%E5%A4%84%E7%90%86%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>文章内容根据黑马程序员Spring视频教程所写！！！</p><p>视频地址：<a href="https://www.bilibili.com/video/BV1P44y1N7QG?p=2&vd_source=fa27e5a55c56f75ded6c097aa9b24710">点击这里</a></p><hr><h2 id="常见Bean后处理器"><a href="#常见Bean后处理器" class="headerlink" title="常见Bean后处理器"></a>常见Bean后处理器</h2><p>main方法</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*    bean 后处理器的作用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A04</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ⬇️GenericApplicationContext 是一个【干净】的容器</span>        <span class="token class-name">GenericApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// ⬇️用原始方法注册三个 bean</span>        context<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token string">"bean1"</span><span class="token punctuation">,</span> <span class="token class-name">Bean1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token string">"bean2"</span><span class="token punctuation">,</span> <span class="token class-name">Bean2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token string">"bean3"</span><span class="token punctuation">,</span> <span class="token class-name">Bean3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">getDefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextAnnotationAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token class-name">AutowiredAnnotationBeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// @Autowired @Value</span>        context<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token class-name">CommonAnnotationBeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// @Resource @PostConstruct @PreDestroy</span>        <span class="token comment">// ⬇️初始化容器</span>        context<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行beanFactory后处理器, 添加bean后处理器, 初始化所有单例</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Bean1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// ⬇️销毁容器</span>        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*            学到了什么                a. @Autowired 等注解的解析属于 bean 生命周期阶段(依赖注入, 初始化)的扩展功能                b. 这些扩展功能由 bean 后处理器来完成         */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bean1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Bean1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Bean2</span> bean2<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBean2</span><span class="token punctuation">(</span><span class="token class-name">Bean2</span> bean2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"@Autowired 生效: &#123;&#125;"</span><span class="token punctuation">,</span> bean2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bean2 <span class="token operator">=</span> bean2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">Bean3</span> bean3<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBean3</span><span class="token punctuation">(</span><span class="token class-name">Bean3</span> bean3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"@Resource 生效: &#123;&#125;"</span><span class="token punctuation">,</span> bean3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bean3 <span class="token operator">=</span> bean3<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> home<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHome</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;JAVA_HOME&#125;"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> home<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"@Value 生效: &#123;&#125;"</span><span class="token punctuation">,</span> home<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>home <span class="token operator">=</span> home<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"@PostConstruct 生效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PreDestroy</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"@PreDestroy 生效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Bean1&#123;"</span> <span class="token operator">+</span>               <span class="token string">"bean2="</span> <span class="token operator">+</span> bean2 <span class="token operator">+</span>               <span class="token string">", bean3="</span> <span class="token operator">+</span> bean3 <span class="token operator">+</span>               <span class="token string">", home='"</span> <span class="token operator">+</span> home <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>               <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>执行结果：</p><p><img src="/img/%E7%AC%AC%E5%9B%9B%E8%AE%B2%E3%80%81Spring%E4%B9%8BBean%E5%90%8E%E5%A4%84%E7%90%86%E5%99%A8/2.png"></p><p>如果没有这段代码<code>context.getDefaultListableBeanFactory().setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver());</code>，则会报错，</p><p><img src="/img/%E7%AC%AC%E5%9B%9B%E8%AE%B2%E3%80%81Spring%E4%B9%8BBean%E5%90%8E%E5%A4%84%E7%90%86%E5%99%A8/1.png"></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">context<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token string">"bean4"</span><span class="token punctuation">,</span> <span class="token class-name">Bean4</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ConfigurationPropertiesBindingPostProcessor</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getDefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Bean4</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 内置配置</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"java"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bean4</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> home<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> version<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> home<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHome</span><span class="token punctuation">(</span><span class="token class-name">String</span> home<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>home <span class="token operator">=</span> home<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> version<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVersion</span><span class="token punctuation">(</span><span class="token class-name">String</span> version<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>version <span class="token operator">=</span> version<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Bean4&#123;"</span> <span class="token operator">+</span>               <span class="token string">"home='"</span> <span class="token operator">+</span> home <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>               <span class="token string">", version='"</span> <span class="token operator">+</span> version <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>               <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>执行结果：</p><p><img src="/img/%E7%AC%AC%E5%9B%9B%E8%AE%B2%E3%80%81Spring%E4%B9%8BBean%E5%90%8E%E5%A4%84%E7%90%86%E5%99%A8/3.png"></p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>容器与Bean</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第三讲、Spring之bean生命周期</title>
    <link href="/2024/04/25/%E7%AC%AC%E4%B8%89%E8%AE%B2%E3%80%81Spring%E4%B9%8Bbean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2024/04/25/%E7%AC%AC%E4%B8%89%E8%AE%B2%E3%80%81Spring%E4%B9%8Bbean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<p>文章内容根据黑马程序员Spring视频教程所写！！！</p><p>视频地址：<a href="https://www.bilibili.com/video/BV1P44y1N7QG?p=2&vd_source=fa27e5a55c56f75ded6c097aa9b24710">点击这里</a></p><hr><h2 id="Spring-Bean生命周期的各个阶段"><a href="#Spring-Bean生命周期的各个阶段" class="headerlink" title="Spring Bean生命周期的各个阶段"></a>Spring Bean生命周期的各个阶段</h2><h3 id="生命周期的执行顺序"><a href="#生命周期的执行顺序" class="headerlink" title="生命周期的执行顺序"></a>生命周期的执行顺序</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author Becant * 2024-04-25-17:52 * @version 1.0.0 * bean生命周期 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A03Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">A03Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LifeCycleBean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LifeCycleBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LifeCycleBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"构造"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 说明：@Autowired不会注入String类型的bean，如果有@Value修饰，则会以值注入的方式注入bean</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">autowired</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;JAVA_HOME&#125;"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> home<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"依赖注入:&#123;&#125;"</span><span class="token punctuation">,</span> home<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 注解作用：初始化</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 注解作用：销毁</span>    <span class="token annotation punctuation">@PreDestroy</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>控制台打印：</p><p><img src="/img/%E7%AC%AC%E4%B8%89%E8%AE%B2%E3%80%81Spring%E4%B9%8Bbean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/1.png"></p><p>执行顺序：<code>构造方法-&gt;依赖注入-&gt;初始化-&gt;销毁</code>。Spring bean只有这四个生命周期</p><h3 id="生命周期的功能增强"><a href="#生命周期的功能增强" class="headerlink" title="生命周期的功能增强"></a>生命周期的功能增强</h3><p>生命周期功能增强也就是：生命周期某个阶段的执行前后要增加的功能</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author Becant * 2024-04-25-18:09 * @version 1.0.0 * 后处理器 */</span><span class="token comment">//实现了两个Bean后处理器</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">,</span> <span class="token class-name">DestructionAwareBeanPostProcessor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">MyBeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeforeDestruction</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"LifeCycleBean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;销毁之前执行, 如@preDestroy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInstantiation</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> beanClass<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"LifeCycleBean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;实例化之前执行, 这里返回的对象会替换原本的bean,返回null则Bean不会被替换"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">postProcessAfterInstantiation</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"LifeCycleBean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;实例化之后执行, 这里返回false会跳过依赖注入阶段，返回true则不会"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//            return false;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">PropertyValues</span> <span class="token function">postProcessProperties</span><span class="token punctuation">(</span><span class="token class-name">PropertyValues</span> pvs<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"LifeCycleBean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;依赖注入阶段执行, 扩展功能，如解析@Autowired @Resource @Value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> pvs<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"LifeCycleBean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;初始化之前执行, 这里返回的对象会替换原本的bean,返回null则Bean不会被替换 如@PostConstruct @ConfigurationProperties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"LifeCycleBean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;初始化之后执行, 这里返回的对象会替换原本的bean,返回null则Bean不会被替换 如代理增强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>控制台打印：</p><p><img src="/img/%E7%AC%AC%E4%B8%89%E8%AE%B2%E3%80%81Spring%E4%B9%8Bbean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/2.png"></p><h2 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h2><p>模版方法是设计模式的其中一种，使用模版方法能使代码更容易扩展。</p><p>现在有一个方法</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造"</span> <span class="token operator">+</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"依赖注入"</span> <span class="token operator">+</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化"</span> <span class="token operator">+</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果我们想在依赖注入阶段增强功能，例如增加@Autowired和@Resource的解析。如果不是用模版方法，只能在刚方法的基础上修改代码，这样就违反了开放封闭原则，对修改封闭，对扩展开放。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造"</span> <span class="token operator">+</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"依赖注入"</span> <span class="token operator">+</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解析@Autowired"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解析@Resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化"</span> <span class="token operator">+</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果使用模版方法</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMethodTemplate</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 扩展功能</span>        beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span>bean <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解析 @Autowired"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span>bean <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解析 @Resource"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanFactory</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造"</span> <span class="token operator">+</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"依赖注入"</span> <span class="token operator">+</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span> processor <span class="token operator">:</span> processors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                processor<span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化"</span> <span class="token operator">+</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> bean<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 模版接口集合</span>        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">></span></span> processors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 增加BeanPostProcessor，扩展功能</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span> beanPostProcessor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            processors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanPostProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 模版接口</span>    <span class="token keyword">static</span> <span class="token keyword">interface</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>使用模版方法，观察getBean()方法，对于一些能确定的扩展（静态部分）保持不变；对于一些不能确定的扩展(动态部分)，把它抽象成接口（或者抽象类），这个模版接口所声明的方法，是我们要自己实现的，即根据自己所需实现功能。然后在getBean()方法所在的类上添加一个管理模版接口的集合，以及add方法(把模板接口添加到集合)。在getBean()类上遍历集合，调用方法，就能实现功能。功能的扩展只需要在main函数上添加代码，而不需要修改getBean()函数。</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>容器与Bean</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第二讲、Spring之容器实现</title>
    <link href="/2024/04/24/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E3%80%81Spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/"/>
    <url>/2024/04/24/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E3%80%81Spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>文章内容根据黑马程序员Spring视频教程所写！！！</p><p>视频地址：<a href="https://www.bilibili.com/video/BV1P44y1N7QG?p=2&vd_source=fa27e5a55c56f75ded6c097aa9b24710">点击这里</a></p><hr><h2 id="BeanFactory实现"><a href="#BeanFactory实现" class="headerlink" title="BeanFactory实现"></a>BeanFactory实现</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author Becant * 2024-04-24-20:06 * @version 1.0.0 * 测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBeanFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> <span class="token class-name">Bean1</span> <span class="token function">bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> <span class="token class-name">Bean2</span> <span class="token function">bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean1</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Bean1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"构造 Bean1()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Autowired</span>        <span class="token keyword">private</span> <span class="token class-name">Bean2</span> bean2<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Bean2</span> <span class="token function">getBean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> bean2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean2</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Bean2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"构造 Bean1()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="BeanFactory后处理器"><a href="#BeanFactory后处理器" class="headerlink" title="BeanFactory后处理器"></a>BeanFactory后处理器</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">DefaultListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// bean 的定义 (class, scope, 初始化，销毁)</span>    <span class="token class-name">AbstractBeanDefinition</span> beanDefinition <span class="token operator">=</span>    <span class="token class-name">BeanDefinitionBuilder</span><span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span><span class="token string">"singleton"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 注册到bean工厂</span>    beanFactory<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>test1()方法只是将Config类注册到bean工厂中，至于在Config类中注册的两个Bean为什么没有在控制台打印出来，原因是beanFactory没有解析注解的功能，下面我们来看test2()</p><p>控制台打印：</p><p><img src="/img/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/1.png"></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">DefaultListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// bean 的定义 (class, scope, 初始化，销毁)</span>    <span class="token class-name">AbstractBeanDefinition</span> beanDefinition <span class="token operator">=</span>    <span class="token class-name">BeanDefinitionBuilder</span><span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span><span class="token string">"singleton"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 注册到BeanFactory</span>    beanFactory<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加Spring内置的后处理器，这些后处理器也是bean</span>    <span class="token class-name">AnnotationConfigUtils</span><span class="token punctuation">.</span><span class="token function">registerAnnotationConfigProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 执行BeanFactory后处理器</span>    beanFactory<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>beanFactoryPostProcessor <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            beanFactoryPostProcessor<span class="token punctuation">.</span><span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>给bean工厂添加后处理器，执行后处理器，其中<code>internalConfigurationAnnotationProcessor</code>内处理器有解析@Configuration的功能。</p><p><img src="/img/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/3.png"></p><p>小疑惑：添加内置的后处理器有5个，那么执行的有多少个呢，下面来看控制台打印</p><p><img src="/img/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/2.png"></p><p>只执行了2个，BeanFactoryPostProcessor只包含了两个Spring内置的两个后处理器。</p><p>小结：通过上面的案例，我们发现了其实BeanFactory没有那么多功能，很多功能都是通过后处理器实现的。BeanFactory后处理器的主要功能，就是补充了bean的一些定义。</p><h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><p><code>System.out.println(beanFactory.getBean(Bean1.class).getBean2());</code>，打印这段代码，发现只有Bean1被注入容器，但是Bean1里面获取不到Bean2，明明Bean2被@Autowired修饰。</p><p><img src="/img/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/4.png"></p><p>原因是AutowiredAnnotationBeanPostProcessor没执行。AutowiredAnnotationBeanPostProcessor是Bean后处理器，和BeanFactory后处理器不是同一个东西。</p><h3 id="Bean后处理器"><a href="#Bean后处理器" class="headerlink" title="Bean后处理器"></a>Bean后处理器</h3><p>Bean后处理器，针对bean的生命周期的各个阶段提供扩展。例如@Autowired，@Resource</p><p><img src="/img/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/5.png"></p><p>通过控制台打印，我们也发现了Bean后处理器有两个，AutowiredAnnotationBeanPostProcessor和CommonAnnotationBeanPostProcessor，AutowiredAnnotationBeanPostProcessor可以解析@Autowired；CommonAnnotationBeanPostProcessor可以解析@Resource</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 执行Bean后处理器beanFactory.getBeansOfType(BeanPostProcessor.class).values().forEach(beanFactory::addBeanPostProcessor);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>执行了Bean后处理器，控制台的打印：</p><p><img src="/img/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/6.png"></p><p>注意：当需要用到Bean时，才会去创建Bean，如果想先创建Bean，再使用则要加上<code>beanFactory.preInstantiateSingletons();</code>这句代码是准备好单例Bean的功能</p><p><img src="/img/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/7.png"></p><p><img src="/img/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/8.png"></p><p><img src="/img/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/9.png"></p><p><img src="/img/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/10.png"></p><h3 id="后处理器排序"><a href="#后处理器排序" class="headerlink" title="后处理器排序"></a>后处理器排序</h3><p>问题引出：如果同时对一个变量加了@Autowired和@Resource，会出现什么情况呢？</p><p>修改一下代码，增加了Bean3和Bean4，以及接口inter，Bean3和Bean4实现了inter</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Bean1</span> <span class="token function">bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Bean2</span> <span class="token function">bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Bean3</span> <span class="token function">bean3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Bean4</span> <span class="token function">bean4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">interface</span> <span class="token class-name">Inter</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Bean1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"构造 Bean1()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">Bean2</span> bean2<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"bean4"</span><span class="token punctuation">)</span>    <span class="token comment">// 说明：如果有多个bean对象，@Autowired会根据变量名优先获取bean，也就是获取bean3</span>    <span class="token comment">// @Resource则根据name获取，也就是获取bean4</span>    <span class="token keyword">private</span> <span class="token class-name">Inter</span> bean3<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Bean2</span> <span class="token function">getBean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> bean2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Inter</span> <span class="token function">getInter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> bean3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Bean2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"构造 Bean2()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean3</span> <span class="token keyword">implements</span> <span class="token class-name">Inter</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Bean2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Bean3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"构造 Bean3()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean4</span> <span class="token keyword">implements</span> <span class="token class-name">Inter</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Bean2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Bean4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"构造 Bean4()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在原有的代码基础上，我们执行 <code>        System.out.println(beanFactory.getBean(Bean1.class).getInter());</code>控制台打印了：</p><p><img src="/img/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/11.png"></p><p>为什么获取了Bean3对象而不是获取Bean4对象呢，这是根据Bean后处理器的执行顺序有关的，因为先执行了AutowiredAnnotationBeanPostProcessor，然后才执行CommonAnnotationBeanPostProcessor。故解析@Autowired。</p><p><img src="/img/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/11.png"></p><p>现在，我们让CommonAnnotationBeanPostProcessor先执行，AutowiredAnnotationBeanPostProcessor后执行。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 添加比较器</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getDependencyComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>beanPostProcessor <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beanPostProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>                    beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span>beanPostProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="/img/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/12.png"></p><h4 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h4><p>比较器怎么来的？在添加Spring内置后处理器的时候，也就是执行<code>AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);</code>的时候，这个方法会设置一个比较器</p><p><img src="/img/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/13.png"></p><h4 id="排序原理"><a href="#排序原理" class="headerlink" title="排序原理"></a>排序原理</h4><p>数字越小，排序越优先。</p><p><img src="/img/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/14.png"></p><p><img src="/img/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/15.png"></p><h2 id="ApplicationContext实现"><a href="#ApplicationContext实现" class="headerlink" title="ApplicationContext实现"></a>ApplicationContext实现</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author Becant * 2024-04-25-16:18 * @version 1.0.0 * ApplicationContext的实现 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A02Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">testAnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testAnnotationConfigServletWebServerApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 注册内嵌的Tomcat服务器</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> <span class="token class-name">ServletWebServerFactory</span> <span class="token class-name">ServletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TomcatServletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 注册DispatcherServlet</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> <span class="token class-name">DispatcherServlet</span> <span class="token function">dispatcherServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 将DispatcherServlet注册到Tomcat上</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> <span class="token class-name">DispatcherServletRegistrationBean</span> <span class="token function">dispatcherServletRegistrationBean</span><span class="token punctuation">(</span><span class="token class-name">DispatcherServlet</span> dispatcherServlet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServletRegistrationBean</span><span class="token punctuation">(</span>dispatcherServlet<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 当web发来请求时，优先通过注册DispatcherServlet，再请求分发到控制器</span>        <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">Controller</span> <span class="token function">controller1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> <span class="token class-name">Bean1</span> <span class="token function">bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> <span class="token class-name">Bean2</span> <span class="token function">bean2</span><span class="token punctuation">(</span><span class="token class-name">Bean1</span> bean1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Bean2</span> bean2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建依赖关系</span>            bean2<span class="token punctuation">.</span><span class="token function">setBean1</span><span class="token punctuation">(</span>bean1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> bean2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean1</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean2</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Bean1</span> bean1<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBean1</span><span class="token punctuation">(</span><span class="token class-name">Bean1</span> bean1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>bean1 <span class="token operator">=</span> bean1<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Bean1</span> <span class="token function">getBean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bean1<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="ClassPathXmlApplicationContext"><a href="#ClassPathXmlApplicationContext" class="headerlink" title="ClassPathXmlApplicationContext"></a>ClassPathXmlApplicationContext</h3><p>该类已过时，日常中基本用不上。</p><h3 id="FileSystemXmlApplicationContext"><a href="#FileSystemXmlApplicationContext" class="headerlink" title="FileSystemXmlApplicationContext"></a>FileSystemXmlApplicationContext</h3><p>该类已过时，日常中基本用不上。</p><h3 id="AnnotationConfigApplicationContext"><a href="#AnnotationConfigApplicationContext" class="headerlink" title="AnnotationConfigApplicationContext"></a>AnnotationConfigApplicationContext</h3><p>测试方法：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testAnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">AnnotationConfigApplicationContext</span> context <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> context<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Bean2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>执行结果：</p><p><img src="/img/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/16.png"></p><p>对于这个类，再使用这个类的构造方法时，<code>AnnotationConfi</code>gApplicationContext context &#x3D;<code>                 new AnnotationConfigApplicationContext(Bean1.class);</code>Bean1这个类上没有任何注解修饰，Bean1也会被注入容器。还有，没有在Config类上添加@Configuration注解，Config，Bean1，Bean2也会被注入容器。</p><h3 id="AnnotationConfigServletWebServerApplicationContext"><a href="#AnnotationConfigServletWebServerApplicationContext" class="headerlink" title="AnnotationConfigServletWebServerApplicationContext"></a>AnnotationConfigServletWebServerApplicationContext</h3><p>测试方法：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testAnnotationConfigServletWebServerApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">AnnotationConfigServletWebServerApplicationContext</span> context <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigServletWebServerApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">WebConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> context<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>执行结果：</p><p><img src="/img/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/17.png"></p><p><img src="/img/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/18.png"></p><p>接下来访问一下localhost:8080&#x2F;hello</p><p><img src="/img/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0/18.png"></p><p>访问成功</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h3><p>BeanFactory 不会做的事：</p><ol><li>不会主动调用 Beanfactory 的后处理器</li><li>不会主动调用 Bean的后处理器</li><li>不会主动初始化单例</li><li>不会解析beanFactory</li><li>不会解析${} 与 #{}</li></ol><p>后处理器有顺序</p><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p>​1.常见的ApplicationContext 容器实现</p><p>​2.内嵌容器、DispatcherServlet 的创建方法、作用</p><p>​3.非web环境的SpringBoot下使用AnnotationConfigApplicationContext</p><p>​4.web环境下的SpringBoot使用AnnotationConfigServletWebServerApplicationContext</p><p>​5.web环境下的SpringBoot核心组件就是ServletWebServerFactory和DispatcherServlet</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>容器与Bean</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一讲、Spring之容器接口</title>
    <link href="/2024/04/24/%E7%AC%AC%E4%B8%80%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E6%8E%A5%E5%8F%A3/"/>
    <url>/2024/04/24/%E7%AC%AC%E4%B8%80%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<p>文章内容根据黑马程序员Spring视频教程所写！！！</p><p>视频地址：<a href="https://www.bilibili.com/video/BV1P44y1N7QG?p=2&vd_source=fa27e5a55c56f75ded6c097aa9b24710">点击这里</a></p><hr><h2 id="一、BeanFactory与ApplicationContext的关系"><a href="#一、BeanFactory与ApplicationContext的关系" class="headerlink" title="一、BeanFactory与ApplicationContext的关系"></a>一、BeanFactory与ApplicationContext的关系</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A01Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">A01Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 容器对象</span>        <span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">A01Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">/**         * 1.到底什么是BeanFactory         *  - 它是ApplicationContext的父类         *  - 它才是Spring的核心容器，主要的ApplicationContext的实现都【组合】了它的功能         */</span>        context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">/**         * 2.BeanFactory能干点啥         *  - 表面上只有getBean()         *  - 实际上控制反转 基本的依赖注入 直至bean的声明周期的各种功能，都由它的实现类提供         */</span>        <span class="token comment">// 通过反射获取字段</span>        <span class="token class-name">Field</span> singletonObjects <span class="token operator">=</span> <span class="token class-name">DefaultSingletonBeanRegistry</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"singletonObjects"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 该字段是private的</span>        singletonObjects<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取bean工厂</span>        <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 得获取bean1工厂的单例bean</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 前提：手动创建了两个容器，component1和component2</span>        map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"component"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">/**         * 3. ApplicationContext比BeanFactory多点啥         */</span>        <span class="token comment">// 处理国际化资源</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">CHINA</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">US</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通配符匹配资源</span>        <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resources <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">"classpath*:META-INF/spring.factories"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Resource</span> resource <span class="token operator">:</span> resources<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 获取环境变量</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java_home"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"server.port"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发布事件</span>        context<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserRegisteredEvent</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>通过查看ConfigurableApplicationContext的类图，发现ApplicationContext间接继承了BeanFactory。其中ApplicationContext直接继承的4个接口(图中黄色框框圈着的接口)组合了BeanFactory的功能，这四个接口的功能是我们经常使用的。</p><p><img src="/img/%E7%AC%AC%E4%B8%80%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E6%8E%A5%E5%8F%A3/1.png"></p><p><code>context.getBean</code>(“aaa”)&#96;，我们点进getBean()的源码(ctrl+alt+鼠标左键)，发现该方法并不是ConfigurableApplicationContext提供，而是通过BeanFactory提供的。</p><p><img src="/img/%E7%AC%AC%E4%B8%80%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E6%8E%A5%E5%8F%A3/2.png"></p><p>通过调试，我们观察context的内容</p><p><img src="/img/%E7%AC%AC%E4%B8%80%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E6%8E%A5%E5%8F%A3/3.png"></p><p>context下有beanFactory，beanFactory下有singletonObjects(存储单例bean)</p><h2 id="二、BeanFactory功能"><a href="#二、BeanFactory功能" class="headerlink" title="二、BeanFactory功能"></a>二、BeanFactory功能</h2><h3 id="DefaultListableBeanFactory"><a href="#DefaultListableBeanFactory" class="headerlink" title="DefaultListableBeanFactory"></a>DefaultListableBeanFactory</h3><p>我们主要来看一下BeanFactory实现类DefaultListableBeanFactory，这是最重要的实现类，下图是DefaultListableBeanFactory的类图(ctrl+alt+u)</p><p><img src="/img/%E7%AC%AC%E4%B8%80%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E6%8E%A5%E5%8F%A3/4.png"></p><p>我们点击DefaultSingletonBeanRegistry，然后按<code>f4</code>，进入到DefaultSingletonBeanRegistry类</p><p><img src="/img/%E7%AC%AC%E4%B8%80%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E6%8E%A5%E5%8F%A3/5.png"></p><p>发现有一个对象singletonObjects，该对象存储的就是单例bean，bean名称与bean是映射关系。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Field</span> singletonObjects <span class="token operator">=</span> <span class="token class-name">DefaultSingletonBeanRegistry</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"singletonObjects"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>singletonObjects<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"component"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>代码执行后，控制台的打印：</p><p><img src="/img/%E7%AC%AC%E4%B8%80%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E6%8E%A5%E5%8F%A3/6.png"></p><h2 id="三、ApplicationContext功能"><a href="#三、ApplicationContext功能" class="headerlink" title="三、ApplicationContext功能"></a>三、ApplicationContext功能</h2><h3 id="1、处理国际化资源"><a href="#1、处理国际化资源" class="headerlink" title="1、处理国际化资源"></a>1、处理国际化资源</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">CHINA</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">US</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p><img src="/img/%E7%AC%AC%E4%B8%80%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E6%8E%A5%E5%8F%A3/7.png"></p><p><img src="/img/%E7%AC%AC%E4%B8%80%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E6%8E%A5%E5%8F%A3/8.png"></p><h3 id="2、通配符匹配资源"><a href="#2、通配符匹配资源" class="headerlink" title="2、通配符匹配资源"></a>2、通配符匹配资源</h3><p>这里的资源指的是磁盘路径或类路径下的文件。如果是<code>file:META-INF/spring.factories</code>代表从磁盘路径下找；如果是<code>classpath:META-INF/spring.factories</code>代表从类路径下找；如果是classpath*:META-INF&#x2F;spring.factories代表从类路径下找，但是包含jar包。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resources <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">"classpath*:META-INF/spring.factories"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Resource</span> resource <span class="token operator">:</span> resources<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="/img/%E7%AC%AC%E4%B8%80%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E6%8E%A5%E5%8F%A3/9.png"></p><h3 id="3、读取系统环境变量或者spring环境变量"><a href="#3、读取系统环境变量或者spring环境变量" class="headerlink" title="3、读取系统环境变量或者spring环境变量"></a>3、读取系统环境变量或者spring环境变量</h3><p>这里获取环境是不区分大小写的</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java_home"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"server.port"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p><img src="/img/%E7%AC%AC%E4%B8%80%E8%AE%B2%E3%80%81spring%E4%B9%8B%E5%AE%B9%E5%99%A8%E6%8E%A5%E5%8F%A3/10.png"></p><h3 id="4、发布事件对象"><a href="#4、发布事件对象" class="headerlink" title="4、发布事件对象"></a>4、发布事件对象</h3><p>context.publishEvent()是ApplicationEventPublisher接口的方法</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">context<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserRegisteredEvent</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>通过发布事件可以解耦合，</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author Becant * 2024-04-24-19:35 * @version 1.0.0 * 事件发布类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRegisteredEvent</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationEvent</span> <span class="token punctuation">&#123;</span>         <span class="token comment">/**     * 发布事件     * @param source 事件源，发布事件的对象     */</span>    <span class="token keyword">public</span> <span class="token class-name">UserRegisteredEvent</span><span class="token punctuation">(</span><span class="token class-name">Object</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @author Becant * 2024-04-24-18:49 * @version 1.0.0 * 容器 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Component1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Component1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 要接收某个事件，必须加上@EventListener，参数要与发布事件的参数一样</span>    <span class="token annotation punctuation">@EventListener</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token class-name">UserRegisteredEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>容器与Bean</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RuoYi-Vue-Plus之api加解密</title>
    <link href="/2024/04/23/RuoYi-Vue-Plus%E4%B9%8Bapi%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
    <url>/2024/04/23/RuoYi-Vue-Plus%E4%B9%8Bapi%E5%8A%A0%E8%A7%A3%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<p>文档地址：<a href="https://plus-doc.dromara.org/#/ruoyi-vue-plus/home">点击这里</a></p><p>项目地址：<a href="https://gitee.com/dromara/RuoYi-Vue-Plus/tree/4.X/">点击这里</a></p><hr><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># api接口加密</span><span class="token key atrule">api-decrypt</span><span class="token punctuation">:</span>  <span class="token comment"># 是否开启全局接口加密</span>  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># AES 加密头标识</span>  <span class="token key atrule">headerFlag</span><span class="token punctuation">:</span> encrypt<span class="token punctuation">-</span>key  <span class="token comment"># 响应加密公钥 非对称算法的公私钥 如：SM2，RSA 使用者请自行更换</span>  <span class="token comment"># 对应前端解密私钥 MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEAmc3CuPiGL/LcIIm7zryCEIbl1SPzBkr75E2VMtxegyZ1lYRD+7TZGAPkvIsBcaMs6Nsy0L78n2qh+lIZMpLH8wIDAQABAkEAk82Mhz0tlv6IVCyIcw/s3f0E+WLmtPFyR9/WtV3Y5aaejUkU60JpX4m5xNR2VaqOLTZAYjW8Wy0aXr3zYIhhQQIhAMfqR9oFdYw1J9SsNc+CrhugAvKTi0+BF6VoL6psWhvbAiEAxPPNTmrkmrXwdm/pQQu3UOQmc2vCZ5tiKpW10CgJi8kCIFGkL6utxw93Ncj4exE/gPLvKcT+1Emnoox+O9kRXss5AiAMtYLJDaLEzPrAWcZeeSgSIzbL+ecokmFKSDDcRske6QIgSMkHedwND1olF8vlKsJUGK3BcdtM8w4Xq7BpSBwsloE=</span>  <span class="token key atrule">publicKey</span><span class="token punctuation">:</span> MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAJnNwrj4hi/y3CCJu868ghCG5dUj8wZK++RNlTLcXoMmdZWEQ/u02RgD5LyLAXGjLOjbMtC+/J9qofpSGTKSx/MCAwEAAQ==  <span class="token comment"># 请求解密私钥 非对称算法的公私钥 如：SM2，RSA 使用者请自行更换</span>  <span class="token comment"># 对应前端加密公钥 MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKoR8mX0rGKLqzcWmOzbfj64K8ZIgOdHnzkXSOVOZbFu/TJhZ7rFAN+eaGkl3C4buccQd/EjEsj9ir7ijT7h96MCAwEAAQ==</span>  <span class="token key atrule">privateKey</span><span class="token punctuation">:</span> MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEAqhHyZfSsYourNxaY7Nt+PrgrxkiA50efORdI5U5lsW79MmFnusUA355oaSXcLhu5xxB38SMSyP2KvuKNPuH3owIDAQABAkAfoiLyL+Z4lf4Myxk6xUDgLaWGximj20CUf+5BKKnlrK+Ed8gAkM0HqoTt2UZwA5E2MzS4EI2gjfQhz5X28uqxAiEA3wNFxfrCZlSZHb0gn2zDpWowcSxQAgiCstxGUoOqlW8CIQDDOerGKH5OmCJ4Z21v+F25WaHYPxCFMvwxpcw99EcvDQIgIdhDTIqD2jfYjPTY8Jj3EDGPbH2HHuffvflECt3Ek60CIQCFRlCkHpi7hthhYhovyloRYsM+IS9h/0BzlEAuO0ktMQIgSPT3aFAgJYwKpqRYKlLDVcflZFCKY7u3UP8iWi1Qw0Y=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><h3 id="ApiDecryptProperties"><a href="#ApiDecryptProperties" class="headerlink" title="ApiDecryptProperties"></a>ApiDecryptProperties</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * api解密属性配置类 * @author wdhcr */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"api-decrypt"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiDecryptProperties</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 加密开关     */</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> enabled<span class="token punctuation">;</span>    <span class="token comment">/**     * 头部标识     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> headerFlag<span class="token punctuation">;</span>    <span class="token comment">/**     * 响应加密公钥     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> publicKey<span class="token punctuation">;</span>    <span class="token comment">/**     * 请求解密私钥     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> privateKey<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="ApiDecryptAutoConfiguration"><a href="#ApiDecryptAutoConfiguration" class="headerlink" title="ApiDecryptAutoConfiguration"></a>ApiDecryptAutoConfiguration</h3><p>@AutoConfiguration<br>@EnableConfigurationProperties(ApiDecryptProperties.class)<br>&#x2F;&#x2F; 与配置文件api-decrypt的enabled属性对比，如果为enabled&#x3D;true则加载bean，否则不加载<br>@ConditionalOnProperty(value &#x3D; “api-decrypt.enabled”, havingValue &#x3D; “true”)<br>public class ApiDecryptAutoConfiguration {</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CryptoFilter</span><span class="token punctuation">></span></span> <span class="token function">cryptoFilterRegistration</span><span class="token punctuation">(</span><span class="token class-name">ApiDecryptProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 该实例将用于注册过滤器</span>    <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CryptoFilter</span><span class="token punctuation">></span></span> registration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置过滤器的调度类型为 REQUEST，表示该过滤器将会拦截所有的 HTTP 请求</span>    registration<span class="token punctuation">.</span><span class="token function">setDispatcherTypes</span><span class="token punctuation">(</span><span class="token class-name">DispatcherType</span><span class="token punctuation">.</span><span class="token constant">REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置过滤器</span>    registration<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CryptoFilter</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 指定过滤器所要拦截的 URL 模式，这里使用了 "/*" 表示拦截所有的 URL</span>    registration<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置过滤器名称</span>    registration<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"cryptoFilter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置过滤器的优先级为最高优先级，这样可以确保该过滤器在其他过滤器之前执行</span>    registration<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">.</span><span class="token constant">HIGHEST_PRECEDENCE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> registration<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>对于@EnableConfigurationProperties的理解，可以查看<a href="https://www.cnblogs.com/xiaomaomao/p/13934688.html">点击这里</a></p><h2 id="ApiEncrypt"><a href="#ApiEncrypt" class="headerlink" title="@ApiEncrypt"></a>@ApiEncrypt</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 强制加密注解 * * @author Michelle.Chung */</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ApiEncrypt</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 响应加密忽略，默认不加密，为 true 时加密     */</span>    <span class="token keyword">boolean</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>当在方法上加上@ApiEcrypts时，前端传过来的数据会进行加密，后端返回的数据不会加密。</p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8Bapi%E5%8A%A0%E8%A7%A3%E5%AF%86/8.png"></p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8Bapi%E5%8A%A0%E8%A7%A3%E5%AF%86/9.png"></p><p>当在方法上加上@ApiEcrypts，并且response设置为true时，前端传过来的数据会进行加密，后端返回的数据也会加密。</p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8Bapi%E5%8A%A0%E8%A7%A3%E5%AF%86/10.png"></p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8Bapi%E5%8A%A0%E8%A7%A3%E5%AF%86/11.png"></p><h2 id="CryptoFilter"><a href="#CryptoFilter" class="headerlink" title="CryptoFilter"></a>CryptoFilter</h2><p>crypto过滤器主要过滤Content-Type为<code>&quot;application/json&quot;</code>以及请求方式为<code>Post</code>或者<code>Put</code>的web请求</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Crypto 过滤器 * * @author wdhcr */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CryptoFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ApiDecryptProperties</span> properties<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CryptoFilter</span><span class="token punctuation">(</span><span class="token class-name">ApiDecryptProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HttpServletRequest</span> servletRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">;</span>        <span class="token class-name">HttpServletResponse</span> servletResponse <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> responseFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">ServletRequest</span> requestWrapper <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ServletResponse</span> responseWrapper <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">EncryptResponseBodyWrapper</span> responseBodyWrapper <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 是否为 json 请求</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">startsWithIgnoreCase</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 是否为 put 或者 post 请求</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">PUT</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 是否存在加密标头</span>                <span class="token class-name">String</span> headerValue <span class="token operator">=</span> servletRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getHeaderFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获取加密注解</span>                <span class="token class-name">ApiEncrypt</span> apiEncrypt <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getApiEncryptAnnotation</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>                responseFlag <span class="token operator">=</span> apiEncrypt <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> apiEncrypt<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>headerValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 请求解密</span>                    requestWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecryptRequestBodyWrapper</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> properties<span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">.</span><span class="token function">getHeaderFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 前端不设置加密，如果有注解，则报错，没有则放行</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>apiEncrypt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">HandlerExceptionResolver</span> exceptionResolver <span class="token operator">=</span> <span class="token class-name">SpringUtils</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"handlerExceptionResolver"</span><span class="token punctuation">,</span> <span class="token class-name">HandlerExceptionResolver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        exceptionResolver<span class="token punctuation">.</span><span class="token function">resolveException</span><span class="token punctuation">(</span>                            servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                            <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">"没有访问权限，请联系管理员授权"</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">FORBIDDEN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 判断是否响应加密</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>responseFlag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    responseBodyWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EncryptResponseBodyWrapper</span><span class="token punctuation">(</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>                    responseWrapper <span class="token operator">=</span> responseBodyWrapper<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 请求下一个过滤器</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>            <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">defaultIfNull</span><span class="token punctuation">(</span>requestWrapper<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">defaultIfNull</span><span class="token punctuation">(</span>responseWrapper<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>responseFlag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            servletResponse<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 对原始内容加密</span>            <span class="token class-name">String</span> encryptContent <span class="token operator">=</span> responseBodyWrapper<span class="token punctuation">.</span><span class="token function">getEncryptContent</span><span class="token punctuation">(</span>                servletResponse<span class="token punctuation">,</span> properties<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">.</span><span class="token function">getHeaderFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 对加密后的内容写出</span>            servletResponse<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>encryptContent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取 ApiEncrypt 注解     */</span>    <span class="token keyword">private</span> <span class="token class-name">ApiEncrypt</span> <span class="token function">getApiEncryptAnnotation</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> servletRequest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RequestMappingHandlerMapping</span> handlerMapping <span class="token operator">=</span> <span class="token class-name">SpringUtils</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"requestMappingHandlerMapping"</span><span class="token punctuation">,</span> <span class="token class-name">RequestMappingHandlerMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取注解</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">HandlerExecutionChain</span> mappingHandler <span class="token operator">=</span> handlerMapping<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>mappingHandler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Object</span> handler <span class="token operator">=</span> mappingHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 从handler获取注解</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">HandlerMethod</span> handlerMethod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> handlerMethod<span class="token punctuation">.</span><span class="token function">getMethodAnnotation</span><span class="token punctuation">(</span><span class="token class-name">ApiEncrypt</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>对于RequestMappingHandlerMapping的理解，可以查看<a href="%5Bhttps://juejin.cn/post/7203336895887441980">点击这里</a></p><h3 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h3><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8Bapi%E5%8A%A0%E8%A7%A3%E5%AF%86/1.png"></p><h4 id="查看标头"><a href="#查看标头" class="headerlink" title="查看标头"></a>查看标头</h4><p>如果前端传来加密标头，则请求解密。</p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8Bapi%E5%8A%A0%E8%A7%A3%E5%AF%86/2.png"></p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8Bapi%E5%8A%A0%E8%A7%A3%E5%AF%86/3.png"></p><h4 id="请求解密"><a href="#请求解密" class="headerlink" title="请求解密"></a>请求解密</h4><p>这里说明一下前端的加密过程：前端通过请求标头 <code>Encrypt-Key</code> 传递ASC秘钥(一层加密)，该秘钥是解析请求参数的密码，也就是解析login接口中参数body的密码。但是，这个ASC秘钥先经过Base64加密(二层加密)，再经过RSA加密(三层加密)。</p><p>后端解密步骤：先从配置文件获取RSA私钥，用来解开第三层加密；然后解开第二层加密(解开Base64不需要密码)，最后得到ASC秘钥。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">DecryptRequestBodyWrapper</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">String</span> privateKey<span class="token punctuation">,</span> <span class="token class-name">String</span> headerFlag<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取请求标头Encrypt-Key的值(ASC秘钥)</span>        <span class="token class-name">String</span> headerRsa <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>headerFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 第三层解密(RSA解密，privateKey：私钥)</span>        <span class="token class-name">String</span> decryptAes <span class="token operator">=</span> <span class="token class-name">EncryptUtils</span><span class="token punctuation">.</span><span class="token function">decryptByRsa</span><span class="token punctuation">(</span>headerRsa<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 第二层解密(Base64解密)</span>        <span class="token class-name">String</span> aesPassword <span class="token operator">=</span> <span class="token class-name">EncryptUtils</span><span class="token punctuation">.</span><span class="token function">decryptByBase64</span><span class="token punctuation">(</span>decryptAes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置编码</span>        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">UTF8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> readBytes <span class="token operator">=</span> <span class="token class-name">IoUtil</span><span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> requestBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>readBytes<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 第一层加密(ASC加密) 最终结果</span>        <span class="token class-name">String</span> decryptBody <span class="token operator">=</span> <span class="token class-name">EncryptUtils</span><span class="token punctuation">.</span><span class="token function">decryptByAes</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">,</span> aesPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>        body <span class="token operator">=</span> decryptBody<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8Bapi%E5%8A%A0%E8%A7%A3%E5%AF%86/4.png"></p><p>解密完成后，根据过滤器链，如果该过滤器下还有过滤器，则执行下一个过滤器，否则，进行加密过程。</p><h4 id="请求加密"><a href="#请求加密" class="headerlink" title="请求加密"></a>请求加密</h4><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;**     * 获取加密内容     *     * @param servletResponse response     * @param publicKey       RSA公钥 (用于加密 AES 秘钥)     * @param headerFlag      请求头标志     * @return 加密内容     * @throws IOException     *&#x2F;    public String getEncryptContent(HttpServletResponse servletResponse, String publicKey, String headerFlag) throws IOException &#123;        &#x2F;&#x2F; 生成秘钥        String aesPassword &#x3D; RandomUtil.randomString(32);        &#x2F;&#x2F; 秘钥使用 Base64 编码        String encryptAes &#x3D; EncryptUtils.encryptByBase64(aesPassword);        &#x2F;&#x2F; Rsa 公钥加密 Base64 编码        String encryptPassword &#x3D; EncryptUtils.encryptByRsa(encryptAes, publicKey);        &#x2F;&#x2F; 设置响应头        servletResponse.setHeader(headerFlag, encryptPassword);        servletResponse.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);        servletResponse.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;*&quot;);        servletResponse.setCharacterEncoding(StandardCharsets.UTF_8.toString());        &#x2F;&#x2F; 获取原始内容        String originalBody &#x3D; this.getContent();        &#x2F;&#x2F; 对内容进行加密        return EncryptUtils.encryptByAes(originalBody, aesPassword);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><p>前端传来加密内容</p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8Bapi%E5%8A%A0%E8%A7%A3%E5%AF%86/5.png"></p><p>后端解析内容</p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8Bapi%E5%8A%A0%E8%A7%A3%E5%AF%86/6.png"></p><p>如果@ApiEncrypt.response设置为true，则对内容进行加密，返回给前端；否则内容不加密，直接返回给前端。</p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8Bapi%E5%8A%A0%E8%A7%A3%E5%AF%86/7.png"></p>]]></content>
    
    
    <categories>
      
      <category>RuoYi-Vue-Plus</category>
      
      <category>加解密</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RuoYi-Vue-Plus</tag>
      
      <tag>加解密</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RuoYi-Vue-Plus之第三方授权</title>
    <link href="/2024/04/21/RuoYi-Vue-Plus%E4%B9%8B%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%88%E6%9D%83/"/>
    <url>/2024/04/21/RuoYi-Vue-Plus%E4%B9%8B%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%88%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<p>文档地址：<a href="https://plus-doc.dromara.org/#/ruoyi-vue-plus/home">点击这里</a></p><p>项目地址：<a href="https://gitee.com/dromara/RuoYi-Vue-Plus/tree/4.X/">点击这里</a></p><p>功能介绍：<a href="https://www.justauth.cn/">点击这里</a></p><hr><h2 id="第三方授权"><a href="#第三方授权" class="headerlink" title="第三方授权"></a>第三方授权</h2><p>要实现第三方授权，不同的第三方需要配置的信息不一样，下面是一部分第三方应用的配置信息。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8B%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%88%E6%9D%83/1.png"></p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8B%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%88%E6%9D%83/2.png"></p><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"justauth"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocialProperties</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 是否启用     */</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> enabled<span class="token punctuation">;</span>    <span class="token comment">/**     * 授权类型     * SocialLoginConfigProperties已在上图指出     */</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">SocialLoginConfigProperties</span><span class="token punctuation">></span></span> type<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="SocialUtils工具类"><a href="#SocialUtils工具类" class="headerlink" title="SocialUtils工具类"></a>SocialUtils工具类</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 认证授权工具类 * * @author thiszhc */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocialUtils</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AuthRedisStateCache</span> <span class="token constant">STATE_CACHE</span> <span class="token operator">=</span> <span class="token class-name">SpringUtils</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">AuthRedisStateCache</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AuthResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthUser</span><span class="token punctuation">></span></span> <span class="token function">loginAuth</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">,</span> <span class="token class-name">String</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> state<span class="token punctuation">,</span> <span class="token class-name">SocialProperties</span> socialProperties<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AuthRequest</span> authRequest <span class="token operator">=</span> <span class="token function">getAuthRequest</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> socialProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AuthCallback</span> callback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        callback<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        callback<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> authRequest<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AuthRequest</span> <span class="token function">getAuthRequest</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">,</span> <span class="token class-name">SocialProperties</span> socialProperties<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SocialLoginConfigProperties</span> obj <span class="token operator">=</span> socialProperties<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AuthException</span><span class="token punctuation">(</span><span class="token string">"不支持的第三方登录类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">AuthConfig<span class="token punctuation">.</span>AuthConfigBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">AuthConfig</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">clientId</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">clientSecret</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClientSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">redirectUri</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getRedirectUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token string">"dingtalk"</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AuthDingTalkRequest</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STATE_CACHE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"baidu"</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AuthBaiduRequest</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STATE_CACHE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"github"</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AuthGithubRequest</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STATE_CACHE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"gitee"</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AuthGiteeRequest</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STATE_CACHE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"weibo"</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AuthWeiboRequest</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STATE_CACHE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"coding"</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AuthCodingRequest</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STATE_CACHE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"oschina"</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AuthOschinaRequest</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STATE_CACHE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 支付宝在创建回调地址时，不允许使用localhost或者127.0.0.1，所以这儿的回调地址使用的局域网内的ip</span>            <span class="token keyword">case</span> <span class="token string">"alipay_wallet"</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AuthAlipayRequest</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> socialProperties<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"alipay_wallet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAlipayPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STATE_CACHE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"qq"</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AuthQqRequest</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STATE_CACHE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"wechat_open"</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AuthWeChatOpenRequest</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STATE_CACHE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"taobao"</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AuthTaobaoRequest</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STATE_CACHE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"douyin"</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AuthDouyinRequest</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STATE_CACHE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"linkedin"</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AuthLinkedinRequest</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STATE_CACHE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"microsoft"</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AuthMicrosoftRequest</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STATE_CACHE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"renren"</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AuthRenrenRequest</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STATE_CACHE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"stack_overflow"</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AuthStackOverflowRequest</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">stackOverflowKey</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STATE_CACHE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"huawei"</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AuthHuaweiRequest</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STATE_CACHE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"wechat_enterprise"</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AuthWeChatEnterpriseQrcodeRequest</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">agentId</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STATE_CACHE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"gitlab"</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AuthGitlabRequest</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STATE_CACHE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"wechat_mp"</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AuthWeChatMpRequest</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STATE_CACHE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"aliyun"</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AuthAliyunRequest</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STATE_CACHE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"maxkey"</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AuthMaxKeyRequest</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STATE_CACHE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span> <span class="token operator">-></span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AuthException</span><span class="token punctuation">(</span><span class="token string">"未获取到有效的Auth配置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="国外平台配置"><a href="#国外平台配置" class="headerlink" title="国外平台配置"></a>国外平台配置</h4><p>如果配置的是国外平台授权登录，例如google，修改一下getAuthRequest()方法，在switch语句中加上 <code>case &quot;google&quot; -&gt; new AuthGoogleRequest(builder.build(), STATE_CACHE);</code>，然后</p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8B%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%88%E6%9D%83/9.png"></p><p>例如我的微屁恩，选择http&#x2F;https的ip</p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8B%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%88%E6%9D%83/10.png"></p><p>或者打开代理设置</p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8B%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%88%E6%9D%83/11.png"></p><h3 id="请求登录"><a href="#请求登录" class="headerlink" title="请求登录"></a>请求登录</h3><h4 id="控制层方法"><a href="#控制层方法" class="headerlink" title="控制层方法"></a>控制层方法</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 第三方登录请求     *     * @param source 登录来源     * @return 结果     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/binding/&#123;source&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">authBinding</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"source"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>socialProperties<span class="token punctuation">.</span><span class="token function">getEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"第三方授权登录已关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 从配置文件中获得信息</span>        <span class="token class-name">SocialLoginConfigProperties</span> obj <span class="token operator">=</span> socialProperties<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>source <span class="token operator">+</span> <span class="token string">"平台账号暂不支持"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">AuthRequest</span> authRequest <span class="token operator">=</span> <span class="token class-name">SocialUtils</span><span class="token punctuation">.</span><span class="token function">getAuthRequest</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> socialProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> authorizeUrl <span class="token operator">=</span> authRequest<span class="token punctuation">.</span><span class="token function">authorize</span><span class="token punctuation">(</span><span class="token class-name">AuthStateUtils</span><span class="token punctuation">.</span><span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">"操作成功"</span><span class="token punctuation">,</span> authorizeUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="分析authRequest-authorize-AuthStateUtils-createState"><a href="#分析authRequest-authorize-AuthStateUtils-createState" class="headerlink" title="分析authRequest.authorize(AuthStateUtils.createState())"></a>分析authRequest.authorize(AuthStateUtils.createState())</h4><p>AuthStateUtils.createState()：生成uuid</p><p>进入方法源码：</p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8B%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%88%E6%9D%83/3.png"></p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8B%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%88%E6%9D%83/4.png"></p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8B%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%88%E6%9D%83/5.png"></p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8B%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%88%E6%9D%83/6.png"></p><p>经过追溯源码，发现该方法主要作用就是构建url以及把uuid缓存到redis中</p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8B%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%88%E6%9D%83/7.png"></p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8B%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%88%E6%9D%83/8.png"></p><h3 id="绑定授权"><a href="#绑定授权" class="headerlink" title="绑定授权"></a>绑定授权</h3><h4 id="控制层方法-1"><a href="#控制层方法-1" class="headerlink" title="控制层方法"></a>控制层方法</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 第三方登录回调业务处理 绑定授权     *     * @param loginBody 请求体     * @return 结果     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/social/callback"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">socialCallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">SocialLoginBody</span> loginBody<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>socialProperties<span class="token punctuation">.</span><span class="token function">getEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"第三方授权登录已关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 获取第三方登录信息</span>        <span class="token class-name">AuthResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthUser</span><span class="token punctuation">></span></span> response <span class="token operator">=</span> <span class="token class-name">SocialUtils</span><span class="token punctuation">.</span><span class="token function">loginAuth</span><span class="token punctuation">(</span>                loginBody<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loginBody<span class="token punctuation">.</span><span class="token function">getSocialCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                loginBody<span class="token punctuation">.</span><span class="token function">getSocialState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> socialProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AuthUser</span> authUserData <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 判断授权响应是否成功</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        loginService<span class="token punctuation">.</span><span class="token function">socialRegister</span><span class="token punctuation">(</span>authUserData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>当我们需要绑定第三方应用时，会先调用请求登录接口，如果请求成功，然后再调用绑定授权接口。进入到SocialUtils.loginAuth(),然后进入authRequest.login()。</p><h4 id="分析Request-login-callback"><a href="#分析Request-login-callback" class="headerlink" title="分析Request.login(callback)"></a>分析Request.login(callback)</h4><p>进入authRequest.login()源方法</p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8B%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%88%E6%9D%83/12.png"></p><p>进入getAccessToken()方法</p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8B%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%88%E6%9D%83/13.png"></p><p>进入getUserInfo()方法</p><p><img src="/img/RuoYi-Vue-Plus%E4%B9%8B%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%88%E6%9D%83/14.png"></p><p>最终咱们可以获取到：将用户信息设置到授权相应类AuthResponse。然后进行下一步的处理：存到数据库中。</p><h3 id="取消绑定"><a href="#取消绑定" class="headerlink" title="取消绑定"></a>取消绑定</h3><p>从数据库删除 需要取消绑定的用户即可。</p>]]></content>
    
    
    <categories>
      
      <category>RuoYi-Vue-Plus</category>
      
      <category>第三方授权</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RuoYi-Vue-Plus</tag>
      
      <tag>JustAuth</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ruoyi-vue-plus之分页功能</title>
    <link href="/2024/04/21/ruoyi-vue-plus%E4%B9%8B%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD/"/>
    <url>/2024/04/21/ruoyi-vue-plus%E4%B9%8B%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<p>文档地址：<a href="https://plus-doc.dromara.org/#/ruoyi-vue-plus/home">点击这里</a></p><p>项目地址：<a href="https://gitee.com/dromara/RuoYi-Vue-Plus/tree/4.X/">点击这里</a></p><p>功能介绍①：<a href="https://plus-doc.dromara.org/#/ruoyi-vue-plus/framework/basic/page">点击这里</a></p><p>功能介绍②：<a href="https://baomidou.com/pages/97710a/#paginationinnerinterceptor">点击这里</a></p><hr><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><h3 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h3><p>本文章重点讲解分页功能，下面是本项目的mybatis-plus的配置类，已忽略掉数据权限处理和乐观锁插件。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 启用事务管理的注解，该注解用于配置类上</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token punctuation">(</span>proxyTargetClass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">// 当前的自动配置类应该在 MybatisPlusAutoConfiguration.class 之前被加载和生效</span><span class="token annotation punctuation">@AutoConfiguration</span><span class="token punctuation">(</span>before <span class="token operator">=</span> <span class="token class-name">MybatisPlusAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment">// 注解用于指定要扫描的 Mapper 接口所在的包路径，并将这些接口注册为 Spring 的 Bean</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"$&#123;mybatis-plus.mapperPackage&#125;"</span><span class="token punctuation">)</span><span class="token comment">// value指定了要加载的属性文件的位置  factory指定了属性文件加载的工厂类</span><span class="token comment">// 这个工厂类负责将属性文件解析为 Spring 的 PropertySource 对象，使得应用程序能够读取其中的属性值。</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"classpath:common-mybatis.yml"</span><span class="token punctuation">,</span> factory <span class="token operator">=</span> <span class="token class-name">YmlPropertySourceFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 分页插件</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token function">paginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/**     * 分页插件，自动识别数据库类型     */</span>    <span class="token keyword">public</span> <span class="token class-name">PaginationInnerInterceptor</span> <span class="token function">paginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PaginationInnerInterceptor</span> paginationInnerInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置最大单页限制数量，默认 500 条，-1 不受限制</span>        paginationInnerInterceptor<span class="token punctuation">.</span><span class="token function">setMaxLimit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 分页合理化，溢出总页数后进行处理</span>        paginationInnerInterceptor<span class="token punctuation">.</span><span class="token function">setOverflow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> paginationInnerInterceptor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>由于该项目有多数据源，故没有配上具体的DbType</p><h3 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h3><p>例如，获取用户列表</p><p>控制层代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 获取用户列表 */</span><span class="token annotation punctuation">@SaCheckPermission</span><span class="token punctuation">(</span><span class="token string">"system:user:list"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">TableDataInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUserVo</span><span class="token punctuation">></span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">SysUserBo</span> user<span class="token punctuation">,</span> <span class="token class-name">PageQuery</span> pageQuery<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">selectPageUserList</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> pageQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>返回对象是<code>TableDataInfo&lt;SysUserVo&gt;</code>,参数是SysUserBo和PageQuery。</p><p>注意，SysUserBo对象前面没有@RequestBody，原因是参数通过url路径传递(Query String Parameters).如果是参数是通过请求体传递(Request Payload)，则需要添加@RequestBody.</p><p><img src="/img/ruoyi-vue-plus%E4%B9%8B%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD/3.png"></p><h3 id="TableDataInfo"><a href="#TableDataInfo" class="headerlink" title="TableDataInfo&lt;T&gt;"></a><code>TableDataInfo&lt;T&gt;</code></h3><p><code>TableDataInfo&lt;T&gt;</code>是表格分页数据对象，用于返回前端。通过build()方法构造出返回对象。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">TableDataInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> page<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">TableDataInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> rspData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableDataInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rspData<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">HTTP_OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rspData<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token string">"查询成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rspData<span class="token punctuation">.</span><span class="token function">setRows</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rspData<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> rspData<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>重载方法：<code>build(List&lt;T&gt; list)</code>和 <code>build()</code>也能构造出返回对象</p><h3 id="PageQuery"><a href="#PageQuery" class="headerlink" title="PageQuery"></a>PageQuery</h3><p>PageQuery是分页查询实体类，核心是build()方法</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// DEFAULT_PAGE_NUM默认为1</span>    <span class="token class-name">Integer</span> pageNum <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">defaultIfNull</span><span class="token punctuation">(</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_PAGE_NUM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// DEFAULT_PAGE_SIZE默认为Integer.MAX_VALUE</span>    <span class="token class-name">Integer</span> pageSize <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">defaultIfNull</span><span class="token punctuation">(</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_PAGE_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pageNum <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pageNum <span class="token operator">=</span> <span class="token constant">DEFAULT_PAGE_NUM</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 构建排序</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderItem</span><span class="token punctuation">></span></span> orderItems <span class="token operator">=</span> <span class="token function">buildOrderItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>orderItems<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        page<span class="token punctuation">.</span><span class="token function">addOrder</span><span class="token punctuation">(</span>orderItems<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> page<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>返回类型是<code>Page&lt;T&gt;</code>，是接口 <code>Ipage&lt;T&gt;</code>的实现类，用来实现分页，拼接分页语句</p><h3 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h3><p><img src="/img/ruoyi-vue-plus%E4%B9%8B%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD/1.png"></p><h3 id="数据层"><a href="#数据层" class="headerlink" title="数据层"></a>数据层</h3><h4 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 数据权限注解</span><span class="token annotation punctuation">@DataPermission</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@DataColumn</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"deptName"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"d.dept_id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@DataColumn</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"userName"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"u.user_id"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUserVo</span><span class="token punctuation">></span></span> <span class="token function">selectPageUserList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">></span></span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">WRAPPER</span><span class="token punctuation">)</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="mapper-xml"><a href="#mapper-xml" class="headerlink" title="mapper.xml"></a>mapper.xml</h4><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectPageUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SysUserResult<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select u.user_id, u.dept_id, u.nick_name, u.user_name, u.email, u.avatar, u.phonenumber, u.sex,        u.status, u.del_flag, u.login_ip, u.login_date, u.create_by, u.create_time, u.remark,        d.dept_name, d.leader, u1.user_name as leaderName    from sys_user u        left join sys_dept d on u.dept_id = d.dept_id        left join sys_user u1 on u1.user_id = d.leader    $&#123;ew.getCustomSqlSegment&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>从mapper.xml文件中看出，最后拼接了<code>$&#123;ew.getCustomSqlSegment&#125;</code>，也就是参数queryWrapper。而page是mybatis-puls自动帮我们拼接的。当调用list接口时，sql的执行语句如下，拼接了分页条件</p><p><img src="/img/ruoyi-vue-plus%E4%B9%8B%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD/2.png"></p>]]></content>
    
    
    <categories>
      
      <category>RuoYi-Vue-Plus</category>
      
      <category>分页功能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RuoYi-Vue-Plus</tag>
      
      <tag>MyBatis-Plus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ruoyi-vue-plus之数据权限</title>
    <link href="/2024/04/20/ruoyi-vue-plus%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9D%83%E9%99%90/"/>
    <url>/2024/04/20/ruoyi-vue-plus%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9D%83%E9%99%90/</url>
    
    <content type="html"><![CDATA[<p>文档地址：<a href="https://plus-doc.dromara.org/#/ruoyi-vue-plus/home">点击这里</a></p><p>项目地址：<a href="https://gitee.com/dromara/RuoYi-Vue-Plus/tree/4.X/">点击这里</a></p><p><strong>功能介绍</strong>：<a href="https://plus-doc.dromara.org/#/ruoyi-vue-plus/framework/basic/permissions">点击这里</a></p><hr><p>自行查看<strong>功能介绍</strong>即可，大佬讲的很细致~</p>]]></content>
    
    
    <categories>
      
      <category>RuoYi-Vue-Plus</category>
      
      <category>数据权限</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RuoYi-Vue-Plus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ruoyi-vue-plus之pom文件</title>
    <link href="/2024/04/20/ruoyi-vue-plus%E4%B9%8Bpom%E6%96%87%E4%BB%B6/"/>
    <url>/2024/04/20/ruoyi-vue-plus%E4%B9%8Bpom%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot的pom文件配置解析"><a href="#SpringBoot的pom文件配置解析" class="headerlink" title="SpringBoot的pom文件配置解析"></a>SpringBoot的pom文件配置解析</h2><p>文档地址：<a href="https://plus-doc.dromara.org/#/ruoyi-vue-plus/home">点击这里</a></p><p>项目地址：<a href="https://gitee.com/dromara/RuoYi-Vue-Plus/tree/4.X/">点击这里</a></p><hr><h3 id="profiles-profile"><a href="#profiles-profile" class="headerlink" title="profiles.profile"></a>profiles.profile</h3><p>下面是本项目的ruoyi-admin(父类)的pom文件profiles.profile</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>local<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 环境标识，需要与配置文件的名称相对应 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles.active</span><span class="token punctuation">></span></span>local<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles.active</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logging.level</span><span class="token punctuation">></span></span>info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logging.level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 环境标识，需要与配置文件的名称相对应 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles.active</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles.active</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logging.level</span><span class="token punctuation">></span></span>info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logging.level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 默认环境 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>prod<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles.active</span><span class="token punctuation">></span></span>prod<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles.active</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logging.level</span><span class="token punctuation">></span></span>warn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logging.level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="标签"><a href="#标签" class="headerlink" title="标签 &lt;profiles.active&gt;&lt;&#x2F;profiles.active&gt;"></a>标签 &lt;profiles.active&gt;&lt;&#x2F;profiles.active&gt;</h4><p>在开发项目的过程中，通常一个项目会对应着多个不同的环境，例如测试、开发、生产。其中每个环境的配置可能都不一样，因此在父pom文件引入&lt;profiles.active&gt;&lt;&#x2F;profiles.active&gt;能方便我们进行环境的切换。每一个&lt;profiles.active&gt;&lt;&#x2F;profiles.active&gt;对应不同的环境，每个环境对应不同的配置文件(application)。在maven中可以勾选对应的环境。</p><p><img src="/img/ruoyi-vue-plus%E4%B9%8Bpom%E6%96%87%E4%BB%B6/1.png"></p><p>注意：配置环境一定是要application-开头，加上&lt;profiles.active&gt;&lt;&#x2F;profiles.active&gt;中的内容，例如         &lt;profiles.active&gt;dev&lt;&#x2F;profiles.active&gt;就对应着application-dev</p><h4 id="标签-1"><a href="#标签-1" class="headerlink" title="标签 &lt;logging.level&gt;&lt;&#x2F;logging.level&gt;"></a>标签 &lt;logging.level&gt;&lt;&#x2F;logging.level&gt;</h4><p>表示日志级别，日志打印对应着8中形态，级别顺序为：</p><p><strong>ALL &lt; TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FAIL &lt; OFF</strong></p><p>假设当前设置的日志级别是INFO,那么控制台以及日志文件只会显示info,warn,erroe,fail,off级别的日志，也就是只会显示日志级别大于等于info的日志，小于等于info的日志则不会显示在控制台以及日志文件中。</p><h3 id="modules和packaging"><a href="#modules和packaging" class="headerlink" title="modules和packaging"></a>modules和packaging</h3><h4 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h4><p>modules下声明的是子模块，没有子模块则不用声明。</p><p><img src="/img/ruoyi-vue-plus%E4%B9%8Bpom%E6%96%87%E4%BB%B6/2.png"></p><p><img src="/img/ruoyi-vue-plus%E4%B9%8Bpom%E6%96%87%E4%BB%B6/3.png"></p><h4 id="packaging"><a href="#packaging" class="headerlink" title="packaging"></a>packaging</h4><p>packaging意为打包方式，本身是父模块(父pom文件)时，打包方式为pom，这样子模块之间才能进行依赖传递。如果自身是非父模块，则使用jar方式进行打包。pom的意思是项目里没有java代码，也不执行任何代码，只是为了聚合工程或传递依赖用的。所以并不会寻找配置文件，若想配置文件生效，改为jar。如果没设置打包方式，默认是jar.</p><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><h4 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h4><p>plugins引入的插件其实是本地仓库的一个jar包，<code>&lt;configuration&gt;</code>用来补充插件的配置信息。<code>&lt;annotationProcessorPaths&gt;</code>它用于指定在<strong>编译</strong>过程中使用的注解处理器的路径。这些处理器可以根据源代码的注解生成额外的代码或者执行各种任务。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;maven-compiler-plugin.verison&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>$&#123;java.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>$&#123;java.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>$&#123;project.build.sourceEncoding&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>annotationProcessorPaths</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.therapi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>therapi-runtime-javadoc-scribe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;therapi-javadoc.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;lombok.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring-boot.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.linpeilie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mapstruct-plus-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;mapstruct-plus.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok-mapstruct-binding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;mapstruct-plus.lombok.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>annotationProcessorPaths</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 用于指示编译器保留方法的参数名称，这在使用反射或生成文档时非常有用 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compilerArgs</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span><span class="token punctuation">></span></span>-parameters<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arg</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>compilerArgs</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 单元测试使用 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;maven-surefire-plugin.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 根据打包环境执行对应的@Tag测试方法 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groups</span><span class="token punctuation">></span></span>$&#123;profiles.active&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groups</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 排除标签 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludedGroups</span><span class="token punctuation">></span></span>exclude<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludedGroups</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 统一版本号管理 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.codehaus.mojo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flatten-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;flatten-maven-plugin.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- true：在执行flatten时会更新pom文件 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatePomFile</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updatePomFile</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 操作模式 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>flattenMode</span><span class="token punctuation">></span></span>resolveCiFriendliesOnly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>flattenMode</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>             <span class="token comment">&lt;!-- 在某个生命周期执行一些目标 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>flatten<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                     <span class="token comment">&lt;!-- 生命周期 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>process-resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                         <span class="token comment">&lt;!-- 执行目标 --></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>flatten<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>flatten.clean<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>clean<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>clean<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="resources"><a href="#resources" class="headerlink" title="resources"></a>resources</h4><p>在Maven中，“过滤”通常指的是再复制资源文件到输出目录（如编译后的目录）之前，将文件中的特定标记和占位符替换为预定的值。例如banner.txt文件下<code>Application Version: $&#123;revision&#125;</code>，<code>$&#123;revision&#125;</code>会被替换。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;resources&gt;    &lt;resource&gt;        &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;        &lt;!-- 关闭过滤 --&gt;        &lt;filtering&gt;false&lt;&#x2F;filtering&gt;    &lt;&#x2F;resource&gt;    &lt;resource&gt;        &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;        &lt;!-- 引入所有 匹配文件进行过滤 --&gt;        &lt;includes&gt;            &lt;include&gt;application*&lt;&#x2F;include&gt;            &lt;include&gt;bootstrap*&lt;&#x2F;include&gt;            &lt;include&gt;banner*&lt;&#x2F;include&gt;        &lt;&#x2F;includes&gt;        &lt;!-- 启用过滤 即该资源中的变量将会被过滤器中的值替换 --&gt;        &lt;filtering&gt;true&lt;&#x2F;filtering&gt;    &lt;&#x2F;resource&gt;&lt;&#x2F;resources&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>当我把<code>&lt;include&gt;banner*&lt;/include&gt;</code>注释后，运行程序，控制台打印如下：</p><p><img src="/img/ruoyi-vue-plus%E4%B9%8Bpom%E6%96%87%E4%BB%B6/4.png"></p><h4 id="repositories和pluginRepositories"><a href="#repositories和pluginRepositories" class="headerlink" title="repositories和pluginRepositories"></a>repositories和pluginRepositories</h4><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 唯一标识 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 可读名称 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>huawei nexus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- url地址 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://mirrors.huaweicloud.com/repository/maven/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 表示允许从该仓库获取发布版（即稳定版）的依赖 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepositories</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>huawei nexus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://mirrors.huaweicloud.com/repository/maven/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 表示不允许从该插件仓库获取快照版（即开发版）的插件 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepositories</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>本文参考了大佬们的文章：</p><p>日志级别：<a href="https://blog.csdn.net/qq_43842093/article/details/120582427">点击这里</a></p><p>packaging：<a href="https://blog.csdn.net/qq_31960623/article/details/123507486">点击这里</a></p>]]></content>
    
    
    <categories>
      
      <category>RuoYi-Vue-Plus</category>
      
      <category>pom文件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RuoYi-Vue-Plus</tag>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PowerJob之邮件报警配置</title>
    <link href="/2024/04/18/PowerJob%E4%B9%8B%E9%82%AE%E4%BB%B6%E6%8A%A5%E8%AD%A6%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/04/18/PowerJob%E4%B9%8B%E9%82%AE%E4%BB%B6%E6%8A%A5%E8%AD%A6%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>文档地址：<a href="https://www.yuque.com/powerjob/guidence/intro">点击这里</a></p><hr><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">spring.mail.host&#x3D;smtp.163.comspring.mail.username&#x3D;becant223@163.com# 这里不是邮箱密码，而是授权码，通过下面方式获取spring.mail.password&#x3D;xxxxxxxxspring.mail.properties.mail.smtp.auth&#x3D;truespring.mail.properties.mail.smtp.starttls.enable&#x3D;truespring.mail.properties.mail.smtp.starttls.required&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>配置文件配置的是 发送邮件的邮箱</p><h4 id="获取授权码"><a href="#获取授权码" class="headerlink" title="获取授权码"></a>获取授权码</h4><p>1.打开163邮箱官网，登录</p><p>2.点击顶部栏设置 —&gt; POP3&#x2F;SMTP&#x2F;IMAP</p><p>3.开启 POP3&#x2F;SMTP服务</p><h4 id="报警用户录入"><a href="#报警用户录入" class="headerlink" title="报警用户录入"></a>报警用户录入</h4><p>图片显示的邮件地址是 接收邮件的地址，(如果录入的是qq邮箱而且接收不到邮件，可以去垃圾箱看一看~~)</p><p><img src="/img/PowerJob%E4%B9%8B%E9%82%AE%E4%BB%B6%E6%8A%A5%E8%AD%A6%E9%85%8D%E7%BD%AE/1.png"></p><h4 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h4><h5 id="1-单机执行"><a href="#1-单机执行" class="headerlink" title="1.单机执行"></a>1.单机执行</h5><p>任务信息：</p><p><img src="/img/PowerJob%E4%B9%8B%E9%82%AE%E4%BB%B6%E6%8A%A5%E8%AD%A6%E9%85%8D%E7%BD%AE/2.png"></p><p>当任务执行失败时，经过一系列的方法，然后会进入processFinishedInstance()方法。</p><p><img src="/img/PowerJob%E4%B9%8B%E9%82%AE%E4%BB%B6%E6%8A%A5%E8%AD%A6%E9%85%8D%E7%BD%AE/3.png"></p><p>alert()方法</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstanceManager</span> <span class="token keyword">implements</span> <span class="token class-name">TransportServiceAware</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 构造注入</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AlarmCenter</span> alarmCenter<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token class-name">Long</span> instanceId<span class="token punctuation">,</span> <span class="token class-name">String</span> alertContent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"alert=--==-=--=-==-=--=-==--==-=--=-==--==-=-=-=-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 根据instanceId获取任务运行日志表</span>        <span class="token class-name">InstanceInfoDO</span> instanceInfo <span class="token operator">=</span> instanceInfoRepository<span class="token punctuation">.</span><span class="token function">findByInstanceId</span><span class="token punctuation">(</span>instanceId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 任务信息表</span>        <span class="token class-name">JobInfoDO</span> jobInfo<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// fetchJobInfoByInstanceId(instanceId):根据 instanceId 获取 JobInfo</span>            jobInfo <span class="token operator">=</span> instanceMetadataService<span class="token punctuation">.</span><span class="token function">fetchJobInfoByInstanceId</span><span class="token punctuation">(</span>instanceId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"[InstanceManager-&#123;&#125;] can't find jobInfo, alarm failed."</span><span class="token punctuation">,</span> instanceId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 获取任务执行失败告警对象</span>        <span class="token class-name">JobInstanceAlarm</span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobInstanceAlarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置信息</span>        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>jobInfo<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>instanceInfo<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// fetchNotifyUserList(jobInfo.getNotifyUserIds()):根据用户ID字符串获取用户信息详细列表</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfoDO</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> <span class="token class-name">SpringUtils</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetchNotifyUserList</span><span class="token punctuation">(</span>jobInfo<span class="token punctuation">.</span><span class="token function">getNotifyUserIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>alertContent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            content<span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span>alertContent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        alarmCenter<span class="token punctuation">.</span><span class="token function">alarmFailed</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token class-name">AlarmUtils</span><span class="token punctuation">.</span><span class="token function">convertUserInfoList2AlarmTargetList</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>AlarmCenter类</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AlarmCenter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> <span class="token constant">POOL</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Alarmable</span><span class="token punctuation">></span></span> <span class="token constant">BEANS</span> <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 用于构造注入，参数为Alarmble的实现类(DingTalkAlarmService,MailAlarmService,WebHookAlarmService)</span>    <span class="token keyword">public</span> <span class="token class-name">AlarmCenter</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Alarmable</span><span class="token punctuation">></span></span> alarmables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> cores <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"AlarmPool-%d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">POOL</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>cores<span class="token punctuation">,</span> cores<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">,</span> <span class="token class-name">Queues</span><span class="token punctuation">.</span><span class="token function">newLinkedBlockingQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        alarmables<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>bean <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token constant">BEANS</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[AlarmCenter] bean(className=&#123;&#125;,obj=&#123;&#125;) register to AlarmCenter successfully!"</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">alarmFailed</span><span class="token punctuation">(</span><span class="token class-name">Alarm</span> alarm<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AlarmTarget</span><span class="token punctuation">></span></span> alarmTargets<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"alarmFailed=--==-=--=-==-=--=-==--==-=--=-==--==-=-=-=-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 录入警告信息时，只录入了邮件，而没有录入WebHook和钉钉</span>        <span class="token comment">// 故不会进入到DingTalkAlarmService.onFailed()和WebHookAlarmService.onFailed()</span>        <span class="token comment">// 只进入MailAlarmService.onFailed()</span>        <span class="token constant">POOL</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token constant">BEANS</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>alarmable <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"alarmable:&#123;&#125;"</span><span class="token punctuation">,</span> alarmable<span class="token punctuation">)</span><span class="token punctuation">;</span>                alarmable<span class="token punctuation">.</span><span class="token function">onFailed</span><span class="token punctuation">(</span>alarm<span class="token punctuation">,</span> alarmTargets<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"[AlarmCenter] alarm failed."</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>MailAlarmService类</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 邮件通知服务 * * @author tjq * @since 2020/4/30 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailAlarmService</span> <span class="token keyword">implements</span> <span class="token class-name">Alarmable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">JavaMailSender</span> javaMailSender<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.mail.username:''&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> from<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailed</span><span class="token punctuation">(</span><span class="token class-name">Alarm</span> alarm<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AlarmTarget</span><span class="token punctuation">></span></span> targetUserList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"onFailed=--==-=--=-==-=--=-==--==-=--=-==--==-=-=-=-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"javaMailSender:&#123;&#125;"</span><span class="token punctuation">,</span> javaMailSender<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>targetUserList<span class="token punctuation">)</span> <span class="token operator">||</span> javaMailSender <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">SimpleMailMessage</span> sm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            sm<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>            sm<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span>targetUserList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">AlarmTarget</span><span class="token operator">::</span><span class="token function">getEmail</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token operator">::</span><span class="token function">nonNull</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>email <span class="token operator">-></span> <span class="token operator">!</span>email<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sm<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>alarm<span class="token punctuation">.</span><span class="token function">fetchTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sm<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>alarm<span class="token punctuation">.</span><span class="token function">fetchContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            javaMailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>sm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"[MailAlarmService] send mail failed, reason is &#123;&#125;"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setJavaMailSender</span><span class="token punctuation">(</span><span class="token class-name">JavaMailSender</span> javaMailSender<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>javaMailSender <span class="token operator">=</span> javaMailSender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>当任务失败后，控制台的输出：</p><p><img src="/img/PowerJob%E4%B9%8B%E9%82%AE%E4%BB%B6%E6%8A%A5%E8%AD%A6%E9%85%8D%E7%BD%AE/4.png"></p><p>往下滑~~~~</p><p><img src="/img/PowerJob%E4%B9%8B%E9%82%AE%E4%BB%B6%E6%8A%A5%E8%AD%A6%E9%85%8D%E7%BD%AE/5.png"></p><p>大致流程就是这样了~</p>]]></content>
    
    
    
    <tags>
      
      <tag>PowerJob</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ruoyi-vue-plus之代码生成（二）</title>
    <link href="/2024/04/15/ruoyi-vue-plus%E4%B9%8B%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2024/04/15/ruoyi-vue-plus%E4%B9%8B%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="本文主要将分析数据库字段以及下载生成的代码"><a href="#本文主要将分析数据库字段以及下载生成的代码" class="headerlink" title="本文主要将分析数据库字段以及下载生成的代码"></a>本文主要将分析数据库字段以及下载生成的代码</h3><p>文档地址：<a href="https://plus-doc.dromara.org/#/ruoyi-vue-plus/home">点击这里</a></p><p>项目地址：<a href="https://gitee.com/dromara/RuoYi-Vue-Plus/tree/4.X/">点击这里</a></p><p>功能介绍：<a href="https://plus-doc.dromara.org/#/ruoyi-vue-plus/framework/basic/code_generate">点击这里</a></p><hr><h4 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h4><p>对于该项目的代码生成，只需在项目数据库中把表创建好，然后将表添加到生成列表即可。如果表添加成功，则会在gen_table中生成一条数据，这条数据对应着表信息；以及在gen_table_column生成一条数据，这条数据对应表的字段信息。</p><h4 id="数据库字段的分析"><a href="#数据库字段的分析" class="headerlink" title="数据库字段的分析"></a>数据库字段的分析</h4><h5 id="1-代码生成业务表"><a href="#1-代码生成业务表" class="headerlink" title="1.代码生成业务表"></a>1.代码生成业务表</h5><figure><div class="code-wrapper"><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop table if exists gen_table;create table gen_table (  table_id          bigint(20)      not null                   comment &#39;编号&#39;,  table_name        varchar(200)    default &#39;&#39;                 comment &#39;表名称&#39;,  table_comment     varchar(500)    default &#39;&#39;                 comment &#39;表描述&#39;,  sub_table_name    varchar(64)     default null               comment &#39;关联子表的表名&#39;,  sub_table_fk_name varchar(64)     default null               comment &#39;子表关联的外键名&#39;,  class_name        varchar(100)    default &#39;&#39;                 comment &#39;实体类名称&#39;,  tpl_category      varchar(200)    default &#39;crud&#39;             comment &#39;使用的模板（crud单表操作 tree树表操作）&#39;,  package_name      varchar(100)                               comment &#39;生成包路径&#39;,  module_name       varchar(30)                                comment &#39;生成模块名&#39;,  business_name     varchar(30)                                comment &#39;生成业务名&#39;,  function_name     varchar(50)                                comment &#39;生成功能名&#39;,  function_author   varchar(50)                                comment &#39;生成功能作者&#39;,  gen_type          char(1)         default &#39;0&#39;                comment &#39;生成代码方式（0zip压缩包 1自定义路径）&#39;,  gen_path          varchar(200)    default &#39;&#x2F;&#39;                comment &#39;生成路径（不填默认项目路径）&#39;,  options           varchar(1000)                              comment &#39;其它生成选项&#39;,  create_by         varchar(64)     default &#39;&#39;                 comment &#39;创建者&#39;,  create_time       datetime                                   comment &#39;创建时间&#39;,  update_by         varchar(64)     default &#39;&#39;                 comment &#39;更新者&#39;,  update_time       datetime                                   comment &#39;更新时间&#39;,  remark            varchar(500)    default null               comment &#39;备注&#39;,  primary key (table_id)) engine&#x3D;innodb comment &#x3D; &#39;代码生成业务表&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="2-代码生成业务表字段"><a href="#2-代码生成业务表字段" class="headerlink" title="2.代码生成业务表字段"></a>2.代码生成业务表字段</h5><figure><div class="code-wrapper"><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop table if exists gen_table_column;create table gen_table_column (  column_id         bigint(20)      not null                   comment &#39;编号&#39;,  table_id          bigint(20)                                 comment &#39;归属表编号&#39;,  column_name       varchar(200)                               comment &#39;列名称&#39;,  column_comment    varchar(500)                               comment &#39;列描述&#39;,  column_type       varchar(100)                               comment &#39;列类型&#39;,  java_type         varchar(500)                               comment &#39;JAVA类型&#39;,  java_field        varchar(200)                               comment &#39;JAVA字段名&#39;,  is_pk             char(1)                                    comment &#39;是否主键（1是）&#39;,  is_increment      char(1)                                    comment &#39;是否自增（1是）&#39;,  is_required       char(1)                                    comment &#39;是否必填（1是）&#39;,  is_insert         char(1)                                    comment &#39;是否为插入字段（1是）&#39;,  is_edit           char(1)                                    comment &#39;是否编辑字段（1是）&#39;,  is_list           char(1)                                    comment &#39;是否列表字段（1是）&#39;,  is_query          char(1)                                    comment &#39;是否查询字段（1是）&#39;,  query_type        varchar(200)    default &#39;EQ&#39;               comment &#39;查询方式（等于、不等于、大于、小于、范围）&#39;,  html_type         varchar(200)                               comment &#39;显示类型（文本框、文本域、下拉框、复选框、单选框、日期控件）&#39;,  dict_type         varchar(200)    default &#39;&#39;                 comment &#39;字典类型&#39;,  sort              int                                        comment &#39;排序&#39;,  create_by         varchar(64)     default &#39;&#39;                 comment &#39;创建者&#39;,  create_time       datetime                                   comment &#39;创建时间&#39;,  update_by         varchar(64)     default &#39;&#39;                 comment &#39;更新者&#39;,  update_time       datetime                                   comment &#39;更新时间&#39;,  primary key (column_id)) engine&#x3D;innodb comment &#x3D; &#39;代码生成业务表字段&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="3-字段解释"><a href="#3-字段解释" class="headerlink" title="3.字段解释"></a>3.字段解释</h5><h6 id="引入包以及导入包"><a href="#引入包以及导入包" class="headerlink" title="引入包以及导入包"></a>引入包以及导入包</h6><p><img src="/img/ruoyi-vue-plus%E4%B9%8B%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%EF%BC%88%E4%BA%8C%EF%BC%89/1.png"></p><p>每生成一个类都必须要有的东西：那就是引入包名和导入包。为什么不添加importList字段呢，我个人认为，创建importList需要额外的一些操作。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 根据列类型获取导入包     *     * @param genTable 业务表对象     * @return 返回需要导入的包列表     */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getImportList</span><span class="token punctuation">(</span><span class="token class-name">GenTable</span> genTable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GenTableColumn</span><span class="token punctuation">></span></span> columns <span class="token operator">=</span> genTable<span class="token punctuation">.</span><span class="token function">getColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">GenTable</span> subGenTable <span class="token operator">=</span> genTable<span class="token punctuation">.</span><span class="token function">getSubTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> importList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>subGenTable<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            importList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"java.util.List"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">GenTableColumn</span> column <span class="token operator">:</span> columns<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>column<span class="token punctuation">.</span><span class="token function">isSuperColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">GenConstants</span><span class="token punctuation">.</span><span class="token constant">TYPE_DATE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>column<span class="token punctuation">.</span><span class="token function">getJavaType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                importList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"java.util.Date"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                importList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"com.fasterxml.jackson.annotation.JsonFormat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>column<span class="token punctuation">.</span><span class="token function">isSuperColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">GenConstants</span><span class="token punctuation">.</span><span class="token constant">TYPE_BIGDECIMAL</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>column<span class="token punctuation">.</span><span class="token function">getJavaType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                importList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"java.math.BigDecimal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> importList<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h6 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h6><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * OSS对象存储对象 sys_oss * * @author ruoyi * @date 2024-04-15 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>OSS对象存储(function_name) 对象  sys_oss(table_name)</p><p>ruoyi(function_author)</p><p>2024-04-15(dateTimeNow(YYYY_MM_DD)，这里不用create_time，因为会显示时分秒)</p><h6 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h6><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">@Data@EqualsAndHashCode(callSuper &#x3D; true)@TableName(&quot;sys_oss&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>sys_oss(table_name)</p><h6 id="类名以及属性"><a href="#类名以及属性" class="headerlink" title="类名以及属性"></a>类名以及属性</h6><h6 id="entity"><a href="#entity" class="headerlink" title="entity"></a>entity</h6><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysOss</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID<span class="token operator">=</span><span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 对象存储主键     */</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"oss_id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> ossId<span class="token punctuation">;</span>    <span class="token comment">/**     * 文件名     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> fileName<span class="token punctuation">;</span>    <span class="token comment">/**     * 原名     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> originalName<span class="token punctuation">;</span>    <span class="token comment">/**     * 文件后缀名     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> fileSuffix<span class="token punctuation">;</span>    <span class="token comment">/**     * URL地址     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token comment">/**     * 服务商     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> service<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="/img/ruoyi-vue-plus%E4%B9%8B%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%EF%BC%88%E4%BA%8C%EF%BC%89/2.png"></p><p>Bo</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">public class SysOssBo extends BaseEntity &#123;    &#x2F;**     * 对象存储主键     *&#x2F;    @NotNull(message &#x3D; &quot;对象存储主键不能为空&quot;, groups &#x3D; &#123; EditGroup.class &#125;)    private Long ossId;    &#x2F;**     * 文件名     *&#x2F;    @NotBlank(message &#x3D; &quot;文件名不能为空&quot;, groups &#x3D; &#123; AddGroup.class, EditGroup.class &#125;)    private String fileName;    &#x2F;**     * 原名     *&#x2F;    @NotBlank(message &#x3D; &quot;原名不能为空&quot;, groups &#x3D; &#123; AddGroup.class, EditGroup.class &#125;)    private String originalName;    &#x2F;**     * 文件后缀名     *&#x2F;    @NotBlank(message &#x3D; &quot;文件后缀名不能为空&quot;, groups &#x3D; &#123; AddGroup.class, EditGroup.class &#125;)    private String fileSuffix;    &#x2F;**     * URL地址     *&#x2F;    @NotBlank(message &#x3D; &quot;URL地址不能为空&quot;, groups &#x3D; &#123; AddGroup.class, EditGroup.class &#125;)    private String url;    &#x2F;**     * 服务商     *&#x2F;    @NotBlank(message &#x3D; &quot;服务商不能为空&quot;, groups &#x3D; &#123; AddGroup.class, EditGroup.class &#125;)    private String service;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p> groups &#x3D; { AddGroup.class, EditGroup.class }，中括号里的内容是变量Group，是根据is_edit,is_insert字段的内容来设置的。</p><h6 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h6><p>看哪些内容是与表或类有关联的，则设置字段。剩余的都是固定的，在vm文件上写死即可。</p><p>其他的Controller、Service、Vo等等都是如此。</p><h4 id="4-下载生成的代码"><a href="#4-下载生成的代码" class="headerlink" title="4.下载生成的代码"></a>4.下载生成的代码</h4><h5 id="控制层方法："><a href="#控制层方法：" class="headerlink" title="控制层方法："></a>控制层方法：</h5><p>可以选择多张表，批量生成代码，生成的文件名为：ruoyi.zip</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 批量生成代码（下载方式）     * @param response 响应体     * @param tables 表名串     */</span>    <span class="token annotation punctuation">@SaCheckPermission</span><span class="token punctuation">(</span><span class="token string">"tool:gen:code"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Log</span><span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">"代码生成"</span><span class="token punctuation">,</span> businessType <span class="token operator">=</span> <span class="token class-name">BusinessType</span><span class="token punctuation">.</span><span class="token constant">GENCODE</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/batchGenCode"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">batchGenCode</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tables<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 将字符串转换为字符串数组</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tableNames <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toStrArray</span><span class="token punctuation">(</span>tables<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> genTableService<span class="token punctuation">.</span><span class="token function">downloadCode</span><span class="token punctuation">(</span>tableNames<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">genCode</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 生成zip文件     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">genCode</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 清除响应缓冲区中存在的任何数据</span>        response<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将CORS标头设置为允许来自任何来源的请求</span>        response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 表示将Content-Disposition暴露给客户端</span>        response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Expose-Headers"</span><span class="token punctuation">,</span> <span class="token string">"Content-Disposition"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将Content-Disposition标头设置为指示响应应被视为附件下载，文件名为ruoyi.zip</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment; filename=\"ruoyi.zip\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将Content-Length标头设置为响应中发送数据的长度</span>        response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Length"</span><span class="token punctuation">,</span> <span class="token string">""</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将Content-Type标头设置为指示发送的内容为application/octet-stream，即二进制文件，并使用UTF-8编码</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/octet-stream; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IoUtil</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="服务层方法"><a href="#服务层方法" class="headerlink" title="服务层方法:"></a>服务层方法:</h5><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 批量生成代码（下载方式）     *     * @param tableNames 表数组     * @return 数据     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">downloadCode</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tableNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ByteArrayOutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 新建zip输出流对象</span>        <span class="token class-name">ZipOutputStream</span> zip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipOutputStream</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 循环每张表</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> tableName <span class="token operator">:</span> tableNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">generatorCode</span><span class="token punctuation">(</span>tableName<span class="token punctuation">,</span> zip<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 关闭流</span>        <span class="token class-name">IoUtil</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>zip<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> outputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>         <span class="token comment">/**     * 生成代码（自定义路径）     * @param zip ZipOutputStream     * @param tableName 表名称     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">generatorCode</span><span class="token punctuation">(</span><span class="token class-name">ZipOutputStream</span> zip<span class="token punctuation">,</span> <span class="token class-name">String</span> tableName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> dataMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查询表信息</span>        <span class="token class-name">GenTable</span> table <span class="token operator">=</span> genTableMapper<span class="token punctuation">.</span><span class="token function">selectGenTableByName</span><span class="token punctuation">(</span>tableName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置表信息</span>        <span class="token function">setGenTable</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 初始化模版引擎</span>        <span class="token class-name">VelocityInitializer</span><span class="token punctuation">.</span><span class="token function">initVelocity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 在上下文中设置模版变量</span>        <span class="token class-name">VelocityContext</span> context <span class="token operator">=</span> <span class="token class-name">VelocityUtils</span><span class="token punctuation">.</span><span class="token function">prepareContext</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取模版信息</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> templateList <span class="token operator">=</span> <span class="token class-name">VelocityUtils</span><span class="token punctuation">.</span><span class="token function">getTemplateList</span><span class="token punctuation">(</span>tableName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> template <span class="token operator">:</span> templateList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 渲染模版</span>            <span class="token class-name">StringWriter</span> sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Template</span> tp1 <span class="token operator">=</span> <span class="token class-name">Velocity</span><span class="token punctuation">.</span><span class="token function">getTemplate</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">UTF8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 用于合并模板（template）与上下文（context）并将结果写入到sw对象中</span>            tp1<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> sw<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//添加到zip</span>                zip<span class="token punctuation">.</span><span class="token function">putNextEntry</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ZipEntry</span><span class="token punctuation">(</span><span class="token class-name">VelocityUtils</span><span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 把sw.toString()的内容写到zip输出流中，被设置编码为UTF-8，false为不关闭流</span>                <span class="token class-name">IoUtil</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>zip<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> sw<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">IoUtil</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>sw<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 刷新</span>                zip<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                zip<span class="token punctuation">.</span><span class="token function">closeEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"渲染模板失败，表名："</span> <span class="token operator">+</span> table<span class="token punctuation">.</span><span class="token function">getTableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">/**     * 设置表信息     * @param table 表     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setGenTable</span><span class="token punctuation">(</span><span class="token class-name">GenTable</span> table<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 设置菜单id列表</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> menuIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 把生成id(雪花算法)添加到列表</span>            menuIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>identifierGenerator<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        table<span class="token punctuation">.</span><span class="token function">setMenuIds</span><span class="token punctuation">(</span>menuIds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置主子表信息</span>        <span class="token function">setSubTable</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置主键信息</span>        <span class="token function">setPKColumn</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>RuoYi-Vue-Plus</category>
      
      <category>代码生成</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RuoYi-Vue-Plus</tag>
      
      <tag>Velocity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ruoyi-vue-plus之代码生成（一）</title>
    <link href="/2024/04/14/ruoyi-vue-plus%E4%B9%8B%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2024/04/14/ruoyi-vue-plus%E4%B9%8B%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="本文主要讲解ruoyi-vue-plus项目-4-X分支-代码生成功能的Velocity模板语言"><a href="#本文主要讲解ruoyi-vue-plus项目-4-X分支-代码生成功能的Velocity模板语言" class="headerlink" title="本文主要讲解ruoyi-vue-plus项目(4.X分支)代码生成功能的Velocity模板语言"></a>本文主要讲解ruoyi-vue-plus项目(4.X分支)代码生成功能的Velocity模板语言</h3><p>文档地址：<a href="https://plus-doc.dromara.org/#/ruoyi-vue-plus/home">点击这里</a></p><p>项目地址：<a href="https://gitee.com/dromara/RuoYi-Vue-Plus/tree/4.X/">点击这里</a></p><p>功能介绍：<a href="https://plus-doc.dromara.org/#/ruoyi-vue-plus/framework/basic/code_generate">点击这里</a></p><hr><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>以下代码与源代码不一样，该项目不使用主子表，为了方便，故删除关于主子表的代码。</p><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><h5 id="1-在java代码中设置模版变量信息"><a href="#1-在java代码中设置模版变量信息" class="headerlink" title="1.在java代码中设置模版变量信息"></a>1.在java代码中设置模版变量信息</h5><h5 id="2-设置模板信息"><a href="#2-设置模板信息" class="headerlink" title="2.设置模板信息"></a>2.设置模板信息</h5><p>源代码地址：<a href="https://gitee.com/dromara/RuoYi-Vue-Plus/blob/4.X/ruoyi-generator/src/main/java/com/ruoyi/generator/util/VelocityUtils.java">点击这里</a></p><h4 id="Velocity模板语言"><a href="#Velocity模板语言" class="headerlink" title="Velocity模板语言"></a>Velocity模板语言</h4><h5 id="bo-java-vm"><a href="#bo-java-vm" class="headerlink" title="bo.java.vm"></a>bo.java.vm</h5><p>bo的简单介绍：前端传给后端的数据。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">package $&#123;packageName&#125;.domain.bo;import com.ruoyi.common.core.validate.AddGroup;import com.ruoyi.common.core.validate.EditGroup;import lombok.Data;import lombok.EqualsAndHashCode;import javax.validation.constraints.*;import java.util.Date;##遍历importList#foreach ($import in $importList)import $&#123;import&#125;;#end## 如果是单表操作#if($table.crud)import com.ruoyi.common.core.domain.BaseEntity;## 如果是树表操作#elseif($table.tree)import com.ruoyi.common.core.domain.TreeEntity;#end## 注释文档&#x2F;** * $&#123;functionName&#125;业务对象 $&#123;tableName&#125; * * @author $&#123;author&#125; * @date $&#123;datetime&#125; *&#x2F; ## 设置Entity变量#if($table.crud)#set($Entity&#x3D;&quot;BaseEntity&quot;)#elseif($table.tree)#set($Entity&#x3D;&quot;TreeEntity&lt;$&#123;ClassName&#125;Bo&gt;&quot;)#end@Data@EqualsAndHashCode(callSuper &#x3D; true)public class $&#123;ClassName&#125;Bo extends $&#123;Entity&#125; &#123;## 遍历Columns#foreach ($column in $columns)## 如果不是父类字段(因为继承了父类，所以不用额外声明)以及是否为查询字段或插入字段或修改字段#if(!$table.isSuperColumn($column.javaField) &amp;&amp; ($column.query || $column.insert || $column.edit))    &#x2F;**     * $column.columnComment     *&#x2F;## 设置校验组变量#if($column.insert &amp;&amp; $column.edit)#set($Group&#x3D;&quot;AddGroup.class, EditGroup.class&quot;)#elseif($column.insert)#set($Group&#x3D;&quot;AddGroup.class&quot;)#elseif($column.edit)#set($Group&#x3D;&quot;EditGroup.class&quot;)#end## 判断字段是否为必填#if($column.required)## 添加校验注解：由于是bo对象，所以要对变量进行校验#if($column.javaType &#x3D;&#x3D; &#39;String&#39;)    @NotBlank(message &#x3D; &quot;$column.columnComment不能为空&quot;, groups &#x3D; &#123; $Group &#125;)#else    @NotNull(message &#x3D; &quot;$column.columnComment不能为空&quot;, groups &#x3D; &#123; $Group &#125;)#end#end    private $column.javaType $column.javaField;    #end#end&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="vo-java-vm"><a href="#vo-java-vm" class="headerlink" title="vo.java.vm"></a>vo.java.vm</h5><p>vo的简单介绍：视图层对象，后端传递给前端的数据。</p><p>数据的导出：通过EasyExcel工具将数据导出到excel表格</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">package $&#123;packageName&#125;.domain.vo;#foreach ($import in $importList)import $&#123;import&#125;;#endimport com.alibaba.excel.annotation.ExcelIgnoreUnannotated;import com.alibaba.excel.annotation.ExcelProperty;import com.ruoyi.common.annotation.ExcelDictFormat;import com.ruoyi.common.convert.ExcelDictConvert;import lombok.Data;import java.util.Date;import java.io.Serializable;&#x2F;** * $&#123;functionName&#125;视图对象 $&#123;tableName&#125; * * @author $&#123;author&#125; * @date $&#123;datetime&#125; *&#x2F;@Data@ExcelIgnoreUnannotatedpublic class $&#123;ClassName&#125;Vo implements Serializable &#123;    private static final long serialVersionUID &#x3D; 1L;#foreach ($column in $columns)## 判断是否为列表对象#if($column.list)    &#x2F;**     * $column.columnComment     *&#x2F;## column.columnComment的格式为：纯文字 ; 文字(1含义 2含义) ## 例如：公告标题 ; 公告类型（1通知 2公告）## 对于有括号的字段描述，数据库存储的是数字，当导出数据是，需要把数字转换数字对应的文字#set($parentheseIndex&#x3D;$column.columnComment.indexOf(&quot;（&quot;))## 如果有括号#if($parentheseIndex !&#x3D; -1)#set($comment&#x3D;$column.columnComment.substring(0, $parentheseIndex))## 否则#else#set($comment&#x3D;$column.columnComment)#end## 是否是根据字典类型转换#if($&#123;column.dictType&#125; &amp;&amp; $&#123;column.dictType&#125; !&#x3D; &#39;&#39;)    @ExcelProperty(value &#x3D; &quot;$&#123;comment&#125;&quot;, converter &#x3D; ExcelDictConvert.class)    @ExcelDictFormat(dictType &#x3D; &quot;$&#123;column.dictType&#125;&quot;)## 是否是根据自定义表达式转换#elseif($parentheseIndex !&#x3D; -1)    @ExcelProperty(value &#x3D; &quot;$&#123;comment&#125;&quot;, converter &#x3D; ExcelDictConvert.class)    @ExcelDictFormat(readConverterExp &#x3D; &quot;$column.readConverterExp()&quot;)## 不需要转换#else    @ExcelProperty(value &#x3D; &quot;$&#123;comment&#125;&quot;)#end    private $column.javaType $column.javaField;    #end#end&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="domain-java-vm"><a href="#domain-java-vm" class="headerlink" title="domain.java.vm"></a>domain.java.vm</h5><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">package $&#123;packageName&#125;.domain;import com.baomidou.mybatisplus.annotation.*;import lombok.Data;import lombok.EqualsAndHashCode;import java.io.Serializable;import java.util.Date;import java.math.BigDecimal;#foreach ($import in $importList)import $&#123;import&#125;;#end#if($table.crud)import com.ruoyi.common.core.domain.BaseEntity;#elseif($table.tree)import com.ruoyi.common.core.domain.TreeEntity;#end&#x2F;** * $&#123;functionName&#125;对象 $&#123;tableName&#125; * * @author $&#123;author&#125; * @date $&#123;datetime&#125; *&#x2F;#if($table.crud)    #set($Entity&#x3D;&quot;BaseEntity&quot;)#elseif($table.tree)    #set($Entity&#x3D;&quot;TreeEntity&lt;$&#123;ClassName&#125;&gt;&quot;)#end@Data@EqualsAndHashCode(callSuper &#x3D; true)@TableName(&quot;$&#123;tableName&#125;&quot;)public class $&#123;ClassName&#125; extends $&#123;Entity&#125; &#123;    private static final long serialVersionUID&#x3D;1L;#foreach ($column in $columns)#if(!$table.isSuperColumn($column.javaField))    &#x2F;**     * $column.columnComment     *&#x2F;## 如果是逻辑删除#if($column.javaField&#x3D;&#x3D;&#39;delFlag&#39;)    @TableLogic#end## 如果是版本信息#if($column.javaField&#x3D;&#x3D;&#39;version&#39;)    @Version#end## 如果是主键#if($column.pk)    @TableId(value &#x3D; &quot;$column.columnName&quot;)#end    private $column.javaType $column.javaField;    #end#end&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="controller-java-vm"><a href="#controller-java-vm" class="headerlink" title="controller.java.vm"></a>controller.java.vm</h5><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">package $&#123;packageName&#125;.controller;import java.util.List;import java.util.Arrays;import java.util.concurrent.TimeUnit;import lombok.RequiredArgsConstructor;import javax.servlet.http.HttpServletResponse;import javax.validation.constraints.*;import cn.dev33.satoken.annotation.SaCheckPermission;import org.springframework.web.bind.annotation.*;import org.springframework.validation.annotation.Validated;import com.ruoyi.common.annotation.RepeatSubmit;import com.ruoyi.common.annotation.Log;import com.ruoyi.common.core.controller.BaseController;import com.ruoyi.common.core.domain.PageQuery;import com.ruoyi.common.core.domain.R;import com.ruoyi.common.core.validate.AddGroup;import com.ruoyi.common.core.validate.EditGroup;import com.ruoyi.common.core.validate.QueryGroup;import com.ruoyi.common.enums.BusinessType;import com.ruoyi.common.utils.poi.ExcelUtil;import $&#123;packageName&#125;.domain.vo.$&#123;ClassName&#125;Vo;import $&#123;packageName&#125;.domain.bo.$&#123;ClassName&#125;Bo;import $&#123;packageName&#125;.service.I$&#123;ClassName&#125;Service;#if($table.crud)import com.ruoyi.common.core.page.TableDataInfo;#elseif($table.tree)#end&#x2F;** * $&#123;functionName&#125; * * @author $&#123;author&#125; * @date $&#123;datetime&#125; *&#x2F;@Validated@RequiredArgsConstructor@RestController@RequestMapping(&quot;&#x2F;$&#123;moduleName&#125;&#x2F;$&#123;businessName&#125;&quot;)public class $&#123;ClassName&#125;Controller extends BaseController &#123;    private final I$&#123;ClassName&#125;Service i$&#123;ClassName&#125;Service;    &#x2F;**     * 分页查询$&#123;functionName&#125;列表     *&#x2F;    @SaCheckPermission(&quot;$&#123;permissionPrefix&#125;:list&quot;)    @GetMapping(&quot;&#x2F;list&quot;)#if($table.crud)    public TableDataInfo&lt;$&#123;ClassName&#125;Vo&gt; list($&#123;ClassName&#125;Bo bo, PageQuery pageQuery) &#123;        return i$&#123;ClassName&#125;Service.queryPageList(bo, pageQuery);    &#125;#elseif($table.tree)    public R&lt;List&lt;$&#123;ClassName&#125;Vo&gt;&gt; list($&#123;ClassName&#125;Bo bo) &#123;        List&lt;$&#123;ClassName&#125;Vo&gt; list &#x3D; i$&#123;ClassName&#125;Service.queryList(bo);        return R.ok(list);    &#125;#end    &#x2F;**     * 导出$&#123;functionName&#125;列表     *&#x2F;    @SaCheckPermission(&quot;$&#123;permissionPrefix&#125;:export&quot;)    @Log(title &#x3D; &quot;$&#123;functionName&#125;&quot;, businessType &#x3D; BusinessType.EXPORT)    @PostMapping(&quot;&#x2F;export&quot;)    public void export($&#123;ClassName&#125;Bo bo, HttpServletResponse response) &#123;        List&lt;$&#123;ClassName&#125;Vo&gt; list &#x3D; i$&#123;ClassName&#125;Service.queryList(bo);        ## 导出excel        ExcelUtil.exportExcel(list, &quot;$&#123;functionName&#125;&quot;, $&#123;ClassName&#125;Vo.class, response);    &#125;    &#x2F;**     * 获取$&#123;functionName&#125;详细信息     *     * @param $&#123;pkColumn.javaField&#125; 主键     *&#x2F;    @SaCheckPermission(&quot;$&#123;permissionPrefix&#125;:query&quot;)    @GetMapping(&quot;&#x2F;&#123;$&#123;pkColumn.javaField&#125;&#125;&quot;)    public R&lt;$&#123;ClassName&#125;Vo&gt; getInfo(@NotNull(message &#x3D; &quot;主键不能为空&quot;)                                     @PathVariable $&#123;pkColumn.javaType&#125; $&#123;pkColumn.javaField&#125;) &#123;        return R.ok(i$&#123;ClassName&#125;Service.queryById($&#123;pkColumn.javaField&#125;));    &#125;    &#x2F;**     * 新增$&#123;functionName&#125;     *&#x2F;    @SaCheckPermission(&quot;$&#123;permissionPrefix&#125;:add&quot;)    @Log(title &#x3D; &quot;$&#123;functionName&#125;&quot;, businessType &#x3D; BusinessType.INSERT)    @RepeatSubmit()    @PostMapping()    public R&lt;Void&gt; add(@Validated(AddGroup.class) @RequestBody $&#123;ClassName&#125;Bo bo) &#123;        return toAjax(i$&#123;ClassName&#125;Service.insertByBo(bo));    &#125;    &#x2F;**     * 修改$&#123;functionName&#125;     *&#x2F;    @SaCheckPermission(&quot;$&#123;permissionPrefix&#125;:edit&quot;)    @Log(title &#x3D; &quot;$&#123;functionName&#125;&quot;, businessType &#x3D; BusinessType.UPDATE)    @RepeatSubmit()    @PutMapping()    public R&lt;Void&gt; edit(@Validated(EditGroup.class) @RequestBody $&#123;ClassName&#125;Bo bo) &#123;        return toAjax(i$&#123;ClassName&#125;Service.updateByBo(bo));    &#125;    &#x2F;**     * 删除$&#123;functionName&#125;     *     * @param $&#123;pkColumn.javaField&#125;s 主键串     *&#x2F;    @SaCheckPermission(&quot;$&#123;permissionPrefix&#125;:remove&quot;)    @Log(title &#x3D; &quot;$&#123;functionName&#125;&quot;, businessType &#x3D; BusinessType.DELETE)    @DeleteMapping(&quot;&#x2F;&#123;$&#123;pkColumn.javaField&#125;s&#125;&quot;)    public R&lt;Void&gt; remove(@NotEmpty(message &#x3D; &quot;主键不能为空&quot;)                          @PathVariable $&#123;pkColumn.javaType&#125;[] $&#123;pkColumn.javaField&#125;s) &#123;        return toAjax(i$&#123;ClassName&#125;Service.deleteWithValidByIds(Arrays.asList($&#123;pkColumn.javaField&#125;s), true));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="service-java-vm"><a href="#service-java-vm" class="headerlink" title="service.java.vm"></a>service.java.vm</h5><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">package $&#123;packageName&#125;.service;import $&#123;packageName&#125;.domain.$&#123;ClassName&#125;;import $&#123;packageName&#125;.domain.vo.$&#123;ClassName&#125;Vo;import $&#123;packageName&#125;.domain.bo.$&#123;ClassName&#125;Bo;#if($table.crud || $table.sub)import com.ruoyi.common.core.page.TableDataInfo;import com.ruoyi.common.core.domain.PageQuery;#endimport java.util.Collection;import java.util.List;&#x2F;** * $&#123;functionName&#125;Service接口 * * @author $&#123;author&#125; * @date $&#123;datetime&#125; *&#x2F;public interface I$&#123;ClassName&#125;Service &#123;    &#x2F;**     * 查询$&#123;functionName&#125;     *&#x2F;    $&#123;ClassName&#125;Vo queryById($&#123;pkColumn.javaType&#125; $&#123;pkColumn.javaField&#125;);#if($table.crud)    &#x2F;**     * 查询$&#123;functionName&#125;列表     *&#x2F;    TableDataInfo&lt;$&#123;ClassName&#125;Vo&gt; queryPageList($&#123;ClassName&#125;Bo bo, PageQuery pageQuery);#end    &#x2F;**     * 查询$&#123;functionName&#125;列表     *&#x2F;    List&lt;$&#123;ClassName&#125;Vo&gt; queryList($&#123;ClassName&#125;Bo bo);    &#x2F;**     * 新增$&#123;functionName&#125;     *&#x2F;    Boolean insertByBo($&#123;ClassName&#125;Bo bo);    &#x2F;**     * 修改$&#123;functionName&#125;     *&#x2F;    Boolean updateByBo($&#123;ClassName&#125;Bo bo);    &#x2F;**     * 校验并批量删除$&#123;functionName&#125;信息     *&#x2F;    Boolean deleteWithValidByIds(Collection&lt;$&#123;pkColumn.javaType&#125;&gt; ids, Boolean isValid);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="serviceImpl-java-vm"><a href="#serviceImpl-java-vm" class="headerlink" title="serviceImpl.java.vm"></a>serviceImpl.java.vm</h5><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">package $&#123;packageName&#125;.service.impl;import cn.hutool.core.bean.BeanUtil;import com.ruoyi.common.utils.StringUtils;#if($table.crud)import com.ruoyi.common.core.page.TableDataInfo;import com.ruoyi.common.core.domain.PageQuery;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;#endimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import lombok.RequiredArgsConstructor;import org.springframework.stereotype.Service;import $&#123;packageName&#125;.domain.bo.$&#123;ClassName&#125;Bo;import $&#123;packageName&#125;.domain.vo.$&#123;ClassName&#125;Vo;import $&#123;packageName&#125;.domain.$&#123;ClassName&#125;;import $&#123;packageName&#125;.mapper.$&#123;ClassName&#125;Mapper;import $&#123;packageName&#125;.service.I$&#123;ClassName&#125;Service;import java.util.List;import java.util.Map;import java.util.Collection;&#x2F;** * $&#123;functionName&#125;Service业务层处理 * * @author $&#123;author&#125; * @date $&#123;datetime&#125; *&#x2F;@RequiredArgsConstructor@Servicepublic class $&#123;ClassName&#125;ServiceImpl implements I$&#123;ClassName&#125;Service &#123;    private final $&#123;ClassName&#125;Mapper baseMapper;    &#x2F;**     * 查询$&#123;functionName&#125;     *&#x2F;    @Override    public $&#123;ClassName&#125;Vo queryById($&#123;pkColumn.javaType&#125; $&#123;pkColumn.javaField&#125;)&#123;        return baseMapper.selectVoById($&#123;pkColumn.javaField&#125;);    &#125;#if($table.crud)    &#x2F;**     * 查询$&#123;functionName&#125;列表     *&#x2F;    @Override    public TableDataInfo&lt;$&#123;ClassName&#125;Vo&gt; queryPageList($&#123;ClassName&#125;Bo bo, PageQuery pageQuery) &#123;        LambdaQueryWrapper&lt;$&#123;ClassName&#125;&gt; lqw &#x3D; buildQueryWrapper(bo);        Page&lt;$&#123;ClassName&#125;Vo&gt; result &#x3D; baseMapper.selectVoPage(pageQuery.build(), lqw);        return TableDataInfo.build(result);    &#125;#end    &#x2F;**     * 查询$&#123;functionName&#125;列表     *&#x2F;    @Override    public List&lt;$&#123;ClassName&#125;Vo&gt; queryList($&#123;ClassName&#125;Bo bo) &#123;        LambdaQueryWrapper&lt;$&#123;ClassName&#125;&gt; lqw &#x3D; buildQueryWrapper(bo);        return baseMapper.selectVoList(lqw);    &#125;    private LambdaQueryWrapper&lt;$&#123;ClassName&#125;&gt; buildQueryWrapper($&#123;ClassName&#125;Bo bo) &#123;        Map&lt;String, Object&gt; params &#x3D; bo.getParams();        LambdaQueryWrapper&lt;$&#123;ClassName&#125;&gt; lqw &#x3D; Wrappers.lambdaQuery();#foreach($column in $columns)#if($column.query)#set($queryType&#x3D;$column.queryType)#set($javaField&#x3D;$column.javaField)#set($javaType&#x3D;$column.javaType)#set($columnName&#x3D;$column.columnName)#set($AttrName&#x3D;$column.javaField.substring(0,1).toUpperCase() + $&#123;column.javaField.substring(1)&#125;)#set($mpMethod&#x3D;$column.queryType.toLowerCase())#if($queryType !&#x3D; &#39;BETWEEN&#39;)#if($javaType &#x3D;&#x3D; &#39;String&#39;)#set($condition&#x3D;&#39;StringUtils.isNotBlank(bo.get&#39;+$AttrName+&#39;())&#39;)#else#set($condition&#x3D;&#39;bo.get&#39;+$AttrName+&#39;() !&#x3D; null&#39;)#end        lqw.$mpMethod($condition, $&#123;ClassName&#125;::get$AttrName, bo.get$AttrName());#else        lqw.between(params.get(&quot;begin$AttrName&quot;) !&#x3D; null &amp;&amp; params.get(&quot;end$AttrName&quot;) !&#x3D; null,            $&#123;ClassName&#125;::get$AttrName ,params.get(&quot;begin$AttrName&quot;), params.get(&quot;end$AttrName&quot;));#end#end#end        return lqw;    &#125;    &#x2F;**     * 新增$&#123;functionName&#125;     *&#x2F;    @Override    public Boolean insertByBo($&#123;ClassName&#125;Bo bo) &#123;        $&#123;ClassName&#125; add &#x3D; BeanUtil.toBean(bo, $&#123;ClassName&#125;.class);        validEntityBeforeSave(add);        boolean flag &#x3D; baseMapper.insert(add) &gt; 0;#set($pk&#x3D;$pkColumn.javaField.substring(0,1).toUpperCase() + $&#123;pkColumn.javaField.substring(1)&#125;)        if (flag) &#123;            bo.set$pk(add.get$pk());        &#125;        return flag;    &#125;    &#x2F;**     * 修改$&#123;functionName&#125;     *&#x2F;    @Override    public Boolean updateByBo($&#123;ClassName&#125;Bo bo) &#123;        $&#123;ClassName&#125; update &#x3D; BeanUtil.toBean(bo, $&#123;ClassName&#125;.class);        validEntityBeforeSave(update);        return baseMapper.updateById(update) &gt; 0;    &#125;    &#x2F;**     * 保存前的数据校验     *&#x2F;    private void validEntityBeforeSave($&#123;ClassName&#125; entity)&#123;        &#x2F;&#x2F;TODO 做一些数据校验,如唯一约束    &#125;    &#x2F;**     * 批量删除$&#123;functionName&#125;     *&#x2F;    @Override    public Boolean deleteWithValidByIds(Collection&lt;$&#123;pkColumn.javaType&#125;&gt; ids, Boolean isValid) &#123;        if(isValid)&#123;            &#x2F;&#x2F;TODO 做一些业务上的校验,判断是否需要校验        &#125;        return baseMapper.deleteBatchIds(ids) &gt; 0;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="mapper-java-vm"><a href="#mapper-java-vm" class="headerlink" title="mapper.java.vm"></a>mapper.java.vm</h5><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">package $&#123;packageName&#125;.mapper;import $&#123;packageName&#125;.domain.$&#123;ClassName&#125;;import $&#123;packageName&#125;.domain.vo.$&#123;ClassName&#125;Vo;import com.ruoyi.common.core.mapper.BaseMapperPlus;&#x2F;** * $&#123;functionName&#125;Mapper接口 * * @author $&#123;author&#125; * @date $&#123;datetime&#125; *&#x2F;public interface $&#123;ClassName&#125;Mapper extends BaseMapperPlus&lt;$&#123;ClassName&#125;Mapper, $&#123;ClassName&#125;, $&#123;ClassName&#125;Vo&gt; &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="sql-vm"><a href="#sql-vm" class="headerlink" title="sql.vm"></a>sql.vm</h5><p>由于项目设置了菜单功能，所以生成新的业务时需要把数据设置到菜单表上。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">-- 菜单 SQLinsert into sys_menu (menu_id, menu_name, parent_id, order_num, path, component, is_frame, is_cache, menu_type, visible, status, perms, icon, create_by, create_time, update_by, update_time, remark)values($&#123;table.menuIds[0]&#125;, &#39;$&#123;functionName&#125;&#39;, &#39;$&#123;parentMenuId&#125;&#39;, &#39;1&#39;, &#39;$&#123;businessName&#125;&#39;, &#39;$&#123;moduleName&#125;&#x2F;$&#123;businessName&#125;&#x2F;index&#39;, 1, 0, &#39;C&#39;, &#39;0&#39;, &#39;0&#39;, &#39;$&#123;permissionPrefix&#125;:list&#39;, &#39;#&#39;, &#39;admin&#39;, sysdate(), &#39;&#39;, null, &#39;$&#123;functionName&#125;菜单&#39;);-- 按钮 SQLinsert into sys_menu (menu_id, menu_name, parent_id, order_num, path, component, is_frame, is_cache, menu_type, visible, status, perms, icon, create_by, create_time, update_by, update_time, remark)values($&#123;table.menuIds[1]&#125;, &#39;$&#123;functionName&#125;查询&#39;, $&#123;table.menuIds[0]&#125;, &#39;1&#39;,  &#39;#&#39;, &#39;&#39;, 1, 0, &#39;F&#39;, &#39;0&#39;, &#39;0&#39;, &#39;$&#123;permissionPrefix&#125;:query&#39;,        &#39;#&#39;, &#39;admin&#39;, sysdate(), &#39;&#39;, null, &#39;&#39;);insert into sys_menu (menu_id, menu_name, parent_id, order_num, path, component, is_frame, is_cache, menu_type, visible, status, perms, icon, create_by, create_time, update_by, update_time, remark)values($&#123;table.menuIds[2]&#125;, &#39;$&#123;functionName&#125;新增&#39;, $&#123;table.menuIds[0]&#125;, &#39;2&#39;,  &#39;#&#39;, &#39;&#39;, 1, 0, &#39;F&#39;, &#39;0&#39;, &#39;0&#39;, &#39;$&#123;permissionPrefix&#125;:add&#39;,          &#39;#&#39;, &#39;admin&#39;, sysdate(), &#39;&#39;, null, &#39;&#39;);insert into sys_menu (menu_id, menu_name, parent_id, order_num, path, component, is_frame, is_cache, menu_type, visible, status, perms, icon, create_by, create_time, update_by, update_time, remark)values($&#123;table.menuIds[3]&#125;, &#39;$&#123;functionName&#125;修改&#39;, $&#123;table.menuIds[0]&#125;, &#39;3&#39;,  &#39;#&#39;, &#39;&#39;, 1, 0, &#39;F&#39;, &#39;0&#39;, &#39;0&#39;, &#39;$&#123;permissionPrefix&#125;:edit&#39;,         &#39;#&#39;, &#39;admin&#39;, sysdate(), &#39;&#39;, null, &#39;&#39;);insert into sys_menu (menu_id, menu_name, parent_id, order_num, path, component, is_frame, is_cache, menu_type, visible, status, perms, icon, create_by, create_time, update_by, update_time, remark)values($&#123;table.menuIds[4]&#125;, &#39;$&#123;functionName&#125;删除&#39;, $&#123;table.menuIds[0]&#125;, &#39;4&#39;,  &#39;#&#39;, &#39;&#39;, 1, 0, &#39;F&#39;, &#39;0&#39;, &#39;0&#39;, &#39;$&#123;permissionPrefix&#125;:remove&#39;,       &#39;#&#39;, &#39;admin&#39;, sysdate(), &#39;&#39;, null, &#39;&#39;);insert into sys_menu (menu_id, menu_name, parent_id, order_num, path, component, is_frame, is_cache, menu_type, visible, status, perms, icon, create_by, create_time, update_by, update_time, remark)values($&#123;table.menuIds[5]&#125;, &#39;$&#123;functionName&#125;导出&#39;, $&#123;table.menuIds[0]&#125;, &#39;5&#39;,  &#39;#&#39;, &#39;&#39;, 1, 0, &#39;F&#39;, &#39;0&#39;, &#39;0&#39;, &#39;$&#123;permissionPrefix&#125;:export&#39;,       &#39;#&#39;, &#39;admin&#39;, sysdate(), &#39;&#39;, null, &#39;&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="mapper-xml-vm"><a href="#mapper-xml-vm" class="headerlink" title="mapper.xml.vm"></a>mapper.xml.vm</h5><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapperPUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;&quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace&#x3D;&quot;$&#123;packageName&#125;.mapper.$&#123;ClassName&#125;Mapper&quot;&gt;    &lt;resultMap type&#x3D;&quot;$&#123;packageName&#125;.domain.$&#123;ClassName&#125;&quot; id&#x3D;&quot;$&#123;ClassName&#125;Result&quot;&gt;#foreach ($column in $columns)        &lt;result property&#x3D;&quot;$&#123;column.javaField&#125;&quot; column&#x3D;&quot;$&#123;column.columnName&#125;&quot;&#x2F;&gt;#end    &lt;&#x2F;resultMap&gt;&lt;&#x2F;mapper&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以下是前端代码,(代码与源码一样)</p><h5 id="index-vue3-vm"><a href="#index-vue3-vm" class="headerlink" title="index.vue3.vm"></a>index.vue3.vm</h5><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div class&#x3D;&quot;app-container&quot;&gt;    &lt;el-form :model&#x3D;&quot;queryParams&quot; ref&#x3D;&quot;queryRef&quot; :inline&#x3D;&quot;true&quot; v-show&#x3D;&quot;showSearch&quot; label-width&#x3D;&quot;68px&quot;&gt;#foreach($column in $columns)#if($column.query)#set($dictType&#x3D;$column.dictType)#set($AttrName&#x3D;$column.javaField.substring(0,1).toUpperCase() + $&#123;column.javaField.substring(1)&#125;)#set($parentheseIndex&#x3D;$column.columnComment.indexOf(&quot;（&quot;))#if($parentheseIndex !&#x3D; -1)#set($comment&#x3D;$column.columnComment.substring(0, $parentheseIndex))#else#set($comment&#x3D;$column.columnComment)#end#if($column.htmlType &#x3D;&#x3D; &quot;input&quot; || $column.htmlType &#x3D;&#x3D; &quot;textarea&quot;)      &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;column.javaField&#125;&quot;&gt;        &lt;el-input          v-model&#x3D;&quot;queryParams.$&#123;column.javaField&#125;&quot;          placeholder&#x3D;&quot;请输入$&#123;comment&#125;&quot;          clearable          @keyup.enter&#x3D;&quot;handleQuery&quot;        &#x2F;&gt;      &lt;&#x2F;el-form-item&gt;#elseif(($column.htmlType &#x3D;&#x3D; &quot;select&quot; || $column.htmlType &#x3D;&#x3D; &quot;radio&quot;) &amp;&amp; &quot;&quot; !&#x3D; $dictType)      &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;column.javaField&#125;&quot;&gt;        &lt;el-select v-model&#x3D;&quot;queryParams.$&#123;column.javaField&#125;&quot; placeholder&#x3D;&quot;请选择$&#123;comment&#125;&quot; clearable&gt;          &lt;el-option            v-for&#x3D;&quot;dict in $&#123;dictType&#125;&quot;            :key&#x3D;&quot;dict.value&quot;            :label&#x3D;&quot;dict.label&quot;            :value&#x3D;&quot;dict.value&quot;          &#x2F;&gt;        &lt;&#x2F;el-select&gt;      &lt;&#x2F;el-form-item&gt;#elseif(($column.htmlType &#x3D;&#x3D; &quot;select&quot; || $column.htmlType &#x3D;&#x3D; &quot;radio&quot;) &amp;&amp; $dictType)      &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;column.javaField&#125;&quot;&gt;        &lt;el-select v-model&#x3D;&quot;queryParams.$&#123;column.javaField&#125;&quot; placeholder&#x3D;&quot;请选择$&#123;comment&#125;&quot; clearable&gt;          &lt;el-option label&#x3D;&quot;请选择字典生成&quot; value&#x3D;&quot;&quot; &#x2F;&gt;        &lt;&#x2F;el-select&gt;      &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType !&#x3D; &quot;BETWEEN&quot;)      &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;column.javaField&#125;&quot;&gt;        &lt;el-date-picker clearable          v-model&#x3D;&quot;queryParams.$&#123;column.javaField&#125;&quot;          type&#x3D;&quot;date&quot;          value-format&#x3D;&quot;YYYY-MM-DD&quot;          placeholder&#x3D;&quot;请选择$&#123;comment&#125;&quot;&gt;        &lt;&#x2F;el-date-picker&gt;      &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType &#x3D;&#x3D; &quot;BETWEEN&quot;)      &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; style&#x3D;&quot;width: 308px&quot;&gt;        &lt;el-date-picker          v-model&#x3D;&quot;daterange$&#123;AttrName&#125;&quot;          value-format&#x3D;&quot;YYYY-MM-DD HH:mm:ss&quot;          type&#x3D;&quot;daterange&quot;          range-separator&#x3D;&quot;-&quot;          start-placeholder&#x3D;&quot;开始日期&quot;          :default-time&#x3D;&quot;[new Date(2000, 1, 1, 0, 0, 0), new Date(2000, 1, 1, 23, 59, 59)]&quot;        &gt;&lt;&#x2F;el-date-picker&gt;      &lt;&#x2F;el-form-item&gt;#end#end#end      &lt;el-form-item&gt;        &lt;el-button type&#x3D;&quot;primary&quot; icon&#x3D;&quot;Search&quot; @click&#x3D;&quot;handleQuery&quot;&gt;搜索&lt;&#x2F;el-button&gt;        &lt;el-button icon&#x3D;&quot;Refresh&quot; @click&#x3D;&quot;resetQuery&quot;&gt;重置&lt;&#x2F;el-button&gt;      &lt;&#x2F;el-form-item&gt;    &lt;&#x2F;el-form&gt;    &lt;el-row :gutter&#x3D;&quot;10&quot; class&#x3D;&quot;mb8&quot;&gt;      &lt;el-col :span&#x3D;&quot;1.5&quot;&gt;        &lt;el-button          type&#x3D;&quot;primary&quot;          plain          icon&#x3D;&quot;Plus&quot;          @click&#x3D;&quot;handleAdd&quot;          v-hasPermi&#x3D;&quot;[&#39;$&#123;moduleName&#125;:$&#123;businessName&#125;:add&#39;]&quot;        &gt;新增&lt;&#x2F;el-button&gt;      &lt;&#x2F;el-col&gt;      &lt;el-col :span&#x3D;&quot;1.5&quot;&gt;        &lt;el-button          type&#x3D;&quot;success&quot;          plain          icon&#x3D;&quot;Edit&quot;          :disabled&#x3D;&quot;single&quot;          @click&#x3D;&quot;handleUpdate&quot;          v-hasPermi&#x3D;&quot;[&#39;$&#123;moduleName&#125;:$&#123;businessName&#125;:edit&#39;]&quot;        &gt;修改&lt;&#x2F;el-button&gt;      &lt;&#x2F;el-col&gt;      &lt;el-col :span&#x3D;&quot;1.5&quot;&gt;        &lt;el-button          type&#x3D;&quot;danger&quot;          plain          icon&#x3D;&quot;Delete&quot;          :disabled&#x3D;&quot;multiple&quot;          @click&#x3D;&quot;handleDelete&quot;          v-hasPermi&#x3D;&quot;[&#39;$&#123;moduleName&#125;:$&#123;businessName&#125;:remove&#39;]&quot;        &gt;删除&lt;&#x2F;el-button&gt;      &lt;&#x2F;el-col&gt;      &lt;el-col :span&#x3D;&quot;1.5&quot;&gt;        &lt;el-button          type&#x3D;&quot;warning&quot;          plain          icon&#x3D;&quot;Download&quot;          @click&#x3D;&quot;handleExport&quot;          v-hasPermi&#x3D;&quot;[&#39;$&#123;moduleName&#125;:$&#123;businessName&#125;:export&#39;]&quot;        &gt;导出&lt;&#x2F;el-button&gt;      &lt;&#x2F;el-col&gt;      &lt;right-toolbar v-model:showSearch&#x3D;&quot;showSearch&quot; @queryTable&#x3D;&quot;getList&quot;&gt;&lt;&#x2F;right-toolbar&gt;    &lt;&#x2F;el-row&gt;    &lt;el-table v-loading&#x3D;&quot;loading&quot; :data&#x3D;&quot;$&#123;businessName&#125;List&quot; @selection-change&#x3D;&quot;handleSelectionChange&quot;&gt;      &lt;el-table-column type&#x3D;&quot;selection&quot; width&#x3D;&quot;55&quot; align&#x3D;&quot;center&quot; &#x2F;&gt;#foreach($column in $columns)#set($javaField&#x3D;$column.javaField)#set($parentheseIndex&#x3D;$column.columnComment.indexOf(&quot;（&quot;))#if($parentheseIndex !&#x3D; -1)#set($comment&#x3D;$column.columnComment.substring(0, $parentheseIndex))#else#set($comment&#x3D;$column.columnComment)#end#if($column.pk)      &lt;el-table-column label&#x3D;&quot;$&#123;comment&#125;&quot; align&#x3D;&quot;center&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; v-if&#x3D;&quot;$&#123;column.list&#125;&quot;&#x2F;&gt;#elseif($column.list &amp;&amp; $column.htmlType &#x3D;&#x3D; &quot;datetime&quot;)      &lt;el-table-column label&#x3D;&quot;$&#123;comment&#125;&quot; align&#x3D;&quot;center&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; width&#x3D;&quot;180&quot;&gt;        &lt;template #default&#x3D;&quot;scope&quot;&gt;          &lt;span&gt;&#123;&#123; parseTime(scope.row.$&#123;javaField&#125;, &#39;&#123;y&#125;-&#123;m&#125;-&#123;d&#125;&#39;) &#125;&#125;&lt;&#x2F;span&gt;        &lt;&#x2F;template&gt;      &lt;&#x2F;el-table-column&gt;#elseif($column.list &amp;&amp; $column.htmlType &#x3D;&#x3D; &quot;imageUpload&quot;)      &lt;el-table-column label&#x3D;&quot;$&#123;comment&#125;&quot; align&#x3D;&quot;center&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; width&#x3D;&quot;100&quot;&gt;          &lt;template #default&#x3D;&quot;scope&quot;&gt;              &lt;image-preview :src&#x3D;&quot;scope.row.$&#123;javaField&#125;&quot; :width&#x3D;&quot;50&quot; :height&#x3D;&quot;50&quot;&#x2F;&gt;          &lt;&#x2F;template&gt;      &lt;&#x2F;el-table-column&gt;#elseif($column.list &amp;&amp; $column.dictType &amp;&amp; &quot;&quot; !&#x3D; $column.dictType)      &lt;el-table-column label&#x3D;&quot;$&#123;comment&#125;&quot; align&#x3D;&quot;center&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot;&gt;        &lt;template #default&#x3D;&quot;scope&quot;&gt;#if($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot;)          &lt;dict-tag :options&#x3D;&quot;$&#123;column.dictType&#125;&quot; :value&#x3D;&quot;scope.row.$&#123;javaField&#125; ? scope.row.$&#123;javaField&#125;.split(&#39;,&#39;) : []&quot;&#x2F;&gt;#else          &lt;dict-tag :options&#x3D;&quot;$&#123;column.dictType&#125;&quot; :value&#x3D;&quot;scope.row.$&#123;javaField&#125;&quot;&#x2F;&gt;#end        &lt;&#x2F;template&gt;      &lt;&#x2F;el-table-column&gt;#elseif($column.list &amp;&amp; &quot;&quot; !&#x3D; $javaField)      &lt;el-table-column label&#x3D;&quot;$&#123;comment&#125;&quot; align&#x3D;&quot;center&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; &#x2F;&gt;#end#end      &lt;el-table-column label&#x3D;&quot;操作&quot; align&#x3D;&quot;center&quot; class-name&#x3D;&quot;small-padding fixed-width&quot;&gt;          &lt;template #default&#x3D;&quot;scope&quot;&gt;              &lt;el-button link type&#x3D;&quot;primary&quot; icon&#x3D;&quot;Edit&quot; @click&#x3D;&quot;handleUpdate(scope.row)&quot; v-hasPermi&#x3D;&quot;[&#39;$&#123;moduleName&#125;:$&#123;businessName&#125;:edit&#39;]&quot;&gt;修改&lt;&#x2F;el-button&gt;              &lt;el-button link type&#x3D;&quot;primary&quot; icon&#x3D;&quot;Delete&quot; @click&#x3D;&quot;handleDelete(scope.row)&quot; v-hasPermi&#x3D;&quot;[&#39;$&#123;moduleName&#125;:$&#123;businessName&#125;:remove&#39;]&quot;&gt;删除&lt;&#x2F;el-button&gt;          &lt;&#x2F;template&gt;      &lt;&#x2F;el-table-column&gt;    &lt;&#x2F;el-table&gt;    &lt;pagination      v-show&#x3D;&quot;total&gt;0&quot;      :total&#x3D;&quot;total&quot;      v-model:page&#x3D;&quot;queryParams.pageNum&quot;      v-model:limit&#x3D;&quot;queryParams.pageSize&quot;      @pagination&#x3D;&quot;getList&quot;    &#x2F;&gt;    &lt;!-- 添加或修改$&#123;functionName&#125;对话框 --&gt;    &lt;el-dialog :title&#x3D;&quot;title&quot; v-model&#x3D;&quot;open&quot; width&#x3D;&quot;500px&quot; append-to-body&gt;      &lt;el-form ref&#x3D;&quot;$&#123;businessName&#125;Ref&quot; :model&#x3D;&quot;form&quot; :rules&#x3D;&quot;rules&quot; label-width&#x3D;&quot;80px&quot;&gt;#foreach($column in $columns)#set($field&#x3D;$column.javaField)#if($column.insert &amp;&amp; !$column.pk)#set($parentheseIndex&#x3D;$column.columnComment.indexOf(&quot;（&quot;))#if($parentheseIndex !&#x3D; -1)#set($comment&#x3D;$column.columnComment.substring(0, $parentheseIndex))#else#set($comment&#x3D;$column.columnComment)#end#set($dictType&#x3D;$column.dictType)#if($column.htmlType &#x3D;&#x3D; &quot;input&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-input v-model&#x3D;&quot;form.$&#123;field&#125;&quot; placeholder&#x3D;&quot;请输入$&#123;comment&#125;&quot; &#x2F;&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;imageUpload&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;image-upload v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&#x2F;&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;fileUpload&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;file-upload v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&#x2F;&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;editor&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot;&gt;          &lt;editor v-model&#x3D;&quot;form.$&#123;field&#125;&quot; :min-height&#x3D;&quot;192&quot;&#x2F;&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;select&quot; &amp;&amp; &quot;&quot; !&#x3D; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-select v-model&#x3D;&quot;form.$&#123;field&#125;&quot; placeholder&#x3D;&quot;请选择$&#123;comment&#125;&quot;&gt;            &lt;el-option              v-for&#x3D;&quot;dict in $&#123;dictType&#125;&quot;              :key&#x3D;&quot;dict.value&quot;              :label&#x3D;&quot;dict.label&quot;#if($column.javaType &#x3D;&#x3D; &quot;Integer&quot; || $column.javaType &#x3D;&#x3D; &quot;Long&quot;)              :value&#x3D;&quot;parseInt(dict.value)&quot;#else              :value&#x3D;&quot;dict.value&quot;#end            &gt;&lt;&#x2F;el-option&gt;          &lt;&#x2F;el-select&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;select&quot; &amp;&amp; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-select v-model&#x3D;&quot;form.$&#123;field&#125;&quot; placeholder&#x3D;&quot;请选择$&#123;comment&#125;&quot;&gt;            &lt;el-option label&#x3D;&quot;请选择字典生成&quot; value&#x3D;&quot;&quot; &#x2F;&gt;          &lt;&#x2F;el-select&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot; &amp;&amp; &quot;&quot; !&#x3D; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-checkbox-group v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&gt;            &lt;el-checkbox              v-for&#x3D;&quot;dict in $&#123;dictType&#125;&quot;              :key&#x3D;&quot;dict.value&quot;              :label&#x3D;&quot;dict.value&quot;&gt;              &#123;&#123;dict.label&#125;&#125;            &lt;&#x2F;el-checkbox&gt;          &lt;&#x2F;el-checkbox-group&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot; &amp;&amp; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-checkbox-group v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&gt;            &lt;el-checkbox&gt;请选择字典生成&lt;&#x2F;el-checkbox&gt;          &lt;&#x2F;el-checkbox-group&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;radio&quot; &amp;&amp; &quot;&quot; !&#x3D; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-radio-group v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&gt;            &lt;el-radio              v-for&#x3D;&quot;dict in $&#123;dictType&#125;&quot;              :key&#x3D;&quot;dict.value&quot;#if($column.javaType &#x3D;&#x3D; &quot;Integer&quot; || $column.javaType &#x3D;&#x3D; &quot;Long&quot;)              :label&#x3D;&quot;parseInt(dict.value)&quot;#else              :label&#x3D;&quot;dict.value&quot;#end            &gt;&#123;&#123;dict.label&#125;&#125;&lt;&#x2F;el-radio&gt;          &lt;&#x2F;el-radio-group&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;radio&quot; &amp;&amp; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-radio-group v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&gt;            &lt;el-radio label&#x3D;&quot;1&quot;&gt;请选择字典生成&lt;&#x2F;el-radio&gt;          &lt;&#x2F;el-radio-group&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;datetime&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-date-picker clearable            v-model&#x3D;&quot;form.$&#123;field&#125;&quot;            type&#x3D;&quot;datetime&quot;            value-format&#x3D;&quot;YYYY-MM-DD HH:mm:ss&quot;            placeholder&#x3D;&quot;请选择$&#123;comment&#125;&quot;&gt;          &lt;&#x2F;el-date-picker&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;textarea&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-input v-model&#x3D;&quot;form.$&#123;field&#125;&quot; type&#x3D;&quot;textarea&quot; placeholder&#x3D;&quot;请输入内容&quot; &#x2F;&gt;        &lt;&#x2F;el-form-item&gt;#end#end#end#if($table.sub)        &lt;el-divider content-position&#x3D;&quot;center&quot;&gt;$&#123;subTable.functionName&#125;信息&lt;&#x2F;el-divider&gt;        &lt;el-row :gutter&#x3D;&quot;10&quot; class&#x3D;&quot;mb8&quot;&gt;          &lt;el-col :span&#x3D;&quot;1.5&quot;&gt;            &lt;el-button type&#x3D;&quot;primary&quot; icon&#x3D;&quot;Plus&quot; @click&#x3D;&quot;handleAdd$&#123;subClassName&#125;&quot;&gt;添加&lt;&#x2F;el-button&gt;          &lt;&#x2F;el-col&gt;          &lt;el-col :span&#x3D;&quot;1.5&quot;&gt;            &lt;el-button type&#x3D;&quot;danger&quot; icon&#x3D;&quot;Delete&quot; @click&#x3D;&quot;handleDelete$&#123;subClassName&#125;&quot;&gt;删除&lt;&#x2F;el-button&gt;          &lt;&#x2F;el-col&gt;        &lt;&#x2F;el-row&gt;        &lt;el-table :data&#x3D;&quot;$&#123;subclassName&#125;List&quot; :row-class-name&#x3D;&quot;row$&#123;subClassName&#125;Index&quot; @selection-change&#x3D;&quot;handle$&#123;subClassName&#125;SelectionChange&quot; ref&#x3D;&quot;$&#123;subclassName&#125;&quot;&gt;          &lt;el-table-column type&#x3D;&quot;selection&quot; width&#x3D;&quot;50&quot; align&#x3D;&quot;center&quot; &#x2F;&gt;          &lt;el-table-column label&#x3D;&quot;序号&quot; align&#x3D;&quot;center&quot; prop&#x3D;&quot;index&quot; width&#x3D;&quot;50&quot;&#x2F;&gt;#foreach($column in $subTable.columns)#set($javaField&#x3D;$column.javaField)#set($parentheseIndex&#x3D;$column.columnComment.indexOf(&quot;（&quot;))#if($parentheseIndex !&#x3D; -1)#set($comment&#x3D;$column.columnComment.substring(0, $parentheseIndex))#else#set($comment&#x3D;$column.columnComment)#end#if($column.pk || $javaField &#x3D;&#x3D; $&#123;subTableFkclassName&#125;)#elseif($column.list &amp;&amp; $column.htmlType &#x3D;&#x3D; &quot;input&quot;)          &lt;el-table-column label&#x3D;&quot;$comment&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; width&#x3D;&quot;150&quot;&gt;            &lt;template #default&#x3D;&quot;scope&quot;&gt;              &lt;el-input v-model&#x3D;&quot;scope.row.$javaField&quot; placeholder&#x3D;&quot;请输入$comment&quot; &#x2F;&gt;            &lt;&#x2F;template&gt;          &lt;&#x2F;el-table-column&gt;#elseif($column.list &amp;&amp; $column.htmlType &#x3D;&#x3D; &quot;datetime&quot;)          &lt;el-table-column label&#x3D;&quot;$comment&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; width&#x3D;&quot;240&quot;&gt;            &lt;template #default&#x3D;&quot;scope&quot;&gt;              &lt;el-date-picker clearable                v-model&#x3D;&quot;scope.row.$javaField&quot;                type&#x3D;&quot;date&quot;                value-format&#x3D;&quot;YYYY-MM-DD&quot;                placeholder&#x3D;&quot;请选择$comment&quot;&gt;              &lt;&#x2F;el-date-picker&gt;            &lt;&#x2F;template&gt;          &lt;&#x2F;el-table-column&gt;#elseif($column.list &amp;&amp; ($column.htmlType &#x3D;&#x3D; &quot;select&quot; || $column.htmlType &#x3D;&#x3D; &quot;radio&quot;) &amp;&amp; &quot;&quot; !&#x3D; $column.dictType)          &lt;el-table-column label&#x3D;&quot;$comment&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; width&#x3D;&quot;150&quot;&gt;            &lt;template #default&#x3D;&quot;scope&quot;&gt;              &lt;el-select v-model&#x3D;&quot;scope.row.$javaField&quot; placeholder&#x3D;&quot;请选择$comment&quot;&gt;                &lt;el-option                  v-for&#x3D;&quot;dict in $column.dictType&quot;                  :key&#x3D;&quot;dict.value&quot;                  :label&#x3D;&quot;dict.label&quot;                  :value&#x3D;&quot;dict.value&quot;                &gt;&lt;&#x2F;el-option&gt;              &lt;&#x2F;el-select&gt;            &lt;&#x2F;template&gt;          &lt;&#x2F;el-table-column&gt;#elseif($column.list &amp;&amp; ($column.htmlType &#x3D;&#x3D; &quot;select&quot; || $column.htmlType &#x3D;&#x3D; &quot;radio&quot;) &amp;&amp; &quot;&quot; &#x3D;&#x3D; $column.dictType)          &lt;el-table-column label&#x3D;&quot;$comment&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; width&#x3D;&quot;150&quot;&gt;            &lt;template #default&#x3D;&quot;scope&quot;&gt;              &lt;el-select v-model&#x3D;&quot;scope.row.$javaField&quot; placeholder&#x3D;&quot;请选择$comment&quot;&gt;                &lt;el-option label&#x3D;&quot;请选择字典生成&quot; value&#x3D;&quot;&quot; &#x2F;&gt;              &lt;&#x2F;el-select&gt;            &lt;&#x2F;template&gt;          &lt;&#x2F;el-table-column&gt;#end#end        &lt;&#x2F;el-table&gt;#end      &lt;&#x2F;el-form&gt;      &lt;template #footer&gt;        &lt;div class&#x3D;&quot;dialog-footer&quot;&gt;          &lt;el-button :loading&#x3D;&quot;buttonLoading&quot; type&#x3D;&quot;primary&quot; @click&#x3D;&quot;submitForm&quot;&gt;确 定&lt;&#x2F;el-button&gt;          &lt;el-button @click&#x3D;&quot;cancel&quot;&gt;取 消&lt;&#x2F;el-button&gt;        &lt;&#x2F;div&gt;      &lt;&#x2F;template&gt;    &lt;&#x2F;el-dialog&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup name&#x3D;&quot;$&#123;BusinessName&#125;&quot;&gt;import &#123; list$&#123;BusinessName&#125;, get$&#123;BusinessName&#125;, del$&#123;BusinessName&#125;, add$&#123;BusinessName&#125;, update$&#123;BusinessName&#125; &#125; from &quot;@&#x2F;api&#x2F;$&#123;moduleName&#125;&#x2F;$&#123;businessName&#125;&quot;;const &#123; proxy &#125; &#x3D; getCurrentInstance();#if($&#123;dicts&#125; !&#x3D; &#39;&#39;)#set($dictsNoSymbol&#x3D;$dicts.replace(&quot;&#39;&quot;, &quot;&quot;))const &#123; $&#123;dictsNoSymbol&#125; &#125; &#x3D; proxy.useDict($&#123;dicts&#125;);#endconst $&#123;businessName&#125;List &#x3D; ref([]);#if($table.sub)const $&#123;subclassName&#125;List &#x3D; ref([]);#endconst open &#x3D; ref(false);const buttonLoading &#x3D; ref(false);const loading &#x3D; ref(true);const showSearch &#x3D; ref(true);const ids &#x3D; ref([]);#if($table.sub)const checked$&#123;subClassName&#125; &#x3D; ref([]);#endconst single &#x3D; ref(true);const multiple &#x3D; ref(true);const total &#x3D; ref(0);const title &#x3D; ref(&quot;&quot;);#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType &#x3D;&#x3D; &quot;BETWEEN&quot;)#set($AttrName&#x3D;$column.javaField.substring(0,1).toUpperCase() + $&#123;column.javaField.substring(1)&#125;)const daterange$&#123;AttrName&#125; &#x3D; ref([]);#end#endconst data &#x3D; reactive(&#123;  form: &#123;&#125;,  queryParams: &#123;    pageNum: 1,    pageSize: 10,#foreach ($column in $columns)#if($column.query)    $column.javaField: undefined#if($foreach.count !&#x3D; $columns.size()),#end#end#end  &#125;,  rules: &#123;#foreach ($column in $columns)#if($column.required)#set($parentheseIndex&#x3D;$column.columnComment.indexOf(&quot;（&quot;))#if($parentheseIndex !&#x3D; -1)#set($comment&#x3D;$column.columnComment.substring(0, $parentheseIndex))#else#set($comment&#x3D;$column.columnComment)#end    $column.javaField: [      &#123; required: true, message: &quot;$comment不能为空&quot;, trigger: #if($column.htmlType &#x3D;&#x3D; &quot;select&quot; || $column.htmlType &#x3D;&#x3D; &quot;radio&quot;)&quot;change&quot;#else&quot;blur&quot;#end &#125;    ]#if($foreach.count !&#x3D; $columns.size()),#end#end#end  &#125;&#125;);const &#123; queryParams, form, rules &#125; &#x3D; toRefs(data);&#x2F;** 查询$&#123;functionName&#125;列表 *&#x2F;function getList() &#123;  loading.value &#x3D; true;#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType &#x3D;&#x3D; &quot;BETWEEN&quot;)  queryParams.value.params &#x3D; &#123;&#125;;#break#end#end#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType &#x3D;&#x3D; &quot;BETWEEN&quot;)#set($AttrName&#x3D;$column.javaField.substring(0,1).toUpperCase() + $&#123;column.javaField.substring(1)&#125;)  if (null !&#x3D; daterange$&#123;AttrName&#125; &amp;&amp; &#39;&#39; !&#x3D; daterange$&#123;AttrName&#125;) &#123;    queryParams.value.params[&quot;begin$&#123;AttrName&#125;&quot;] &#x3D; daterange$&#123;AttrName&#125;.value[0];    queryParams.value.params[&quot;end$&#123;AttrName&#125;&quot;] &#x3D; daterange$&#123;AttrName&#125;.value[1];  &#125;#end#end  list$&#123;BusinessName&#125;(queryParams.value).then(response &#x3D;&gt; &#123;    $&#123;businessName&#125;List.value &#x3D; response.rows;    total.value &#x3D; response.total;    loading.value &#x3D; false;  &#125;);&#125;&#x2F;&#x2F; 取消按钮function cancel() &#123;  open.value &#x3D; false;  reset();&#125;&#x2F;&#x2F; 表单重置function reset() &#123;  form.value &#x3D; &#123;#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot;)    $column.javaField: []#if($foreach.count !&#x3D; $columns.size()),#end#else    $column.javaField: null#if($foreach.count !&#x3D; $columns.size()),#end#end#end  &#125;;#if($table.sub)  $&#123;subclassName&#125;List.value &#x3D; [];#end  proxy.resetForm(&quot;$&#123;businessName&#125;Ref&quot;);&#125;&#x2F;** 搜索按钮操作 *&#x2F;function handleQuery() &#123;  queryParams.value.pageNum &#x3D; 1;  getList();&#125;&#x2F;** 重置按钮操作 *&#x2F;function resetQuery() &#123;#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType &#x3D;&#x3D; &quot;BETWEEN&quot;)#set($AttrName&#x3D;$column.javaField.substring(0,1).toUpperCase() + $&#123;column.javaField.substring(1)&#125;)  daterange$&#123;AttrName&#125;.value &#x3D; [];#end#end  proxy.resetForm(&quot;queryRef&quot;);  handleQuery();&#125;&#x2F;&#x2F; 多选框选中数据function handleSelectionChange(selection) &#123;  ids.value &#x3D; selection.map(item &#x3D;&gt; item.$&#123;pkColumn.javaField&#125;);  single.value &#x3D; selection.length !&#x3D; 1;  multiple.value &#x3D; !selection.length;&#125;&#x2F;** 新增按钮操作 *&#x2F;function handleAdd() &#123;  reset();  open.value &#x3D; true;  title.value &#x3D; &quot;添加$&#123;functionName&#125;&quot;;&#125;&#x2F;** 修改按钮操作 *&#x2F;function handleUpdate(row) &#123;  loading.value &#x3D; true  reset();  const _$&#123;pkColumn.javaField&#125; &#x3D; row.$&#123;pkColumn.javaField&#125; || ids.value  get$&#123;BusinessName&#125;(_$&#123;pkColumn.javaField&#125;).then(response &#x3D;&gt; &#123;    loading.value &#x3D; false;    form.value &#x3D; response.data;#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot;)    form.value.$column.javaField &#x3D; form.value.$&#123;column.javaField&#125;.split(&quot;,&quot;);#end#end#if($table.sub)    $&#123;subclassName&#125;List.value &#x3D; response.data.$&#123;subclassName&#125;List;#end    open.value &#x3D; true;    title.value &#x3D; &quot;修改$&#123;functionName&#125;&quot;;  &#125;);&#125;&#x2F;** 提交按钮 *&#x2F;function submitForm() &#123;  proxy.#[[$]]#refs[&quot;$&#123;businessName&#125;Ref&quot;].validate(valid &#x3D;&gt; &#123;    if (valid) &#123;      buttonLoading.value &#x3D; true;#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot;)      form.value.$column.javaField &#x3D; form.value.$&#123;column.javaField&#125;.join(&quot;,&quot;);#end#end#if($table.sub)      form.value.$&#123;subclassName&#125;List &#x3D; $&#123;subclassName&#125;List.value;#end      if (form.value.$&#123;pkColumn.javaField&#125; !&#x3D; null) &#123;        update$&#123;BusinessName&#125;(form.value).then(response &#x3D;&gt; &#123;          proxy.#[[$modal]]#.msgSuccess(&quot;修改成功&quot;);          open.value &#x3D; false;          getList();        &#125;).finally(() &#x3D;&gt; &#123;          buttonLoading.value &#x3D; false;        &#125;);      &#125; else &#123;        add$&#123;BusinessName&#125;(form.value).then(response &#x3D;&gt; &#123;          proxy.#[[$modal]]#.msgSuccess(&quot;新增成功&quot;);          open.value &#x3D; false;          getList();        &#125;).finally(() &#x3D;&gt; &#123;          buttonLoading.value &#x3D; false;        &#125;);      &#125;    &#125;  &#125;);&#125;&#x2F;** 删除按钮操作 *&#x2F;function handleDelete(row) &#123;  const _$&#123;pkColumn.javaField&#125;s &#x3D; row.$&#123;pkColumn.javaField&#125; || ids.value;  proxy.#[[$modal]]#.confirm(&#39;是否确认删除$&#123;functionName&#125;编号为&quot;&#39; + _$&#123;pkColumn.javaField&#125;s + &#39;&quot;的数据项？&#39;).then(function() &#123;    loading.value &#x3D; true;    return del$&#123;BusinessName&#125;(_$&#123;pkColumn.javaField&#125;s);  &#125;).then(() &#x3D;&gt; &#123;    loading.value &#x3D; true;    getList();    proxy.#[[$modal]]#.msgSuccess(&quot;删除成功&quot;);  &#125;).catch(() &#x3D;&gt; &#123;  &#125;).finally(() &#x3D;&gt; &#123;    loading.value &#x3D; false;  &#125;);&#125;#if($table.sub)&#x2F;** $&#123;subTable.functionName&#125;序号 *&#x2F;function row$&#123;subClassName&#125;Index(&#123; row, rowIndex &#125;) &#123;  row.index &#x3D; rowIndex + 1;&#125;&#x2F;** $&#123;subTable.functionName&#125;添加按钮操作 *&#x2F;function handleAdd$&#123;subClassName&#125;() &#123;  let obj &#x3D; &#123;&#125;;#foreach($column in $subTable.columns)#if($column.pk || $column.javaField &#x3D;&#x3D; $&#123;subTableFkclassName&#125;)#elseif($column.list &amp;&amp; &quot;&quot; !&#x3D; $javaField)  obj.$column.javaField &#x3D; &quot;&quot;;#end#end  $&#123;subclassName&#125;List.value.push(obj);&#125;&#x2F;** $&#123;subTable.functionName&#125;删除按钮操作 *&#x2F;function handleDelete$&#123;subClassName&#125;() &#123;  if (checked$&#123;subClassName&#125;.value.length &#x3D;&#x3D; 0) &#123;    proxy.#[[$modal]]#.msgError(&quot;请先选择要删除的$&#123;subTable.functionName&#125;数据&quot;);  &#125; else &#123;    const $&#123;subclassName&#125;s &#x3D; $&#123;subclassName&#125;List.value;    const checked$&#123;subClassName&#125;s &#x3D; checked$&#123;subClassName&#125;.value;    $&#123;subclassName&#125;List.value &#x3D; $&#123;subclassName&#125;s.filter(function(item) &#123;      return checked$&#123;subClassName&#125;s.indexOf(item.index) &#x3D;&#x3D; -1    &#125;);  &#125;&#125;&#x2F;** 复选框选中数据 *&#x2F;function handle$&#123;subClassName&#125;SelectionChange(selection) &#123;  checked$&#123;subClassName&#125;.value &#x3D; selection.map(item &#x3D;&gt; item.index)&#125;#end&#x2F;** 导出按钮操作 *&#x2F;function handleExport() &#123;  proxy.download(&#39;$&#123;moduleName&#125;&#x2F;$&#123;businessName&#125;&#x2F;export&#39;, &#123;    ...queryParams.value  &#125;, &#96;$&#123;businessName&#125;_#[[$&#123;new Date().getTime()&#125;]]#.xlsx&#96;)&#125;getList();&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="index-tree-vue3-vm"><a href="#index-tree-vue3-vm" class="headerlink" title="index-tree.vue3.vm"></a>index-tree.vue3.vm</h5><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div class&#x3D;&quot;app-container&quot;&gt;    &lt;el-form :model&#x3D;&quot;queryParams&quot; ref&#x3D;&quot;queryRef&quot; :inline&#x3D;&quot;true&quot; v-show&#x3D;&quot;showSearch&quot; label-width&#x3D;&quot;68px&quot;&gt;#foreach($column in $columns)#if($column.query)#set($dictType&#x3D;$column.dictType)#set($AttrName&#x3D;$column.javaField.substring(0,1).toUpperCase() + $&#123;column.javaField.substring(1)&#125;)#set($parentheseIndex&#x3D;$column.columnComment.indexOf(&quot;（&quot;))#if($parentheseIndex !&#x3D; -1)#set($comment&#x3D;$column.columnComment.substring(0, $parentheseIndex))#else#set($comment&#x3D;$column.columnComment)#end#if($column.htmlType &#x3D;&#x3D; &quot;input&quot; || $column.htmlType &#x3D;&#x3D; &quot;textarea&quot;)      &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;column.javaField&#125;&quot;&gt;        &lt;el-input          v-model&#x3D;&quot;queryParams.$&#123;column.javaField&#125;&quot;          placeholder&#x3D;&quot;请输入$&#123;comment&#125;&quot;          clearable          @keyup.enter&#x3D;&quot;handleQuery&quot;        &#x2F;&gt;      &lt;&#x2F;el-form-item&gt;#elseif(($column.htmlType &#x3D;&#x3D; &quot;select&quot; || $column.htmlType &#x3D;&#x3D; &quot;radio&quot;) &amp;&amp; &quot;&quot; !&#x3D; $dictType)      &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;column.javaField&#125;&quot;&gt;        &lt;el-select v-model&#x3D;&quot;queryParams.$&#123;column.javaField&#125;&quot; placeholder&#x3D;&quot;请选择$&#123;comment&#125;&quot; clearable&gt;          &lt;el-option            v-for&#x3D;&quot;dict in $&#123;dictType&#125;&quot;            :key&#x3D;&quot;dict.value&quot;            :label&#x3D;&quot;dict.label&quot;            :value&#x3D;&quot;dict.value&quot;          &#x2F;&gt;        &lt;&#x2F;el-select&gt;      &lt;&#x2F;el-form-item&gt;#elseif(($column.htmlType &#x3D;&#x3D; &quot;select&quot; || $column.htmlType &#x3D;&#x3D; &quot;radio&quot;) &amp;&amp; $dictType)      &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;column.javaField&#125;&quot;&gt;        &lt;el-select v-model&#x3D;&quot;queryParams.$&#123;column.javaField&#125;&quot; placeholder&#x3D;&quot;请选择$&#123;comment&#125;&quot; clearable&gt;          &lt;el-option label&#x3D;&quot;请选择字典生成&quot; value&#x3D;&quot;&quot; &#x2F;&gt;        &lt;&#x2F;el-select&gt;      &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType !&#x3D; &quot;BETWEEN&quot;)      &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;column.javaField&#125;&quot;&gt;        &lt;el-date-picker clearable          v-model&#x3D;&quot;queryParams.$&#123;column.javaField&#125;&quot;          type&#x3D;&quot;date&quot;          value-format&#x3D;&quot;YYYY-MM-DD&quot;          placeholder&#x3D;&quot;选择$&#123;comment&#125;&quot;&gt;        &lt;&#x2F;el-date-picker&gt;      &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType &#x3D;&#x3D; &quot;BETWEEN&quot;)      &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; style&#x3D;&quot;width: 308px&quot;&gt;        &lt;el-date-picker          v-model&#x3D;&quot;daterange$&#123;AttrName&#125;&quot;          value-format&#x3D;&quot;YYYY-MM-DD HH:mm:ss&quot;          type&#x3D;&quot;daterange&quot;          range-separator&#x3D;&quot;-&quot;          start-placeholder&#x3D;&quot;开始日期&quot;          end-placeholder&#x3D;&quot;结束日期&quot;          :default-time&#x3D;&quot;[new Date(2000, 1, 1, 0, 0, 0), new Date(2000, 1, 1, 23, 59, 59)]&quot;        &gt;&lt;&#x2F;el-date-picker&gt;      &lt;&#x2F;el-form-item&gt;#end#end#end      &lt;el-form-item&gt;        &lt;el-button type&#x3D;&quot;primary&quot; icon&#x3D;&quot;Search&quot; @click&#x3D;&quot;handleQuery&quot;&gt;搜索&lt;&#x2F;el-button&gt;        &lt;el-button icon&#x3D;&quot;Refresh&quot; @click&#x3D;&quot;resetQuery&quot;&gt;重置&lt;&#x2F;el-button&gt;      &lt;&#x2F;el-form-item&gt;    &lt;&#x2F;el-form&gt;    &lt;el-row :gutter&#x3D;&quot;10&quot; class&#x3D;&quot;mb8&quot;&gt;      &lt;el-col :span&#x3D;&quot;1.5&quot;&gt;        &lt;el-button          type&#x3D;&quot;primary&quot;          plain          icon&#x3D;&quot;Plus&quot;          @click&#x3D;&quot;handleAdd&quot;          v-hasPermi&#x3D;&quot;[&#39;$&#123;moduleName&#125;:$&#123;businessName&#125;:add&#39;]&quot;        &gt;新增&lt;&#x2F;el-button&gt;      &lt;&#x2F;el-col&gt;      &lt;el-col :span&#x3D;&quot;1.5&quot;&gt;        &lt;el-button          type&#x3D;&quot;info&quot;          plain          icon&#x3D;&quot;Sort&quot;          @click&#x3D;&quot;toggleExpandAll&quot;        &gt;展开&#x2F;折叠&lt;&#x2F;el-button&gt;      &lt;&#x2F;el-col&gt;      &lt;right-toolbar v-model:showSearch&#x3D;&quot;showSearch&quot; @queryTable&#x3D;&quot;getList&quot;&gt;&lt;&#x2F;right-toolbar&gt;    &lt;&#x2F;el-row&gt;    &lt;el-table      v-if&#x3D;&quot;refreshTable&quot;      v-loading&#x3D;&quot;loading&quot;      :data&#x3D;&quot;$&#123;businessName&#125;List&quot;      row-key&#x3D;&quot;$&#123;treeCode&#125;&quot;      :default-expand-all&#x3D;&quot;isExpandAll&quot;      :tree-props&#x3D;&quot;&#123;children: &#39;children&#39;, hasChildren: &#39;hasChildren&#39;&#125;&quot;    &gt;#foreach($column in $columns)#set($javaField&#x3D;$column.javaField)#set($parentheseIndex&#x3D;$column.columnComment.indexOf(&quot;（&quot;))#if($parentheseIndex !&#x3D; -1)#set($comment&#x3D;$column.columnComment.substring(0, $parentheseIndex))#else#set($comment&#x3D;$column.columnComment)#end#if($column.pk)#elseif($column.list &amp;&amp; $column.htmlType &#x3D;&#x3D; &quot;datetime&quot;)      &lt;el-table-column label&#x3D;&quot;$&#123;comment&#125;&quot; align&#x3D;&quot;center&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; width&#x3D;&quot;180&quot;&gt;        &lt;template #default&#x3D;&quot;scope&quot;&gt;          &lt;span&gt;&#123;&#123; parseTime(scope.row.$&#123;javaField&#125;, &#39;&#123;y&#125;-&#123;m&#125;-&#123;d&#125;&#39;) &#125;&#125;&lt;&#x2F;span&gt;        &lt;&#x2F;template&gt;      &lt;&#x2F;el-table-column&gt;#elseif($column.list &amp;&amp; $column.htmlType &#x3D;&#x3D; &quot;imageUpload&quot;)      &lt;el-table-column label&#x3D;&quot;$&#123;comment&#125;&quot; align&#x3D;&quot;center&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; width&#x3D;&quot;100&quot;&gt;          &lt;template #default&#x3D;&quot;scope&quot;&gt;              &lt;image-preview :src&#x3D;&quot;scope.row.$&#123;javaField&#125;&quot; :width&#x3D;&quot;50&quot; :height&#x3D;&quot;50&quot;&#x2F;&gt;          &lt;&#x2F;template&gt;      &lt;&#x2F;el-table-column&gt;#elseif($column.list &amp;&amp; $column.dictType &amp;&amp; &quot;&quot; !&#x3D; $column.dictType)      &lt;el-table-column label&#x3D;&quot;$&#123;comment&#125;&quot; align&#x3D;&quot;center&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot;&gt;        &lt;template #default&#x3D;&quot;scope&quot;&gt;#if($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot;)          &lt;dict-tag :options&#x3D;&quot;$&#123;column.dictType&#125;&quot; :value&#x3D;&quot;scope.row.$&#123;javaField&#125; ? scope.row.$&#123;javaField&#125;.split(&#39;,&#39;) : []&quot;&#x2F;&gt;#else          &lt;dict-tag :options&#x3D;&quot;$&#123;column.dictType&#125;&quot; :value&#x3D;&quot;scope.row.$&#123;javaField&#125;&quot;&#x2F;&gt;#end        &lt;&#x2F;template&gt;      &lt;&#x2F;el-table-column&gt;#elseif($column.list &amp;&amp; &quot;&quot; !&#x3D; $javaField)#if($&#123;foreach.index&#125; &#x3D;&#x3D; 1)      &lt;el-table-column label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; &#x2F;&gt;#else      &lt;el-table-column label&#x3D;&quot;$&#123;comment&#125;&quot; align&#x3D;&quot;center&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; &#x2F;&gt;#end#end#end      &lt;el-table-column label&#x3D;&quot;操作&quot; align&#x3D;&quot;center&quot; class-name&#x3D;&quot;small-padding fixed-width&quot;&gt;          &lt;template #default&#x3D;&quot;scope&quot;&gt;              &lt;el-button link type&#x3D;&quot;primary&quot; icon&#x3D;&quot;Edit&quot; @click&#x3D;&quot;handleUpdate(scope.row)&quot; v-hasPermi&#x3D;&quot;[&#39;$&#123;moduleName&#125;:$&#123;businessName&#125;:edit&#39;]&quot;&gt;修改&lt;&#x2F;el-button&gt;              &lt;el-button link type&#x3D;&quot;primary&quot; icon&#x3D;&quot;Plus&quot; @click&#x3D;&quot;handleAdd(scope.row)&quot; v-hasPermi&#x3D;&quot;[&#39;$&#123;moduleName&#125;:$&#123;businessName&#125;:add&#39;]&quot;&gt;新增&lt;&#x2F;el-button&gt;              &lt;el-button link type&#x3D;&quot;primary&quot; icon&#x3D;&quot;Delete&quot; @click&#x3D;&quot;handleDelete(scope.row)&quot; v-hasPermi&#x3D;&quot;[&#39;$&#123;moduleName&#125;:$&#123;businessName&#125;:remove&#39;]&quot;&gt;删除&lt;&#x2F;el-button&gt;          &lt;&#x2F;template&gt;      &lt;&#x2F;el-table-column&gt;    &lt;&#x2F;el-table&gt;    &lt;!-- 添加或修改$&#123;functionName&#125;对话框 --&gt;    &lt;el-dialog :title&#x3D;&quot;title&quot; v-model&#x3D;&quot;open&quot; width&#x3D;&quot;500px&quot; append-to-body&gt;      &lt;el-form ref&#x3D;&quot;$&#123;businessName&#125;Ref&quot; :model&#x3D;&quot;form&quot; :rules&#x3D;&quot;rules&quot; label-width&#x3D;&quot;80px&quot;&gt;#foreach($column in $columns)#set($field&#x3D;$column.javaField)#if($column.insert &amp;&amp; !$column.pk)#set($parentheseIndex&#x3D;$column.columnComment.indexOf(&quot;（&quot;))#if($parentheseIndex !&#x3D; -1)#set($comment&#x3D;$column.columnComment.substring(0, $parentheseIndex))#else#set($comment&#x3D;$column.columnComment)#end#set($dictType&#x3D;$column.dictType)#if(&quot;&quot; !&#x3D; $treeParentCode &amp;&amp; $column.javaField &#x3D;&#x3D; $treeParentCode)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;treeParentCode&#125;&quot;&gt;          &lt;el-tree-select            v-model&#x3D;&quot;form.$&#123;treeParentCode&#125;&quot;            :data&#x3D;&quot;$&#123;businessName&#125;Options&quot;            :props&#x3D;&quot;&#123; value: &#39;$&#123;treeCode&#125;&#39;, label: &#39;$&#123;treeName&#125;&#39;, children: &#39;children&#39; &#125;&quot;            value-key&#x3D;&quot;$&#123;treeCode&#125;&quot;            placeholder&#x3D;&quot;请选择$&#123;comment&#125;&quot;            check-strictly          &#x2F;&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;input&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-input v-model&#x3D;&quot;form.$&#123;field&#125;&quot; placeholder&#x3D;&quot;请输入$&#123;comment&#125;&quot; &#x2F;&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;imageUpload&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;image-upload v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&#x2F;&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;fileUpload&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;file-upload v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&#x2F;&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;editor&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot;&gt;          &lt;editor v-model&#x3D;&quot;form.$&#123;field&#125;&quot; :min-height&#x3D;&quot;192&quot;&#x2F;&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;select&quot; &amp;&amp; &quot;&quot; !&#x3D; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-select v-model&#x3D;&quot;form.$&#123;field&#125;&quot; placeholder&#x3D;&quot;请选择$&#123;comment&#125;&quot;&gt;            &lt;el-option              v-for&#x3D;&quot;dict in $&#123;dictType&#125;&quot;              :key&#x3D;&quot;dict.value&quot;              :label&#x3D;&quot;dict.label&quot;#if($column.javaType &#x3D;&#x3D; &quot;Integer&quot; || $column.javaType &#x3D;&#x3D; &quot;Long&quot;)              :value&#x3D;&quot;parseInt(dict.value)&quot;#else              :value&#x3D;&quot;dict.value&quot;#end            &gt;&lt;&#x2F;el-option&gt;          &lt;&#x2F;el-select&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;select&quot; &amp;&amp; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-select v-model&#x3D;&quot;form.$&#123;field&#125;&quot; placeholder&#x3D;&quot;请选择$&#123;comment&#125;&quot;&gt;            &lt;el-option label&#x3D;&quot;请选择字典生成&quot; value&#x3D;&quot;&quot; &#x2F;&gt;          &lt;&#x2F;el-select&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot; &amp;&amp; &quot;&quot; !&#x3D; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-checkbox-group v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&gt;            &lt;el-checkbox              v-for&#x3D;&quot;dict in $&#123;dictType&#125;&quot;              :key&#x3D;&quot;dict.value&quot;              :label&#x3D;&quot;dict.value&quot;&gt;              &#123;&#123;dict.label&#125;&#125;            &lt;&#x2F;el-checkbox&gt;          &lt;&#x2F;el-checkbox-group&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot; &amp;&amp; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-checkbox-group v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&gt;            &lt;el-checkbox&gt;请选择字典生成&lt;&#x2F;el-checkbox&gt;          &lt;&#x2F;el-checkbox-group&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;radio&quot; &amp;&amp; &quot;&quot; !&#x3D; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-radio-group v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&gt;            &lt;el-radio              v-for&#x3D;&quot;dict in $&#123;dictType&#125;&quot;              :key&#x3D;&quot;dict.value&quot;#if($column.javaType &#x3D;&#x3D; &quot;Integer&quot; || $column.javaType &#x3D;&#x3D; &quot;Long&quot;)              :label&#x3D;&quot;parseInt(dict.value)&quot;#else              :label&#x3D;&quot;dict.value&quot;#end            &gt;&#123;&#123;dict.label&#125;&#125;&lt;&#x2F;el-radio&gt;          &lt;&#x2F;el-radio-group&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;radio&quot; &amp;&amp; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-radio-group v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&gt;            &lt;el-radio label&#x3D;&quot;1&quot;&gt;请选择字典生成&lt;&#x2F;el-radio&gt;          &lt;&#x2F;el-radio-group&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;datetime&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-date-picker clearable            v-model&#x3D;&quot;form.$&#123;field&#125;&quot;            type&#x3D;&quot;datetime&quot;            value-format&#x3D;&quot;YYYY-MM-DD HH:mm:ss&quot;            placeholder&#x3D;&quot;选择$&#123;comment&#125;&quot;&gt;          &lt;&#x2F;el-date-picker&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;textarea&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-input v-model&#x3D;&quot;form.$&#123;field&#125;&quot; type&#x3D;&quot;textarea&quot; placeholder&#x3D;&quot;请输入内容&quot; &#x2F;&gt;        &lt;&#x2F;el-form-item&gt;#end#end#end      &lt;&#x2F;el-form&gt;      &lt;template #footer&gt;        &lt;div class&#x3D;&quot;dialog-footer&quot;&gt;          &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;submitForm&quot;&gt;确 定&lt;&#x2F;el-button&gt;          &lt;el-button @click&#x3D;&quot;cancel&quot;&gt;取 消&lt;&#x2F;el-button&gt;        &lt;&#x2F;div&gt;      &lt;&#x2F;template&gt;    &lt;&#x2F;el-dialog&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup name&#x3D;&quot;$&#123;BusinessName&#125;&quot;&gt;import &#123; list$&#123;BusinessName&#125;, get$&#123;BusinessName&#125;, del$&#123;BusinessName&#125;, add$&#123;BusinessName&#125;, update$&#123;BusinessName&#125; &#125; from &quot;@&#x2F;api&#x2F;$&#123;moduleName&#125;&#x2F;$&#123;businessName&#125;&quot;;const &#123; proxy &#125; &#x3D; getCurrentInstance();#if($&#123;dicts&#125; !&#x3D; &#39;&#39;)#set($dictsNoSymbol&#x3D;$dicts.replace(&quot;&#39;&quot;, &quot;&quot;))const &#123; $&#123;dictsNoSymbol&#125; &#125; &#x3D; proxy.useDict($&#123;dicts&#125;);#endconst $&#123;businessName&#125;List &#x3D; ref([]);const $&#123;businessName&#125;Options &#x3D; ref([]);const open &#x3D; ref(false);const buttonLoading &#x3D; ref(false);const loading &#x3D; ref(true);const showSearch &#x3D; ref(true);const title &#x3D; ref(&quot;&quot;);const isExpandAll &#x3D; ref(true);const refreshTable &#x3D; ref(true);#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType &#x3D;&#x3D; &quot;BETWEEN&quot;)#set($AttrName&#x3D;$column.javaField.substring(0,1).toUpperCase() + $&#123;column.javaField.substring(1)&#125;)const daterange$&#123;AttrName&#125; &#x3D; ref([]);#end#endconst data &#x3D; reactive(&#123;  form: &#123;&#125;,  queryParams: &#123;#foreach ($column in $columns)#if($column.query)    $column.javaField: undefined#if($foreach.count !&#x3D; $columns.size()),#end#end#end  &#125;,  rules: &#123;#foreach ($column in $columns)#if($column.required)#set($parentheseIndex&#x3D;$column.columnComment.indexOf(&quot;（&quot;))#if($parentheseIndex !&#x3D; -1)#set($comment&#x3D;$column.columnComment.substring(0, $parentheseIndex))#else#set($comment&#x3D;$column.columnComment)#end    $column.javaField: [      &#123; required: true, message: &quot;$comment不能为空&quot;, trigger: #if($column.htmlType &#x3D;&#x3D; &quot;select&quot; || $column.htmlType &#x3D;&#x3D; &quot;radio&quot;)&quot;change&quot;#else&quot;blur&quot;#end &#125;    ]#if($foreach.count !&#x3D; $columns.size()),#end#end#end  &#125;&#125;);const &#123; queryParams, form, rules &#125; &#x3D; toRefs(data);&#x2F;** 查询$&#123;functionName&#125;列表 *&#x2F;function getList() &#123;  loading.value &#x3D; true;#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType &#x3D;&#x3D; &quot;BETWEEN&quot;)  queryParams.value.params &#x3D; &#123;&#125;;#break#end#end#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType &#x3D;&#x3D; &quot;BETWEEN&quot;)#set($AttrName&#x3D;$column.javaField.substring(0,1).toUpperCase() + $&#123;column.javaField.substring(1)&#125;)  if (null !&#x3D; daterange$&#123;AttrName&#125; &amp;&amp; &#39;&#39; !&#x3D; daterange$&#123;AttrName&#125;) &#123;    queryParams.value.params[&quot;begin$&#123;AttrName&#125;&quot;] &#x3D; daterange$&#123;AttrName&#125;.value[0];    queryParams.value.params[&quot;end$&#123;AttrName&#125;&quot;] &#x3D; daterange$&#123;AttrName&#125;.value[1];  &#125;#end#end  list$&#123;BusinessName&#125;(queryParams.value).then(response &#x3D;&gt; &#123;    $&#123;businessName&#125;List.value &#x3D; proxy.handleTree(response.data, &quot;$&#123;treeCode&#125;&quot;, &quot;$&#123;treeParentCode&#125;&quot;);    loading.value &#x3D; false;  &#125;);&#125;&#x2F;** 查询$&#123;functionName&#125;下拉树结构 *&#x2F;function getTreeselect() &#123;  list$&#123;BusinessName&#125;().then(response &#x3D;&gt; &#123;    $&#123;businessName&#125;Options.value &#x3D; [];    const data &#x3D; &#123; $&#123;treeCode&#125;: 0, $&#123;treeName&#125;: &#39;顶级节点&#39;, children: [] &#125;;    data.children &#x3D; proxy.handleTree(response.data, &quot;$&#123;treeCode&#125;&quot;, &quot;$&#123;treeParentCode&#125;&quot;);    $&#123;businessName&#125;Options.value.push(data);  &#125;);&#125;&#x2F;&#x2F; 取消按钮function cancel() &#123;  open.value &#x3D; false;  reset();&#125;&#x2F;&#x2F; 表单重置function reset() &#123;  form.value &#x3D; &#123;#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot;)    $column.javaField: []#if($foreach.count !&#x3D; $columns.size()),#end#else    $column.javaField: null#if($foreach.count !&#x3D; $columns.size()),#end#end#end  &#125;;  proxy.resetForm(&quot;$&#123;businessName&#125;Ref&quot;);&#125;&#x2F;** 搜索按钮操作 *&#x2F;function handleQuery() &#123;  getList();&#125;&#x2F;** 重置按钮操作 *&#x2F;function resetQuery() &#123;#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType &#x3D;&#x3D; &quot;BETWEEN&quot;)#set($AttrName&#x3D;$column.javaField.substring(0,1).toUpperCase() + $&#123;column.javaField.substring(1)&#125;)  daterange$&#123;AttrName&#125;.value &#x3D; [];#end#end  proxy.resetForm(&quot;queryRef&quot;);  handleQuery();&#125;&#x2F;** 新增按钮操作 *&#x2F;function handleAdd(row) &#123;  reset();  getTreeselect();  if (row !&#x3D; null &amp;&amp; row.$&#123;treeCode&#125;) &#123;    form.value.$&#123;treeParentCode&#125; &#x3D; row.$&#123;treeCode&#125;;  &#125; else &#123;    form.value.$&#123;treeParentCode&#125; &#x3D; 0;  &#125;  open.value &#x3D; true;  title.value &#x3D; &quot;添加$&#123;functionName&#125;&quot;;&#125;&#x2F;** 展开&#x2F;折叠操作 *&#x2F;function toggleExpandAll() &#123;  refreshTable.value &#x3D; false;  isExpandAll.value &#x3D; !isExpandAll.value;  nextTick(() &#x3D;&gt; &#123;    refreshTable.value &#x3D; true;  &#125;);&#125;&#x2F;** 修改按钮操作 *&#x2F;async function handleUpdate(row) &#123;  loading.value &#x3D; true;  reset();  await getTreeselect();  if (row !&#x3D; null) &#123;    form.value.$&#123;treeParentCode&#125; &#x3D; row.$&#123;treeParentCode&#125;;  &#125;  get$&#123;BusinessName&#125;(row.$&#123;pkColumn.javaField&#125;).then(response &#x3D;&gt; &#123;    loading.value &#x3D; false;    form.value &#x3D; response.data;#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot;)    form.value.$column.javaField &#x3D; form.value.$&#123;column.javaField&#125;.split(&quot;,&quot;);#end#end    open.value &#x3D; true;    title.value &#x3D; &quot;修改$&#123;functionName&#125;&quot;;  &#125;);&#125;&#x2F;** 提交按钮 *&#x2F;function submitForm() &#123;  proxy.#[[$]]#refs[&quot;$&#123;businessName&#125;Ref&quot;].validate(valid &#x3D;&gt; &#123;    if (valid) &#123;      buttonLoading.value &#x3D; true;#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot;)      form.value.$column.javaField &#x3D; form.value.$&#123;column.javaField&#125;.join(&quot;,&quot;);#end#end      if (form.value.$&#123;pkColumn.javaField&#125; !&#x3D; null) &#123;        update$&#123;BusinessName&#125;(form.value).then(response &#x3D;&gt; &#123;          proxy.#[[$modal]]#.msgSuccess(&quot;修改成功&quot;);          open.value &#x3D; false;          getList();        &#125;).finally(() &#x3D;&gt; &#123;          buttonLoading.value &#x3D; false;        &#125;);      &#125; else &#123;        add$&#123;BusinessName&#125;(form.value).then(response &#x3D;&gt; &#123;          proxy.#[[$modal]]#.msgSuccess(&quot;新增成功&quot;);          open.value &#x3D; false;          getList();        &#125;).finally(() &#x3D;&gt; &#123;          buttonLoading.value &#x3D; false;        &#125;);      &#125;    &#125;  &#125;);&#125;&#x2F;** 删除按钮操作 *&#x2F;function handleDelete(row) &#123;  proxy.#[[$modal]]#.confirm(&#39;是否确认删除$&#123;functionName&#125;编号为&quot;&#39; + row.$&#123;pkColumn.javaField&#125; + &#39;&quot;的数据项？&#39;).then(function() &#123;    loading.value &#x3D; true;    return del$&#123;BusinessName&#125;(row.$&#123;pkColumn.javaField&#125;);  &#125;).then(() &#x3D;&gt; &#123;    loading.value &#x3D; false;    getList();    proxy.#[[$modal]]#.msgSuccess(&quot;删除成功&quot;);  &#125;).catch(() &#x3D;&gt; &#123;  &#125;).finally(() &#x3D;&gt; &#123;    loading.value &#x3D; false;  &#125;);&#125;getList();&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="index-vue2-vm"><a href="#index-vue2-vm" class="headerlink" title="index.vue2.vm"></a>index.vue2.vm</h5><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div class&#x3D;&quot;app-container&quot;&gt;    &lt;el-form :model&#x3D;&quot;queryParams&quot; ref&#x3D;&quot;queryForm&quot; size&#x3D;&quot;small&quot; :inline&#x3D;&quot;true&quot; v-show&#x3D;&quot;showSearch&quot; label-width&#x3D;&quot;68px&quot;&gt;#foreach($column in $columns)#if($column.query)#set($dictType&#x3D;$column.dictType)#set($AttrName&#x3D;$column.javaField.substring(0,1).toUpperCase() + $&#123;column.javaField.substring(1)&#125;)#set($parentheseIndex&#x3D;$column.columnComment.indexOf(&quot;（&quot;))#if($parentheseIndex !&#x3D; -1)#set($comment&#x3D;$column.columnComment.substring(0, $parentheseIndex))#else#set($comment&#x3D;$column.columnComment)#end#if($column.htmlType &#x3D;&#x3D; &quot;input&quot; || $column.htmlType &#x3D;&#x3D; &quot;textarea&quot;)      &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;column.javaField&#125;&quot;&gt;        &lt;el-input          v-model&#x3D;&quot;queryParams.$&#123;column.javaField&#125;&quot;          placeholder&#x3D;&quot;请输入$&#123;comment&#125;&quot;          clearable          @keyup.enter.native&#x3D;&quot;handleQuery&quot;        &#x2F;&gt;      &lt;&#x2F;el-form-item&gt;#elseif(($column.htmlType &#x3D;&#x3D; &quot;select&quot; || $column.htmlType &#x3D;&#x3D; &quot;radio&quot;) &amp;&amp; &quot;&quot; !&#x3D; $dictType)      &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;column.javaField&#125;&quot;&gt;        &lt;el-select v-model&#x3D;&quot;queryParams.$&#123;column.javaField&#125;&quot; placeholder&#x3D;&quot;请选择$&#123;comment&#125;&quot; clearable&gt;          &lt;el-option            v-for&#x3D;&quot;dict in dict.type.$&#123;dictType&#125;&quot;            :key&#x3D;&quot;dict.value&quot;            :label&#x3D;&quot;dict.label&quot;            :value&#x3D;&quot;dict.value&quot;          &#x2F;&gt;        &lt;&#x2F;el-select&gt;      &lt;&#x2F;el-form-item&gt;#elseif(($column.htmlType &#x3D;&#x3D; &quot;select&quot; || $column.htmlType &#x3D;&#x3D; &quot;radio&quot;) &amp;&amp; $dictType)      &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;column.javaField&#125;&quot;&gt;        &lt;el-select v-model&#x3D;&quot;queryParams.$&#123;column.javaField&#125;&quot; placeholder&#x3D;&quot;请选择$&#123;comment&#125;&quot; clearable&gt;          &lt;el-option label&#x3D;&quot;请选择字典生成&quot; value&#x3D;&quot;&quot; &#x2F;&gt;        &lt;&#x2F;el-select&gt;      &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType !&#x3D; &quot;BETWEEN&quot;)      &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;column.javaField&#125;&quot;&gt;        &lt;el-date-picker clearable          v-model&#x3D;&quot;queryParams.$&#123;column.javaField&#125;&quot;          type&#x3D;&quot;date&quot;          value-format&#x3D;&quot;yyyy-MM-dd&quot;          placeholder&#x3D;&quot;请选择$&#123;comment&#125;&quot;&gt;        &lt;&#x2F;el-date-picker&gt;      &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType &#x3D;&#x3D; &quot;BETWEEN&quot;)      &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot;&gt;        &lt;el-date-picker          v-model&#x3D;&quot;daterange$&#123;AttrName&#125;&quot;          style&#x3D;&quot;width: 240px&quot;          value-format&#x3D;&quot;yyyy-MM-dd HH:mm:ss&quot;          type&#x3D;&quot;daterange&quot;          range-separator&#x3D;&quot;-&quot;          start-placeholder&#x3D;&quot;开始日期&quot;          end-placeholder&#x3D;&quot;结束日期&quot;          :default-time&#x3D;&quot;[&#39;00:00:00&#39;, &#39;23:59:59&#39;]&quot;        &gt;&lt;&#x2F;el-date-picker&gt;      &lt;&#x2F;el-form-item&gt;#end#end#end      &lt;el-form-item&gt;        &lt;el-button type&#x3D;&quot;primary&quot; icon&#x3D;&quot;el-icon-search&quot; size&#x3D;&quot;mini&quot; @click&#x3D;&quot;handleQuery&quot;&gt;搜索&lt;&#x2F;el-button&gt;        &lt;el-button icon&#x3D;&quot;el-icon-refresh&quot; size&#x3D;&quot;mini&quot; @click&#x3D;&quot;resetQuery&quot;&gt;重置&lt;&#x2F;el-button&gt;      &lt;&#x2F;el-form-item&gt;    &lt;&#x2F;el-form&gt;    &lt;el-row :gutter&#x3D;&quot;10&quot; class&#x3D;&quot;mb8&quot;&gt;      &lt;el-col :span&#x3D;&quot;1.5&quot;&gt;        &lt;el-button          type&#x3D;&quot;primary&quot;          plain          icon&#x3D;&quot;el-icon-plus&quot;          size&#x3D;&quot;mini&quot;          @click&#x3D;&quot;handleAdd&quot;          v-hasPermi&#x3D;&quot;[&#39;$&#123;moduleName&#125;:$&#123;businessName&#125;:add&#39;]&quot;        &gt;新增&lt;&#x2F;el-button&gt;      &lt;&#x2F;el-col&gt;      &lt;el-col :span&#x3D;&quot;1.5&quot;&gt;        &lt;el-button          type&#x3D;&quot;success&quot;          plain          icon&#x3D;&quot;el-icon-edit&quot;          size&#x3D;&quot;mini&quot;          :disabled&#x3D;&quot;single&quot;          @click&#x3D;&quot;handleUpdate&quot;          v-hasPermi&#x3D;&quot;[&#39;$&#123;moduleName&#125;:$&#123;businessName&#125;:edit&#39;]&quot;        &gt;修改&lt;&#x2F;el-button&gt;      &lt;&#x2F;el-col&gt;      &lt;el-col :span&#x3D;&quot;1.5&quot;&gt;        &lt;el-button          type&#x3D;&quot;danger&quot;          plain          icon&#x3D;&quot;el-icon-delete&quot;          size&#x3D;&quot;mini&quot;          :disabled&#x3D;&quot;multiple&quot;          @click&#x3D;&quot;handleDelete&quot;          v-hasPermi&#x3D;&quot;[&#39;$&#123;moduleName&#125;:$&#123;businessName&#125;:remove&#39;]&quot;        &gt;删除&lt;&#x2F;el-button&gt;      &lt;&#x2F;el-col&gt;      &lt;el-col :span&#x3D;&quot;1.5&quot;&gt;        &lt;el-button          type&#x3D;&quot;warning&quot;          plain          icon&#x3D;&quot;el-icon-download&quot;          size&#x3D;&quot;mini&quot;          @click&#x3D;&quot;handleExport&quot;          v-hasPermi&#x3D;&quot;[&#39;$&#123;moduleName&#125;:$&#123;businessName&#125;:export&#39;]&quot;        &gt;导出&lt;&#x2F;el-button&gt;      &lt;&#x2F;el-col&gt;      &lt;right-toolbar :showSearch.sync&#x3D;&quot;showSearch&quot; @queryTable&#x3D;&quot;getList&quot;&gt;&lt;&#x2F;right-toolbar&gt;    &lt;&#x2F;el-row&gt;    &lt;el-table v-loading&#x3D;&quot;loading&quot; :data&#x3D;&quot;$&#123;businessName&#125;List&quot; @selection-change&#x3D;&quot;handleSelectionChange&quot;&gt;      &lt;el-table-column type&#x3D;&quot;selection&quot; width&#x3D;&quot;55&quot; align&#x3D;&quot;center&quot; &#x2F;&gt;#foreach($column in $columns)#set($javaField&#x3D;$column.javaField)#set($parentheseIndex&#x3D;$column.columnComment.indexOf(&quot;（&quot;))#if($parentheseIndex !&#x3D; -1)#set($comment&#x3D;$column.columnComment.substring(0, $parentheseIndex))#else#set($comment&#x3D;$column.columnComment)#end#if($column.pk)      &lt;el-table-column label&#x3D;&quot;$&#123;comment&#125;&quot; align&#x3D;&quot;center&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; v-if&#x3D;&quot;$&#123;column.list&#125;&quot;&#x2F;&gt;#elseif($column.list &amp;&amp; $column.htmlType &#x3D;&#x3D; &quot;datetime&quot;)      &lt;el-table-column label&#x3D;&quot;$&#123;comment&#125;&quot; align&#x3D;&quot;center&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; width&#x3D;&quot;180&quot;&gt;        &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;          &lt;span&gt;&#123;&#123; parseTime(scope.row.$&#123;javaField&#125;, &#39;&#123;y&#125;-&#123;m&#125;-&#123;d&#125;&#39;) &#125;&#125;&lt;&#x2F;span&gt;        &lt;&#x2F;template&gt;      &lt;&#x2F;el-table-column&gt;#elseif($column.list &amp;&amp; $column.htmlType &#x3D;&#x3D; &quot;imageUpload&quot;)      &lt;el-table-column label&#x3D;&quot;$&#123;comment&#125;&quot; align&#x3D;&quot;center&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; width&#x3D;&quot;100&quot;&gt;        &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;          &lt;image-preview :src&#x3D;&quot;scope.row.$&#123;javaField&#125;&quot; :width&#x3D;&quot;50&quot; :height&#x3D;&quot;50&quot;&#x2F;&gt;        &lt;&#x2F;template&gt;      &lt;&#x2F;el-table-column&gt;#elseif($column.list &amp;&amp; $column.dictType &amp;&amp; &quot;&quot; !&#x3D; $column.dictType)      &lt;el-table-column label&#x3D;&quot;$&#123;comment&#125;&quot; align&#x3D;&quot;center&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot;&gt;        &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;#if($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot;)          &lt;dict-tag :options&#x3D;&quot;dict.type.$&#123;column.dictType&#125;&quot; :value&#x3D;&quot;scope.row.$&#123;javaField&#125; ? scope.row.$&#123;javaField&#125;.split(&#39;,&#39;) : []&quot;&#x2F;&gt;#else          &lt;dict-tag :options&#x3D;&quot;dict.type.$&#123;column.dictType&#125;&quot; :value&#x3D;&quot;scope.row.$&#123;javaField&#125;&quot;&#x2F;&gt;#end        &lt;&#x2F;template&gt;      &lt;&#x2F;el-table-column&gt;#elseif($column.list &amp;&amp; &quot;&quot; !&#x3D; $javaField)      &lt;el-table-column label&#x3D;&quot;$&#123;comment&#125;&quot; align&#x3D;&quot;center&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; &#x2F;&gt;#end#end      &lt;el-table-column label&#x3D;&quot;操作&quot; align&#x3D;&quot;center&quot; class-name&#x3D;&quot;small-padding fixed-width&quot;&gt;        &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;          &lt;el-button            size&#x3D;&quot;mini&quot;            type&#x3D;&quot;text&quot;            icon&#x3D;&quot;el-icon-edit&quot;            @click&#x3D;&quot;handleUpdate(scope.row)&quot;            v-hasPermi&#x3D;&quot;[&#39;$&#123;moduleName&#125;:$&#123;businessName&#125;:edit&#39;]&quot;          &gt;修改&lt;&#x2F;el-button&gt;          &lt;el-button            size&#x3D;&quot;mini&quot;            type&#x3D;&quot;text&quot;            icon&#x3D;&quot;el-icon-delete&quot;            @click&#x3D;&quot;handleDelete(scope.row)&quot;            v-hasPermi&#x3D;&quot;[&#39;$&#123;moduleName&#125;:$&#123;businessName&#125;:remove&#39;]&quot;          &gt;删除&lt;&#x2F;el-button&gt;        &lt;&#x2F;template&gt;      &lt;&#x2F;el-table-column&gt;    &lt;&#x2F;el-table&gt;    &lt;pagination      v-show&#x3D;&quot;total&gt;0&quot;      :total&#x3D;&quot;total&quot;      :page.sync&#x3D;&quot;queryParams.pageNum&quot;      :limit.sync&#x3D;&quot;queryParams.pageSize&quot;      @pagination&#x3D;&quot;getList&quot;    &#x2F;&gt;    &lt;!-- 添加或修改$&#123;functionName&#125;对话框 --&gt;    &lt;el-dialog :title&#x3D;&quot;title&quot; :visible.sync&#x3D;&quot;open&quot; width&#x3D;&quot;500px&quot; append-to-body&gt;      &lt;el-form ref&#x3D;&quot;form&quot; :model&#x3D;&quot;form&quot; :rules&#x3D;&quot;rules&quot; label-width&#x3D;&quot;80px&quot;&gt;#foreach($column in $columns)#set($field&#x3D;$column.javaField)#if($column.insert &amp;&amp; !$column.pk)#set($parentheseIndex&#x3D;$column.columnComment.indexOf(&quot;（&quot;))#if($parentheseIndex !&#x3D; -1)#set($comment&#x3D;$column.columnComment.substring(0, $parentheseIndex))#else#set($comment&#x3D;$column.columnComment)#end#set($dictType&#x3D;$column.dictType)#if($column.htmlType &#x3D;&#x3D; &quot;input&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-input v-model&#x3D;&quot;form.$&#123;field&#125;&quot; placeholder&#x3D;&quot;请输入$&#123;comment&#125;&quot; &#x2F;&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;imageUpload&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;image-upload v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&#x2F;&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;fileUpload&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;file-upload v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&#x2F;&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;editor&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot;&gt;          &lt;editor v-model&#x3D;&quot;form.$&#123;field&#125;&quot; :min-height&#x3D;&quot;192&quot;&#x2F;&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;select&quot; &amp;&amp; &quot;&quot; !&#x3D; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-select v-model&#x3D;&quot;form.$&#123;field&#125;&quot; placeholder&#x3D;&quot;请选择$&#123;comment&#125;&quot;&gt;            &lt;el-option              v-for&#x3D;&quot;dict in dict.type.$&#123;dictType&#125;&quot;              :key&#x3D;&quot;dict.value&quot;              :label&#x3D;&quot;dict.label&quot;#if($column.javaType &#x3D;&#x3D; &quot;Integer&quot; || $column.javaType &#x3D;&#x3D; &quot;Long&quot;)              :value&#x3D;&quot;parseInt(dict.value)&quot;#else              :value&#x3D;&quot;dict.value&quot;#end            &gt;&lt;&#x2F;el-option&gt;          &lt;&#x2F;el-select&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;select&quot; &amp;&amp; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-select v-model&#x3D;&quot;form.$&#123;field&#125;&quot; placeholder&#x3D;&quot;请选择$&#123;comment&#125;&quot;&gt;            &lt;el-option label&#x3D;&quot;请选择字典生成&quot; value&#x3D;&quot;&quot; &#x2F;&gt;          &lt;&#x2F;el-select&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot; &amp;&amp; &quot;&quot; !&#x3D; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-checkbox-group v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&gt;            &lt;el-checkbox              v-for&#x3D;&quot;dict in dict.type.$&#123;dictType&#125;&quot;              :key&#x3D;&quot;dict.value&quot;              :label&#x3D;&quot;dict.value&quot;&gt;              &#123;&#123;dict.label&#125;&#125;            &lt;&#x2F;el-checkbox&gt;          &lt;&#x2F;el-checkbox-group&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot; &amp;&amp; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-checkbox-group v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&gt;            &lt;el-checkbox&gt;请选择字典生成&lt;&#x2F;el-checkbox&gt;          &lt;&#x2F;el-checkbox-group&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;radio&quot; &amp;&amp; &quot;&quot; !&#x3D; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-radio-group v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&gt;            &lt;el-radio              v-for&#x3D;&quot;dict in dict.type.$&#123;dictType&#125;&quot;              :key&#x3D;&quot;dict.value&quot;#if($column.javaType &#x3D;&#x3D; &quot;Integer&quot; || $column.javaType &#x3D;&#x3D; &quot;Long&quot;)              :label&#x3D;&quot;parseInt(dict.value)&quot;#else              :label&#x3D;&quot;dict.value&quot;#end            &gt;&#123;&#123;dict.label&#125;&#125;&lt;&#x2F;el-radio&gt;          &lt;&#x2F;el-radio-group&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;radio&quot; &amp;&amp; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-radio-group v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&gt;            &lt;el-radio label&#x3D;&quot;1&quot;&gt;请选择字典生成&lt;&#x2F;el-radio&gt;          &lt;&#x2F;el-radio-group&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;datetime&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-date-picker clearable            v-model&#x3D;&quot;form.$&#123;field&#125;&quot;            type&#x3D;&quot;datetime&quot;            value-format&#x3D;&quot;yyyy-MM-dd HH:mm:ss&quot;            placeholder&#x3D;&quot;请选择$&#123;comment&#125;&quot;&gt;          &lt;&#x2F;el-date-picker&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;textarea&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-input v-model&#x3D;&quot;form.$&#123;field&#125;&quot; type&#x3D;&quot;textarea&quot; placeholder&#x3D;&quot;请输入内容&quot; &#x2F;&gt;        &lt;&#x2F;el-form-item&gt;#end#end#end#if($table.sub)        &lt;el-divider content-position&#x3D;&quot;center&quot;&gt;$&#123;subTable.functionName&#125;信息&lt;&#x2F;el-divider&gt;        &lt;el-row :gutter&#x3D;&quot;10&quot; class&#x3D;&quot;mb8&quot;&gt;          &lt;el-col :span&#x3D;&quot;1.5&quot;&gt;            &lt;el-button type&#x3D;&quot;primary&quot; icon&#x3D;&quot;el-icon-plus&quot; size&#x3D;&quot;mini&quot; @click&#x3D;&quot;handleAdd$&#123;subClassName&#125;&quot;&gt;添加&lt;&#x2F;el-button&gt;          &lt;&#x2F;el-col&gt;          &lt;el-col :span&#x3D;&quot;1.5&quot;&gt;            &lt;el-button type&#x3D;&quot;danger&quot; icon&#x3D;&quot;el-icon-delete&quot; size&#x3D;&quot;mini&quot; @click&#x3D;&quot;handleDelete$&#123;subClassName&#125;&quot;&gt;删除&lt;&#x2F;el-button&gt;          &lt;&#x2F;el-col&gt;        &lt;&#x2F;el-row&gt;        &lt;el-table :data&#x3D;&quot;$&#123;subclassName&#125;List&quot; :row-class-name&#x3D;&quot;row$&#123;subClassName&#125;Index&quot; @selection-change&#x3D;&quot;handle$&#123;subClassName&#125;SelectionChange&quot; ref&#x3D;&quot;$&#123;subclassName&#125;&quot;&gt;          &lt;el-table-column type&#x3D;&quot;selection&quot; width&#x3D;&quot;50&quot; align&#x3D;&quot;center&quot; &#x2F;&gt;          &lt;el-table-column label&#x3D;&quot;序号&quot; align&#x3D;&quot;center&quot; prop&#x3D;&quot;index&quot; width&#x3D;&quot;50&quot;&#x2F;&gt;#foreach($column in $subTable.columns)#set($javaField&#x3D;$column.javaField)#set($parentheseIndex&#x3D;$column.columnComment.indexOf(&quot;（&quot;))#if($parentheseIndex !&#x3D; -1)#set($comment&#x3D;$column.columnComment.substring(0, $parentheseIndex))#else#set($comment&#x3D;$column.columnComment)#end#if($column.pk || $javaField &#x3D;&#x3D; $&#123;subTableFkclassName&#125;)#elseif($column.list &amp;&amp; $column.htmlType &#x3D;&#x3D; &quot;input&quot;)          &lt;el-table-column label&#x3D;&quot;$comment&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; width&#x3D;&quot;150&quot;&gt;            &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;              &lt;el-input v-model&#x3D;&quot;scope.row.$javaField&quot; placeholder&#x3D;&quot;请输入$comment&quot; &#x2F;&gt;            &lt;&#x2F;template&gt;          &lt;&#x2F;el-table-column&gt;#elseif($column.list &amp;&amp; $column.htmlType &#x3D;&#x3D; &quot;datetime&quot;)          &lt;el-table-column label&#x3D;&quot;$comment&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; width&#x3D;&quot;240&quot;&gt;            &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;              &lt;el-date-picker clearable v-model&#x3D;&quot;scope.row.$javaField&quot; type&#x3D;&quot;date&quot; value-format&#x3D;&quot;yyyy-MM-dd&quot; placeholder&#x3D;&quot;请选择$comment&quot; &#x2F;&gt;            &lt;&#x2F;template&gt;          &lt;&#x2F;el-table-column&gt;#elseif($column.list &amp;&amp; ($column.htmlType &#x3D;&#x3D; &quot;select&quot; || $column.htmlType &#x3D;&#x3D; &quot;radio&quot;) &amp;&amp; &quot;&quot; !&#x3D; $column.dictType)          &lt;el-table-column label&#x3D;&quot;$comment&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; width&#x3D;&quot;150&quot;&gt;            &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;              &lt;el-select v-model&#x3D;&quot;scope.row.$javaField&quot; placeholder&#x3D;&quot;请选择$comment&quot;&gt;                &lt;el-option                  v-for&#x3D;&quot;dict in dict.type.$column.dictType&quot;                  :key&#x3D;&quot;dict.value&quot;                  :label&#x3D;&quot;dict.label&quot;                  :value&#x3D;&quot;dict.value&quot;                &gt;&lt;&#x2F;el-option&gt;              &lt;&#x2F;el-select&gt;            &lt;&#x2F;template&gt;          &lt;&#x2F;el-table-column&gt;#elseif($column.list &amp;&amp; ($column.htmlType &#x3D;&#x3D; &quot;select&quot; || $column.htmlType &#x3D;&#x3D; &quot;radio&quot;) &amp;&amp; &quot;&quot; &#x3D;&#x3D; $column.dictType)          &lt;el-table-column label&#x3D;&quot;$comment&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; width&#x3D;&quot;150&quot;&gt;            &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;              &lt;el-select v-model&#x3D;&quot;scope.row.$javaField&quot; placeholder&#x3D;&quot;请选择$comment&quot;&gt;                &lt;el-option label&#x3D;&quot;请选择字典生成&quot; value&#x3D;&quot;&quot; &#x2F;&gt;              &lt;&#x2F;el-select&gt;            &lt;&#x2F;template&gt;          &lt;&#x2F;el-table-column&gt;#end#end        &lt;&#x2F;el-table&gt;#end      &lt;&#x2F;el-form&gt;      &lt;div slot&#x3D;&quot;footer&quot; class&#x3D;&quot;dialog-footer&quot;&gt;        &lt;el-button :loading&#x3D;&quot;buttonLoading&quot; type&#x3D;&quot;primary&quot; @click&#x3D;&quot;submitForm&quot;&gt;确 定&lt;&#x2F;el-button&gt;        &lt;el-button @click&#x3D;&quot;cancel&quot;&gt;取 消&lt;&#x2F;el-button&gt;      &lt;&#x2F;div&gt;    &lt;&#x2F;el-dialog&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123; list$&#123;BusinessName&#125;, get$&#123;BusinessName&#125;, del$&#123;BusinessName&#125;, add$&#123;BusinessName&#125;, update$&#123;BusinessName&#125; &#125; from &quot;@&#x2F;api&#x2F;$&#123;moduleName&#125;&#x2F;$&#123;businessName&#125;&quot;;export default &#123;  name: &quot;$&#123;BusinessName&#125;&quot;,#if($&#123;dicts&#125; !&#x3D; &#39;&#39;)  dicts: [$&#123;dicts&#125;],#end  data() &#123;    return &#123;      &#x2F;&#x2F; 按钮loading      buttonLoading: false,      &#x2F;&#x2F; 遮罩层      loading: true,      &#x2F;&#x2F; 选中数组      ids: [],#if($table.sub)      &#x2F;&#x2F; 子表选中数据      checked$&#123;subClassName&#125;: [],#end      &#x2F;&#x2F; 非单个禁用      single: true,      &#x2F;&#x2F; 非多个禁用      multiple: true,      &#x2F;&#x2F; 显示搜索条件      showSearch: true,      &#x2F;&#x2F; 总条数      total: 0,      &#x2F;&#x2F; $&#123;functionName&#125;表格数据      $&#123;businessName&#125;List: [],#if($table.sub)      &#x2F;&#x2F; $&#123;subTable.functionName&#125;表格数据      $&#123;subclassName&#125;List: [],#end      &#x2F;&#x2F; 弹出层标题      title: &quot;&quot;,      &#x2F;&#x2F; 是否显示弹出层      open: false,#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType &#x3D;&#x3D; &quot;BETWEEN&quot;)#set($AttrName&#x3D;$column.javaField.substring(0,1).toUpperCase() + $&#123;column.javaField.substring(1)&#125;)      &#x2F;&#x2F; $comment时间范围      daterange$&#123;AttrName&#125;: [],#end#end      &#x2F;&#x2F; 查询参数      queryParams: &#123;        pageNum: 1,        pageSize: 10,#foreach ($column in $columns)#if($column.query)        $column.javaField: undefined#if($foreach.count !&#x3D; $columns.size()),#end#end#end      &#125;,      &#x2F;&#x2F; 表单参数      form: &#123;&#125;,      &#x2F;&#x2F; 表单校验      rules: &#123;#foreach ($column in $columns)#if($column.required)#set($parentheseIndex&#x3D;$column.columnComment.indexOf(&quot;（&quot;))#if($parentheseIndex !&#x3D; -1)#set($comment&#x3D;$column.columnComment.substring(0, $parentheseIndex))#else#set($comment&#x3D;$column.columnComment)#end        $column.javaField: [          &#123; required: true, message: &quot;$comment不能为空&quot;, trigger: #if($column.htmlType &#x3D;&#x3D; &quot;select&quot; || $column.htmlType &#x3D;&#x3D; &quot;radio&quot;)&quot;change&quot;#else&quot;blur&quot;#end &#125;        ]#if($foreach.count !&#x3D; $columns.size()),#end#end#end      &#125;    &#125;;  &#125;,  created() &#123;    this.getList();  &#125;,  methods: &#123;    &#x2F;** 查询$&#123;functionName&#125;列表 *&#x2F;    getList() &#123;      this.loading &#x3D; true;#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType &#x3D;&#x3D; &quot;BETWEEN&quot;)      this.queryParams.params &#x3D; &#123;&#125;;#break#end#end#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType &#x3D;&#x3D; &quot;BETWEEN&quot;)#set($AttrName&#x3D;$column.javaField.substring(0,1).toUpperCase() + $&#123;column.javaField.substring(1)&#125;)      if (null !&#x3D; this.daterange$&#123;AttrName&#125; &amp;&amp; &#39;&#39; !&#x3D; this.daterange$&#123;AttrName&#125;) &#123;        this.queryParams.params[&quot;begin$&#123;AttrName&#125;&quot;] &#x3D; this.daterange$&#123;AttrName&#125;[0];        this.queryParams.params[&quot;end$&#123;AttrName&#125;&quot;] &#x3D; this.daterange$&#123;AttrName&#125;[1];      &#125;#end#end      list$&#123;BusinessName&#125;(this.queryParams).then(response &#x3D;&gt; &#123;        this.$&#123;businessName&#125;List &#x3D; response.rows;        this.total &#x3D; response.total;        this.loading &#x3D; false;      &#125;);    &#125;,    &#x2F;&#x2F; 取消按钮    cancel() &#123;      this.open &#x3D; false;      this.reset();    &#125;,    &#x2F;&#x2F; 表单重置    reset() &#123;      this.form &#x3D; &#123;#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot;)        $column.javaField: []#if($foreach.count !&#x3D; $columns.size()),#end#else        $column.javaField: undefined#if($foreach.count !&#x3D; $columns.size()),#end#end#end      &#125;;#if($table.sub)      this.$&#123;subclassName&#125;List &#x3D; [];#end      this.resetForm(&quot;form&quot;);    &#125;,    &#x2F;** 搜索按钮操作 *&#x2F;    handleQuery() &#123;      this.queryParams.pageNum &#x3D; 1;      this.getList();    &#125;,    &#x2F;** 重置按钮操作 *&#x2F;    resetQuery() &#123;#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType &#x3D;&#x3D; &quot;BETWEEN&quot;)#set($AttrName&#x3D;$column.javaField.substring(0,1).toUpperCase() + $&#123;column.javaField.substring(1)&#125;)      this.daterange$&#123;AttrName&#125; &#x3D; [];#end#end      this.resetForm(&quot;queryForm&quot;);      this.handleQuery();    &#125;,    &#x2F;&#x2F; 多选框选中数据    handleSelectionChange(selection) &#123;      this.ids &#x3D; selection.map(item &#x3D;&gt; item.$&#123;pkColumn.javaField&#125;)      this.single &#x3D; selection.length!&#x3D;&#x3D;1      this.multiple &#x3D; !selection.length    &#125;,    &#x2F;** 新增按钮操作 *&#x2F;    handleAdd() &#123;      this.reset();      this.open &#x3D; true;      this.title &#x3D; &quot;添加$&#123;functionName&#125;&quot;;    &#125;,    &#x2F;** 修改按钮操作 *&#x2F;    handleUpdate(row) &#123;      this.loading &#x3D; true;      this.reset();      const $&#123;pkColumn.javaField&#125; &#x3D; row.$&#123;pkColumn.javaField&#125; || this.ids      get$&#123;BusinessName&#125;($&#123;pkColumn.javaField&#125;).then(response &#x3D;&gt; &#123;        this.loading &#x3D; false;        this.form &#x3D; response.data;#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot;)        this.form.$column.javaField &#x3D; this.form.$&#123;column.javaField&#125;.split(&quot;,&quot;);#end#end#if($table.sub)        this.$&#123;subclassName&#125;List &#x3D; response.data.$&#123;subclassName&#125;List;#end        this.open &#x3D; true;        this.title &#x3D; &quot;修改$&#123;functionName&#125;&quot;;      &#125;);    &#125;,    &#x2F;** 提交按钮 *&#x2F;    submitForm() &#123;      this.#[[$]]#refs[&quot;form&quot;].validate(valid &#x3D;&gt; &#123;        if (valid) &#123;          this.buttonLoading &#x3D; true;#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot;)          this.form.$column.javaField &#x3D; this.form.$&#123;column.javaField&#125;.join(&quot;,&quot;);#end#end#if($table.sub)          this.form.$&#123;subclassName&#125;List &#x3D; this.$&#123;subclassName&#125;List;#end          if (this.form.$&#123;pkColumn.javaField&#125; !&#x3D; null) &#123;            update$&#123;BusinessName&#125;(this.form).then(response &#x3D;&gt; &#123;              this.#[[$modal]]#.msgSuccess(&quot;修改成功&quot;);              this.open &#x3D; false;              this.getList();            &#125;).finally(() &#x3D;&gt; &#123;              this.buttonLoading &#x3D; false;            &#125;);          &#125; else &#123;            add$&#123;BusinessName&#125;(this.form).then(response &#x3D;&gt; &#123;              this.#[[$modal]]#.msgSuccess(&quot;新增成功&quot;);              this.open &#x3D; false;              this.getList();            &#125;).finally(() &#x3D;&gt; &#123;              this.buttonLoading &#x3D; false;            &#125;);          &#125;        &#125;      &#125;);    &#125;,    &#x2F;** 删除按钮操作 *&#x2F;    handleDelete(row) &#123;      const $&#123;pkColumn.javaField&#125;s &#x3D; row.$&#123;pkColumn.javaField&#125; || this.ids;      this.#[[$modal]]#.confirm(&#39;是否确认删除$&#123;functionName&#125;编号为&quot;&#39; + $&#123;pkColumn.javaField&#125;s + &#39;&quot;的数据项？&#39;).then(() &#x3D;&gt; &#123;        this.loading &#x3D; true;        return del$&#123;BusinessName&#125;($&#123;pkColumn.javaField&#125;s);      &#125;).then(() &#x3D;&gt; &#123;        this.loading &#x3D; false;        this.getList();        this.#[[$modal]]#.msgSuccess(&quot;删除成功&quot;);      &#125;).catch(() &#x3D;&gt; &#123;      &#125;).finally(() &#x3D;&gt; &#123;        this.loading &#x3D; false;      &#125;);    &#125;,#if($table.sub)    &#x2F;** $&#123;subTable.functionName&#125;序号 *&#x2F;    row$&#123;subClassName&#125;Index(&#123; row, rowIndex &#125;) &#123;      row.index &#x3D; rowIndex + 1;    &#125;,    &#x2F;** $&#123;subTable.functionName&#125;添加按钮操作 *&#x2F;    handleAdd$&#123;subClassName&#125;() &#123;      let obj &#x3D; &#123;&#125;;#foreach($column in $subTable.columns)#if($column.pk || $column.javaField &#x3D;&#x3D; $&#123;subTableFkclassName&#125;)#elseif($column.list &amp;&amp; &quot;&quot; !&#x3D; $javaField)      obj.$column.javaField &#x3D; &quot;&quot;;#end#end      this.$&#123;subclassName&#125;List.push(obj);    &#125;,    &#x2F;** $&#123;subTable.functionName&#125;删除按钮操作 *&#x2F;    handleDelete$&#123;subClassName&#125;() &#123;      if (this.checked$&#123;subClassName&#125;.length &#x3D;&#x3D; 0) &#123;        this.#[[$modal]]#.msgError(&quot;请先选择要删除的$&#123;subTable.functionName&#125;数据&quot;);      &#125; else &#123;        const $&#123;subclassName&#125;List &#x3D; this.$&#123;subclassName&#125;List;        const checked$&#123;subClassName&#125; &#x3D; this.checked$&#123;subClassName&#125;;        this.$&#123;subclassName&#125;List &#x3D; $&#123;subclassName&#125;List.filter(function(item) &#123;          return checked$&#123;subClassName&#125;.indexOf(item.index) &#x3D;&#x3D; -1        &#125;);      &#125;    &#125;,    &#x2F;** 复选框选中数据 *&#x2F;    handle$&#123;subClassName&#125;SelectionChange(selection) &#123;      this.checked$&#123;subClassName&#125; &#x3D; selection.map(item &#x3D;&gt; item.index)    &#125;,#end    &#x2F;** 导出按钮操作 *&#x2F;    handleExport() &#123;      this.download(&#39;$&#123;moduleName&#125;&#x2F;$&#123;businessName&#125;&#x2F;export&#39;, &#123;        ...this.queryParams      &#125;, &#96;$&#123;businessName&#125;_#[[$&#123;new Date().getTime()&#125;]]#.xlsx&#96;)    &#125;  &#125;&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="index-tree-vue2-vm"><a href="#index-tree-vue2-vm" class="headerlink" title="index-tree.vue2.vm"></a>index-tree.vue2.vm</h5><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div class&#x3D;&quot;app-container&quot;&gt;    &lt;el-form :model&#x3D;&quot;queryParams&quot; ref&#x3D;&quot;queryForm&quot; size&#x3D;&quot;small&quot; :inline&#x3D;&quot;true&quot; v-show&#x3D;&quot;showSearch&quot; label-width&#x3D;&quot;68px&quot;&gt;#foreach($column in $columns)#if($column.query)#set($dictType&#x3D;$column.dictType)#set($AttrName&#x3D;$column.javaField.substring(0,1).toUpperCase() + $&#123;column.javaField.substring(1)&#125;)#set($parentheseIndex&#x3D;$column.columnComment.indexOf(&quot;（&quot;))#if($parentheseIndex !&#x3D; -1)#set($comment&#x3D;$column.columnComment.substring(0, $parentheseIndex))#else#set($comment&#x3D;$column.columnComment)#end#if($column.htmlType &#x3D;&#x3D; &quot;input&quot; || $column.htmlType &#x3D;&#x3D; &quot;textarea&quot;)      &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;column.javaField&#125;&quot;&gt;        &lt;el-input          v-model&#x3D;&quot;queryParams.$&#123;column.javaField&#125;&quot;          placeholder&#x3D;&quot;请输入$&#123;comment&#125;&quot;          clearable          @keyup.enter.native&#x3D;&quot;handleQuery&quot;        &#x2F;&gt;      &lt;&#x2F;el-form-item&gt;#elseif(($column.htmlType &#x3D;&#x3D; &quot;select&quot; || $column.htmlType &#x3D;&#x3D; &quot;radio&quot;) &amp;&amp; &quot;&quot; !&#x3D; $dictType)      &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;column.javaField&#125;&quot;&gt;        &lt;el-select v-model&#x3D;&quot;queryParams.$&#123;column.javaField&#125;&quot; placeholder&#x3D;&quot;请选择$&#123;comment&#125;&quot; clearable&gt;          &lt;el-option            v-for&#x3D;&quot;dict in dict.type.$&#123;dictType&#125;&quot;            :key&#x3D;&quot;dict.value&quot;            :label&#x3D;&quot;dict.label&quot;            :value&#x3D;&quot;dict.value&quot;          &#x2F;&gt;        &lt;&#x2F;el-select&gt;      &lt;&#x2F;el-form-item&gt;#elseif(($column.htmlType &#x3D;&#x3D; &quot;select&quot; || $column.htmlType &#x3D;&#x3D; &quot;radio&quot;) &amp;&amp; $dictType)      &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;column.javaField&#125;&quot;&gt;        &lt;el-select v-model&#x3D;&quot;queryParams.$&#123;column.javaField&#125;&quot; placeholder&#x3D;&quot;请选择$&#123;comment&#125;&quot; clearable&gt;          &lt;el-option label&#x3D;&quot;请选择字典生成&quot; value&#x3D;&quot;&quot; &#x2F;&gt;        &lt;&#x2F;el-select&gt;      &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType !&#x3D; &quot;BETWEEN&quot;)      &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;column.javaField&#125;&quot;&gt;        &lt;el-date-picker clearable          v-model&#x3D;&quot;queryParams.$&#123;column.javaField&#125;&quot;          type&#x3D;&quot;date&quot;          value-format&#x3D;&quot;yyyy-MM-dd&quot;          placeholder&#x3D;&quot;选择$&#123;comment&#125;&quot;&gt;        &lt;&#x2F;el-date-picker&gt;      &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType &#x3D;&#x3D; &quot;BETWEEN&quot;)      &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot;&gt;        &lt;el-date-picker          v-model&#x3D;&quot;daterange$&#123;AttrName&#125;&quot;          style&#x3D;&quot;width: 240px&quot;          value-format&#x3D;&quot;yyyy-MM-dd HH:mm:ss&quot;          type&#x3D;&quot;daterange&quot;          range-separator&#x3D;&quot;-&quot;          start-placeholder&#x3D;&quot;开始日期&quot;          end-placeholder&#x3D;&quot;结束日期&quot;          :default-time&#x3D;&quot;[&#39;00:00:00&#39;, &#39;23:59:59&#39;]&quot;        &gt;&lt;&#x2F;el-date-picker&gt;      &lt;&#x2F;el-form-item&gt;#end#end#end      &lt;el-form-item&gt;    &lt;el-button type&#x3D;&quot;primary&quot; icon&#x3D;&quot;el-icon-search&quot; size&#x3D;&quot;mini&quot; @click&#x3D;&quot;handleQuery&quot;&gt;搜索&lt;&#x2F;el-button&gt;        &lt;el-button icon&#x3D;&quot;el-icon-refresh&quot; size&#x3D;&quot;mini&quot; @click&#x3D;&quot;resetQuery&quot;&gt;重置&lt;&#x2F;el-button&gt;      &lt;&#x2F;el-form-item&gt;    &lt;&#x2F;el-form&gt;    &lt;el-row :gutter&#x3D;&quot;10&quot; class&#x3D;&quot;mb8&quot;&gt;      &lt;el-col :span&#x3D;&quot;1.5&quot;&gt;        &lt;el-button          type&#x3D;&quot;primary&quot;          plain          icon&#x3D;&quot;el-icon-plus&quot;          size&#x3D;&quot;mini&quot;          @click&#x3D;&quot;handleAdd&quot;          v-hasPermi&#x3D;&quot;[&#39;$&#123;moduleName&#125;:$&#123;businessName&#125;:add&#39;]&quot;        &gt;新增&lt;&#x2F;el-button&gt;      &lt;&#x2F;el-col&gt;      &lt;el-col :span&#x3D;&quot;1.5&quot;&gt;        &lt;el-button          type&#x3D;&quot;info&quot;          plain          icon&#x3D;&quot;el-icon-sort&quot;          size&#x3D;&quot;mini&quot;          @click&#x3D;&quot;toggleExpandAll&quot;        &gt;展开&#x2F;折叠&lt;&#x2F;el-button&gt;      &lt;&#x2F;el-col&gt;      &lt;right-toolbar :showSearch.sync&#x3D;&quot;showSearch&quot; @queryTable&#x3D;&quot;getList&quot;&gt;&lt;&#x2F;right-toolbar&gt;    &lt;&#x2F;el-row&gt;    &lt;el-table      v-if&#x3D;&quot;refreshTable&quot;      v-loading&#x3D;&quot;loading&quot;      :data&#x3D;&quot;$&#123;businessName&#125;List&quot;      row-key&#x3D;&quot;$&#123;treeCode&#125;&quot;      :default-expand-all&#x3D;&quot;isExpandAll&quot;      :tree-props&#x3D;&quot;&#123;children: &#39;children&#39;, hasChildren: &#39;hasChildren&#39;&#125;&quot;    &gt;#foreach($column in $columns)#set($javaField&#x3D;$column.javaField)#set($parentheseIndex&#x3D;$column.columnComment.indexOf(&quot;（&quot;))#if($parentheseIndex !&#x3D; -1)#set($comment&#x3D;$column.columnComment.substring(0, $parentheseIndex))#else#set($comment&#x3D;$column.columnComment)#end#if($column.pk)#elseif($column.list &amp;&amp; $column.htmlType &#x3D;&#x3D; &quot;datetime&quot;)      &lt;el-table-column label&#x3D;&quot;$&#123;comment&#125;&quot; align&#x3D;&quot;center&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; width&#x3D;&quot;180&quot;&gt;        &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;          &lt;span&gt;&#123;&#123; parseTime(scope.row.$&#123;javaField&#125;, &#39;&#123;y&#125;-&#123;m&#125;-&#123;d&#125;&#39;) &#125;&#125;&lt;&#x2F;span&gt;        &lt;&#x2F;template&gt;      &lt;&#x2F;el-table-column&gt;#elseif($column.list &amp;&amp; $column.htmlType &#x3D;&#x3D; &quot;imageUpload&quot;)      &lt;el-table-column label&#x3D;&quot;$&#123;comment&#125;&quot; align&#x3D;&quot;center&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; width&#x3D;&quot;100&quot;&gt;          &lt;template #default&#x3D;&quot;scope&quot;&gt;              &lt;image-preview :src&#x3D;&quot;scope.row.$&#123;javaField&#125;&quot; :width&#x3D;&quot;50&quot; :height&#x3D;&quot;50&quot;&#x2F;&gt;          &lt;&#x2F;template&gt;      &lt;&#x2F;el-table-column&gt;#elseif($column.list &amp;&amp; $column.dictType &amp;&amp; &quot;&quot; !&#x3D; $column.dictType)      &lt;el-table-column label&#x3D;&quot;$&#123;comment&#125;&quot; align&#x3D;&quot;center&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot;&gt;        &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;#if($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot;)          &lt;dict-tag :options&#x3D;&quot;dict.type.$&#123;column.dictType&#125;&quot; :value&#x3D;&quot;scope.row.$&#123;javaField&#125; ? scope.row.$&#123;javaField&#125;.split(&#39;,&#39;) : []&quot;&#x2F;&gt;#else          &lt;dict-tag :options&#x3D;&quot;dict.type.$&#123;column.dictType&#125;&quot; :value&#x3D;&quot;scope.row.$&#123;javaField&#125;&quot;&#x2F;&gt;#end        &lt;&#x2F;template&gt;      &lt;&#x2F;el-table-column&gt;#elseif($column.list &amp;&amp; &quot;&quot; !&#x3D; $javaField)#if($&#123;foreach.index&#125; &#x3D;&#x3D; 1)      &lt;el-table-column label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; &#x2F;&gt;#else      &lt;el-table-column label&#x3D;&quot;$&#123;comment&#125;&quot; align&#x3D;&quot;center&quot; prop&#x3D;&quot;$&#123;javaField&#125;&quot; &#x2F;&gt;#end#end#end      &lt;el-table-column label&#x3D;&quot;操作&quot; align&#x3D;&quot;center&quot; class-name&#x3D;&quot;small-padding fixed-width&quot;&gt;        &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;          &lt;el-button            size&#x3D;&quot;mini&quot;            type&#x3D;&quot;text&quot;            icon&#x3D;&quot;el-icon-edit&quot;            @click&#x3D;&quot;handleUpdate(scope.row)&quot;            v-hasPermi&#x3D;&quot;[&#39;$&#123;moduleName&#125;:$&#123;businessName&#125;:edit&#39;]&quot;          &gt;修改&lt;&#x2F;el-button&gt;          &lt;el-button            size&#x3D;&quot;mini&quot;            type&#x3D;&quot;text&quot;            icon&#x3D;&quot;el-icon-plus&quot;            @click&#x3D;&quot;handleAdd(scope.row)&quot;            v-hasPermi&#x3D;&quot;[&#39;$&#123;moduleName&#125;:$&#123;businessName&#125;:add&#39;]&quot;          &gt;新增&lt;&#x2F;el-button&gt;          &lt;el-button            size&#x3D;&quot;mini&quot;            type&#x3D;&quot;text&quot;            icon&#x3D;&quot;el-icon-delete&quot;            @click&#x3D;&quot;handleDelete(scope.row)&quot;            v-hasPermi&#x3D;&quot;[&#39;$&#123;moduleName&#125;:$&#123;businessName&#125;:remove&#39;]&quot;          &gt;删除&lt;&#x2F;el-button&gt;        &lt;&#x2F;template&gt;      &lt;&#x2F;el-table-column&gt;    &lt;&#x2F;el-table&gt;    &lt;!-- 添加或修改$&#123;functionName&#125;对话框 --&gt;    &lt;el-dialog :title&#x3D;&quot;title&quot; :visible.sync&#x3D;&quot;open&quot; width&#x3D;&quot;500px&quot; append-to-body&gt;      &lt;el-form ref&#x3D;&quot;form&quot; :model&#x3D;&quot;form&quot; :rules&#x3D;&quot;rules&quot; label-width&#x3D;&quot;80px&quot;&gt;#foreach($column in $columns)#set($field&#x3D;$column.javaField)#if($column.insert &amp;&amp; !$column.pk)#set($parentheseIndex&#x3D;$column.columnComment.indexOf(&quot;（&quot;))#if($parentheseIndex !&#x3D; -1)#set($comment&#x3D;$column.columnComment.substring(0, $parentheseIndex))#else#set($comment&#x3D;$column.columnComment)#end#set($dictType&#x3D;$column.dictType)#if(&quot;&quot; !&#x3D; $treeParentCode &amp;&amp; $column.javaField &#x3D;&#x3D; $treeParentCode)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;treeParentCode&#125;&quot;&gt;          &lt;treeselect v-model&#x3D;&quot;form.$&#123;treeParentCode&#125;&quot; :options&#x3D;&quot;$&#123;businessName&#125;Options&quot; :normalizer&#x3D;&quot;normalizer&quot; placeholder&#x3D;&quot;请选择$&#123;comment&#125;&quot; &#x2F;&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;input&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-input v-model&#x3D;&quot;form.$&#123;field&#125;&quot; placeholder&#x3D;&quot;请输入$&#123;comment&#125;&quot; &#x2F;&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;imageUpload&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;image-upload v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&#x2F;&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;fileUpload&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;file-upload v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&#x2F;&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;editor&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot;&gt;          &lt;editor v-model&#x3D;&quot;form.$&#123;field&#125;&quot; :min-height&#x3D;&quot;192&quot;&#x2F;&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;select&quot; &amp;&amp; &quot;&quot; !&#x3D; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-select v-model&#x3D;&quot;form.$&#123;field&#125;&quot; placeholder&#x3D;&quot;请选择$&#123;comment&#125;&quot;&gt;            &lt;el-option              v-for&#x3D;&quot;dict in dict.type.$&#123;dictType&#125;&quot;              :key&#x3D;&quot;dict.value&quot;              :label&#x3D;&quot;dict.label&quot;#if($column.javaType &#x3D;&#x3D; &quot;Integer&quot; || $column.javaType &#x3D;&#x3D; &quot;Long&quot;)              :value&#x3D;&quot;parseInt(dict.value)&quot;#else              :value&#x3D;&quot;dict.value&quot;#end            &gt;&lt;&#x2F;el-option&gt;          &lt;&#x2F;el-select&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;select&quot; &amp;&amp; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-select v-model&#x3D;&quot;form.$&#123;field&#125;&quot; placeholder&#x3D;&quot;请选择$&#123;comment&#125;&quot;&gt;            &lt;el-option label&#x3D;&quot;请选择字典生成&quot; value&#x3D;&quot;&quot; &#x2F;&gt;          &lt;&#x2F;el-select&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot; &amp;&amp; &quot;&quot; !&#x3D; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-checkbox-group v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&gt;            &lt;el-checkbox              v-for&#x3D;&quot;dict in dict.type.$&#123;dictType&#125;&quot;              :key&#x3D;&quot;dict.value&quot;              :label&#x3D;&quot;dict.value&quot;&gt;              &#123;&#123;dict.label&#125;&#125;            &lt;&#x2F;el-checkbox&gt;          &lt;&#x2F;el-checkbox-group&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot; &amp;&amp; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-checkbox-group v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&gt;            &lt;el-checkbox&gt;请选择字典生成&lt;&#x2F;el-checkbox&gt;          &lt;&#x2F;el-checkbox-group&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;radio&quot; &amp;&amp; &quot;&quot; !&#x3D; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-radio-group v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&gt;            &lt;el-radio              v-for&#x3D;&quot;dict in dict.type.$&#123;dictType&#125;&quot;              :key&#x3D;&quot;dict.value&quot;#if($column.javaType &#x3D;&#x3D; &quot;Integer&quot; || $column.javaType &#x3D;&#x3D; &quot;Long&quot;)              :label&#x3D;&quot;parseInt(dict.value)&quot;#else              :label&#x3D;&quot;dict.value&quot;#end            &gt;&#123;&#123;dict.label&#125;&#125;&lt;&#x2F;el-radio&gt;          &lt;&#x2F;el-radio-group&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;radio&quot; &amp;&amp; $dictType)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-radio-group v-model&#x3D;&quot;form.$&#123;field&#125;&quot;&gt;            &lt;el-radio label&#x3D;&quot;1&quot;&gt;请选择字典生成&lt;&#x2F;el-radio&gt;          &lt;&#x2F;el-radio-group&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;datetime&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-date-picker clearable            v-model&#x3D;&quot;form.$&#123;field&#125;&quot;            type&#x3D;&quot;datetime&quot;            value-format&#x3D;&quot;yyyy-MM-dd HH:mm:ss&quot;            placeholder&#x3D;&quot;选择$&#123;comment&#125;&quot;&gt;          &lt;&#x2F;el-date-picker&gt;        &lt;&#x2F;el-form-item&gt;#elseif($column.htmlType &#x3D;&#x3D; &quot;textarea&quot;)        &lt;el-form-item label&#x3D;&quot;$&#123;comment&#125;&quot; prop&#x3D;&quot;$&#123;field&#125;&quot;&gt;          &lt;el-input v-model&#x3D;&quot;form.$&#123;field&#125;&quot; type&#x3D;&quot;textarea&quot; placeholder&#x3D;&quot;请输入内容&quot; &#x2F;&gt;        &lt;&#x2F;el-form-item&gt;#end#end#end      &lt;&#x2F;el-form&gt;      &lt;div slot&#x3D;&quot;footer&quot; class&#x3D;&quot;dialog-footer&quot;&gt;        &lt;el-button :loading&#x3D;&quot;buttonLoading&quot; type&#x3D;&quot;primary&quot; @click&#x3D;&quot;submitForm&quot;&gt;确 定&lt;&#x2F;el-button&gt;        &lt;el-button @click&#x3D;&quot;cancel&quot;&gt;取 消&lt;&#x2F;el-button&gt;      &lt;&#x2F;div&gt;    &lt;&#x2F;el-dialog&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123; list$&#123;BusinessName&#125;, get$&#123;BusinessName&#125;, del$&#123;BusinessName&#125;, add$&#123;BusinessName&#125;, update$&#123;BusinessName&#125; &#125; from &quot;@&#x2F;api&#x2F;$&#123;moduleName&#125;&#x2F;$&#123;businessName&#125;&quot;;import Treeselect from &quot;@riophae&#x2F;vue-treeselect&quot;;import &quot;@riophae&#x2F;vue-treeselect&#x2F;dist&#x2F;vue-treeselect.css&quot;;export default &#123;  name: &quot;$&#123;BusinessName&#125;&quot;,#if($&#123;dicts&#125; !&#x3D; &#39;&#39;)  dicts: [$&#123;dicts&#125;],#end  components: &#123;    Treeselect  &#125;,  data() &#123;    return &#123;      &#x2F;&#x2F; 按钮loading      buttonLoading: false,      &#x2F;&#x2F; 遮罩层      loading: true,      &#x2F;&#x2F; 显示搜索条件      showSearch: true,      &#x2F;&#x2F; $&#123;functionName&#125;表格数据      $&#123;businessName&#125;List: [],      &#x2F;&#x2F; $&#123;functionName&#125;树选项      $&#123;businessName&#125;Options: [],      &#x2F;&#x2F; 弹出层标题      title: &quot;&quot;,      &#x2F;&#x2F; 是否显示弹出层      open: false,      &#x2F;&#x2F; 是否展开，默认全部展开      isExpandAll: true,      &#x2F;&#x2F; 重新渲染表格状态      refreshTable: true,#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType &#x3D;&#x3D; &quot;BETWEEN&quot;)#set($AttrName&#x3D;$column.javaField.substring(0,1).toUpperCase() + $&#123;column.javaField.substring(1)&#125;)      &#x2F;&#x2F; $comment时间范围      daterange$&#123;AttrName&#125;: [],#end#end      &#x2F;&#x2F; 查询参数      queryParams: &#123;#foreach ($column in $columns)#if($column.query)        $column.javaField: undefined#if($foreach.count !&#x3D; $columns.size()),#end#end#end      &#125;,      &#x2F;&#x2F; 表单参数      form: &#123;&#125;,      &#x2F;&#x2F; 表单校验      rules: &#123;#foreach ($column in $columns)#if($column.required)#set($parentheseIndex&#x3D;$column.columnComment.indexOf(&quot;（&quot;))#if($parentheseIndex !&#x3D; -1)#set($comment&#x3D;$column.columnComment.substring(0, $parentheseIndex))#else#set($comment&#x3D;$column.columnComment)#end        $column.javaField: [          &#123; required: true, message: &quot;$comment不能为空&quot;, trigger: #if($column.htmlType &#x3D;&#x3D; &quot;select&quot; || $column.htmlType &#x3D;&#x3D; &quot;radio&quot;)&quot;change&quot;#else&quot;blur&quot;#end &#125;        ]#if($foreach.count !&#x3D; $columns.size()),#end#end#end      &#125;    &#125;;  &#125;,  created() &#123;    this.getList();  &#125;,  methods: &#123;    &#x2F;** 查询$&#123;functionName&#125;列表 *&#x2F;    getList() &#123;      this.loading &#x3D; true;#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType &#x3D;&#x3D; &quot;BETWEEN&quot;)      this.queryParams.params &#x3D; &#123;&#125;;#break#end#end#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType &#x3D;&#x3D; &quot;BETWEEN&quot;)#set($AttrName&#x3D;$column.javaField.substring(0,1).toUpperCase() + $&#123;column.javaField.substring(1)&#125;)      if (null !&#x3D; this.daterange$&#123;AttrName&#125; &amp;&amp; &#39;&#39; !&#x3D; this.daterange$&#123;AttrName&#125;) &#123;        this.queryParams.params[&quot;begin$&#123;AttrName&#125;&quot;] &#x3D; this.daterange$&#123;AttrName&#125;[0];        this.queryParams.params[&quot;end$&#123;AttrName&#125;&quot;] &#x3D; this.daterange$&#123;AttrName&#125;[1];      &#125;#end#end      list$&#123;BusinessName&#125;(this.queryParams).then(response &#x3D;&gt; &#123;        this.$&#123;businessName&#125;List &#x3D; this.handleTree(response.data, &quot;$&#123;treeCode&#125;&quot;, &quot;$&#123;treeParentCode&#125;&quot;);        this.loading &#x3D; false;      &#125;);    &#125;,    &#x2F;** 转换$&#123;functionName&#125;数据结构 *&#x2F;    normalizer(node) &#123;      if (node.children &amp;&amp; !node.children.length) &#123;        delete node.children;      &#125;      return &#123;        id: node.$&#123;treeCode&#125;,        label: node.$&#123;treeName&#125;,        children: node.children      &#125;;    &#125;,&#x2F;** 查询$&#123;functionName&#125;下拉树结构 *&#x2F;    getTreeselect() &#123;      list$&#123;BusinessName&#125;().then(response &#x3D;&gt; &#123;        this.$&#123;businessName&#125;Options &#x3D; [];        const data &#x3D; &#123; $&#123;treeCode&#125;: 0, $&#123;treeName&#125;: &#39;顶级节点&#39;, children: [] &#125;;        data.children &#x3D; this.handleTree(response.data, &quot;$&#123;treeCode&#125;&quot;, &quot;$&#123;treeParentCode&#125;&quot;);        this.$&#123;businessName&#125;Options.push(data);      &#125;);    &#125;,    &#x2F;&#x2F; 取消按钮    cancel() &#123;      this.open &#x3D; false;      this.reset();    &#125;,    &#x2F;&#x2F; 表单重置    reset() &#123;      this.form &#x3D; &#123;#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot;)        $column.javaField: []#if($foreach.count !&#x3D; $columns.size()),#end#else        $column.javaField: null#if($foreach.count !&#x3D; $columns.size()),#end#end#end      &#125;;      this.resetForm(&quot;form&quot;);    &#125;,    &#x2F;** 搜索按钮操作 *&#x2F;    handleQuery() &#123;      this.getList();    &#125;,    &#x2F;** 重置按钮操作 *&#x2F;    resetQuery() &#123;#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;datetime&quot; &amp;&amp; $column.queryType &#x3D;&#x3D; &quot;BETWEEN&quot;)#set($AttrName&#x3D;$column.javaField.substring(0,1).toUpperCase() + $&#123;column.javaField.substring(1)&#125;)      this.daterange$&#123;AttrName&#125; &#x3D; [];#end#end      this.resetForm(&quot;queryForm&quot;);      this.handleQuery();    &#125;,    &#x2F;** 新增按钮操作 *&#x2F;    handleAdd(row) &#123;      this.reset();      this.getTreeselect();      if (row !&#x3D; null &amp;&amp; row.$&#123;treeCode&#125;) &#123;        this.form.$&#123;treeParentCode&#125; &#x3D; row.$&#123;treeCode&#125;;      &#125; else &#123;        this.form.$&#123;treeParentCode&#125; &#x3D; 0;      &#125;      this.open &#x3D; true;      this.title &#x3D; &quot;添加$&#123;functionName&#125;&quot;;    &#125;,    &#x2F;** 展开&#x2F;折叠操作 *&#x2F;    toggleExpandAll() &#123;      this.refreshTable &#x3D; false;      this.isExpandAll &#x3D; !this.isExpandAll;      this.$nextTick(() &#x3D;&gt; &#123;        this.refreshTable &#x3D; true;      &#125;);    &#125;,    &#x2F;** 修改按钮操作 *&#x2F;    handleUpdate(row) &#123;  this.loading &#x3D; true;      this.reset();      this.getTreeselect();      if (row !&#x3D; null) &#123;        this.form.$&#123;treeParentCode&#125; &#x3D; row.$&#123;treeParentCode&#125;;      &#125;      get$&#123;BusinessName&#125;(row.$&#123;pkColumn.javaField&#125;).then(response &#x3D;&gt; &#123;    this.loading &#x3D; false;        this.form &#x3D; response.data;#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot;)        this.form.$column.javaField &#x3D; this.form.$&#123;column.javaField&#125;.split(&quot;,&quot;);#end#end        this.open &#x3D; true;        this.title &#x3D; &quot;修改$&#123;functionName&#125;&quot;;      &#125;);    &#125;,    &#x2F;** 提交按钮 *&#x2F;    submitForm() &#123;      this.#[[$]]#refs[&quot;form&quot;].validate(valid &#x3D;&gt; &#123;        if (valid) &#123;  this.buttonLoading &#x3D; true;#foreach ($column in $columns)#if($column.htmlType &#x3D;&#x3D; &quot;checkbox&quot;)          this.form.$column.javaField &#x3D; this.form.$&#123;column.javaField&#125;.join(&quot;,&quot;);#end#end          if (this.form.$&#123;pkColumn.javaField&#125; !&#x3D; null) &#123;            update$&#123;BusinessName&#125;(this.form).then(response &#x3D;&gt; &#123;              this.#[[$modal]]#.msgSuccess(&quot;修改成功&quot;);              this.open &#x3D; false;              this.getList();            &#125;).finally(() &#x3D;&gt; &#123;              this.buttonLoading &#x3D; false;            &#125;);          &#125; else &#123;            add$&#123;BusinessName&#125;(this.form).then(response &#x3D;&gt; &#123;              this.#[[$modal]]#.msgSuccess(&quot;新增成功&quot;);              this.open &#x3D; false;              this.getList();            &#125;).finally(() &#x3D;&gt; &#123;              this.buttonLoading &#x3D; false;            &#125;);          &#125;        &#125;      &#125;);    &#125;,    &#x2F;** 删除按钮操作 *&#x2F;    handleDelete(row) &#123;      this.#[[$modal]]#.confirm(&#39;是否确认删除$&#123;functionName&#125;编号为&quot;&#39; + row.$&#123;pkColumn.javaField&#125; + &#39;&quot;的数据项？&#39;).then(() &#x3D;&gt; &#123;        this.loading &#x3D; true;        return del$&#123;BusinessName&#125;(row.$&#123;pkColumn.javaField&#125;);      &#125;).then(() &#x3D;&gt; &#123;        this.loading &#x3D; false;        this.getList();        this.#[[$modal]]#.msgSuccess(&quot;删除成功&quot;);      &#125;).catch(() &#x3D;&gt; &#123;      &#125;).finally(() &#x3D;&gt; &#123;        this.loading &#x3D; false;      &#125;);    &#125;  &#125;&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>RuoYi-Vue-Plus</category>
      
      <category>代码生成</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RuoYi-Vue-Plus</tag>
      
      <tag>Velocity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySql系统数据库：information_schema</title>
    <link href="/2024/04/13/MySq%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%9Ainformation-schema/"/>
    <url>/2024/04/13/MySq%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%9Ainformation-schema/</url>
    
    <content type="html"><![CDATA[<h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>information_schema：mysql自带的数据库，用于存储数据库元数据，例如数据库名、表名、列的数据类型、访问权限等。通过查询information_schema中的视图和表，用户可以获取数据库架构的详细信息，以便进行元数据管理、数据字典生成、权限管理等。</p><h4 id="数据库的部分表结构"><a href="#数据库的部分表结构" class="headerlink" title="数据库的部分表结构"></a>数据库的部分表结构</h4><h5 id="information-schema-tables"><a href="#information-schema-tables" class="headerlink" title="information_schema.tables"></a>information_schema.tables</h5><p>表示查询数据库information_schema的表tables。</p><p>tables：information_schema的一张表，用于存储数据库的表信息，包括表属于哪个数据库、表的名称、表的类型、创建时间、存储引擎。</p><h5 id="information-schema-columns"><a href="#information-schema-columns" class="headerlink" title="information_schema.columns"></a>information_schema.columns</h5><p>information_schema.columns: 数据库information_schema的表columns，存储了关于数据库中所有表的列的信息。</p><p>下面来看一段mysql代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select column_name,                   (case when (is_nullable &#x3D; &#39;no&#39; &lt;![CDATA[ &amp;&amp; ]]&gt; column_key !&#x3D; &#39;PRI&#39;) then &#39;1&#39; else &#39;0&#39; end) as is_required,                   (case when column_key &#x3D; &#39;PRI&#39; then &#39;1&#39; else &#39;0&#39; end) as is_pk,                   ordinal_position as sort,                   column_comment,                   (case when extra &#x3D; &#39;auto_increment&#39; then &#39;1&#39; else &#39;0&#39; end) as is_increment,                   column_type            from information_schema.columns where table_schema &#x3D; (select database()) and table_name &#x3D; (#&#123;tableName&#125;)            order by ordinal_position<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h6 id="解释字段："><a href="#解释字段：" class="headerlink" title="解释字段："></a>解释字段：</h6><p>is_nulable: 如果列有关键字NOT NULL修饰，则结果为no，表示不能为空，反之则为yes.</p><p>column_key: 判断列是否为主键，是则显示’PRI’.</p><p>ordinal_position: 排列顺序</p><p>column_comment: 列注释</p><p>extra: 额外信息</p><p>column_type: 列类型</p><p><img src="/img/MySq%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%9Ainformation_schema/1.png"></p><p>select database()：查询当前使用的是哪个数据库</p><p>case when: 这是在sql中启动了一个条件语句，如果条件成立，则执行then语句内容，否则实行else语句内容。</p><p><code>&lt;![CDATA[ &amp;&amp; ]]&gt;</code>: 目的是为了让XML解析器让将’&amp;&amp;’视为纯文本而不是XML标记。</p>]]></content>
    
    
    <categories>
      
      <category>MySql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RuoYi-Vue-Plus</tag>
      
      <tag>MySql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Velocity模板引擎和模板语法基础</title>
    <link href="/2024/04/11/Velocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%92%8C%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/04/11/Velocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%92%8C%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="1-Velocity简介"><a href="#1-Velocity简介" class="headerlink" title="1.Velocity简介"></a>1.Velocity简介</h3><p>Velocity是一个基于Java的<a href="https://so.csdn.net/so/search?q=%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E&spm=1001.2101.3001.7020">模板引擎</a>，可以通过特定的语法获取在java对象的数据 , 填充到模板中，从而实现界面和java代码的分离 !</p><h3 id="2-Velocity使用"><a href="#2-Velocity使用" class="headerlink" title="2.Velocity使用"></a>2.Velocity使用</h3><h4 id="2-1添加依赖"><a href="#2-1添加依赖" class="headerlink" title="2.1添加依赖"></a>2.1添加依赖</h4><p>在使用Velocity之前，我们要在pom.xml文件引入依赖</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> velocity代码生成使用模板 <span class="token operator">--</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>                <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>velocity<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>velocity<span class="token operator">-</span>engine<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span>$<span class="token punctuation">&#123;</span>velocity<span class="token punctuation">.</span>version<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="2-2在java代码中使用Velocity"><a href="#2-2在java代码中使用Velocity" class="headerlink" title="2.2在java代码中使用Velocity"></a>2.2在java代码中使用Velocity</h4><p>使用步骤：</p><p>​1.设置velocity资源加载器</p><p>​2.创建velocity容器</p><p>​3.加载模板</p><p>​4.合并数据到模板</p><p>​5.释放资源</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author Becant * 2024-04-11-23:07 * @version 1.0.0 * velocity测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VelocityTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.设置velocity资源加载器</span>        <span class="token class-name">Properties</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"file.resource.loader.class"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Velocity</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.创建velocity容器</span>        <span class="token class-name">VelocityContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VelocityContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SysUser</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"names"</span><span class="token punctuation">,</span> <span class="token string">"张三、李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.加载模板</span>        <span class="token class-name">Template</span> template <span class="token operator">=</span> <span class="token class-name">Velocity</span><span class="token punctuation">.</span><span class="token function">getTemplate</span><span class="token punctuation">(</span><span class="token string">"vm/index.vm"</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"E:\\javaproject\\ruoyi-vue-plus-4x\\ruoyi-demo\\src\\main\\resources\\vm\\index.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.合并数据到模板</span>        template<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> writer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.释放资源</span>        writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>个人理解：<code>template.merge(context, writer);</code>上下文内容合并到模板然后解析到writer</p><p>需要注意的是要在resources中创建如下文件</p><p><img src="/img/Velocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%92%8C%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/1.png"></p><p>context.put(“name”, “张三”); 这段代码表示在上下文中设置了name变量，值为张三。这样就可以从index.vm中获得name变量的值。</p><p>运行VelocityTest后，就生成了index.html文件。index.html文件是index.vm文件的解析。</p><p><img src="/img/Velocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%92%8C%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/2.png"></p><p>接着，就开始解析index.vm文件的内容</p><p><img src="/img/Velocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%92%8C%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/3.png"></p><p>解析之后，在index.html中显示</p><p><img src="/img/Velocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%92%8C%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/4.png"></p><p>$name 就代表获取变量name，还可以这样表示${name}。两者的区别是：当需要拼接某个字符串(如 abc)时，$name就变成了$nameabc会形成一个新的变量;而${name}则变成${name}abc.</p><p><img src="/img/Velocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%92%8C%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/5.png"></p><p>从上图我们可以知道，如果一个变量不存在，则不会被解析。那么当解析时，如何让一个不存在的变量不显示的呢，只需在前边加上!</p><p><img src="/img/Velocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%92%8C%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/6.png"></p><h4 id="2-3Velocity基础语法的使用"><a href="#2-3Velocity基础语法的使用" class="headerlink" title="2.3Velocity基础语法的使用"></a>2.3Velocity基础语法的使用</h4><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p>注释有三种使用方法:</p><p><img src="/img/Velocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%92%8C%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/16.png"></p><h5 id="非解析内容"><a href="#非解析内容" class="headerlink" title="非解析内容"></a>非解析内容</h5><p>如果我们想使用$name这个字符串而不进行解析，可以这样实现：#[[$name]]#</p><p><img src="/img/Velocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%92%8C%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/17.png"></p><h5 id="属性引用以及方法引用"><a href="#属性引用以及方法引用" class="headerlink" title="属性引用以及方法引用"></a>属性引用以及方法引用</h5><p>user.userName即是从上下文中设置的user的一个属性值。names.split(“、”)，分割，与java中的split()方法类似，names也是从上下文中设置的。</p><p><img src="/img/Velocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%92%8C%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/7.png"></p><h5 id="在index-vm中定义变量"><a href="#在index-vm中定义变量" class="headerlink" title="在index.vm中定义变量"></a>在index.vm中定义变量</h5><p><img src="/img/Velocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%92%8C%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/8.png"></p><h5 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h5><p><img src="/img/Velocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%92%8C%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/9.png"></p><h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><p>#foreach($a in $arr)与java中 for(ArrayList a : arr)类似</p><p>使用$foreach.index，索引值从0开始，使用$foreach.count，索引值从1开始</p><p><img src="/img/Velocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%92%8C%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/10.png"></p><h5 id="引入资源"><a href="#引入资源" class="headerlink" title="引入资源"></a>引入资源</h5><p>A引入B：即把B的所有内容代码放到A执行</p><h6 id="1-通过-include-引入模板"><a href="#1-通过-include-引入模板" class="headerlink" title="1.通过#include()引入模板"></a>1.通过#include()引入模板</h6><p>通过#include()引入模板不会进行解析。例如在vm&#x2F;index.vm中引入vm&#x2F;index2.vm，即#include(“vm&#x2F;index2.vm”)，但不能对vm&#x2F;index2.vm解析。</p><p><img src="/img/Velocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%92%8C%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/11.png"></p><h6 id="2-通过-parse-引入模板"><a href="#2-通过-parse-引入模板" class="headerlink" title="2.通过#parse()引入模板"></a>2.通过#parse()引入模板</h6><p>通过#parse()引入模板则会进行解析。</p><p><img src="/img/Velocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%92%8C%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/12.png"></p><h5 id="声明模块"><a href="#声明模块" class="headerlink" title="声明模块"></a>声明模块</h5><p>声明模块有点类似java中的方法，但是模块内声明的变量，在模块外也可以使用。</p><p><img src="/img/Velocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%92%8C%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/13.png"></p><h5 id="动态计算指令"><a href="#动态计算指令" class="headerlink" title="动态计算指令"></a>动态计算指令</h5><p><img src="/img/Velocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%92%8C%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/14.png"></p><h5 id="定义宏指令"><a href="#定义宏指令" class="headerlink" title="定义宏指令"></a>定义宏指令</h5><p><img src="/img/Velocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%92%8C%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/15.png"></p><p>如果本文出现错误或有歧义，劳烦大家指出，谢谢！</p><p>本文到此结束！</p>]]></content>
    
    
    <categories>
      
      <category>Velocity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RuoYi-Vue-Plus</tag>
      
      <tag>Velocity</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
